<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Orbifolds and Other Games - misc</title><link href="https://orbifold.xyz/" rel="alternate"></link><link href="https://orbifold.xyz/feeds/misc.atom.xml" rel="self"></link><id>https://orbifold.xyz/</id><updated>2024-06-19T21:30:00-07:00</updated><entry><title>The Prehistory of Kubernetes: From Cubic Equations to Cloud Orchestration</title><link href="https://orbifold.xyz/cubic-k8s.html" rel="alternate"></link><published>2024-06-19T21:30:00-07:00</published><updated>2024-06-19T21:30:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2024-06-19:/cubic-k8s.html</id><summary type="html">&lt;p&gt;The story of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Kubernetes"&gt;Kubernetes&lt;/a&gt;, the leading container orchestration platform, is a tale of mathematical innovation, wartime necessity, and the open-source revolution. It begins, perhaps unexpectedly, with the work of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Omar_Khayyam"&gt;Omar Khayyam&lt;/a&gt;, the 11th-century Persian polymath known for his contributions to mathematics, astronomy, and poetry.&lt;/p&gt;
&lt;p&gt;Khayyam's work on solving &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cubic_equation"&gt;cubic equations …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;The story of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Kubernetes"&gt;Kubernetes&lt;/a&gt;, the leading container orchestration platform, is a tale of mathematical innovation, wartime necessity, and the open-source revolution. It begins, perhaps unexpectedly, with the work of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Omar_Khayyam"&gt;Omar Khayyam&lt;/a&gt;, the 11th-century Persian polymath known for his contributions to mathematics, astronomy, and poetry.&lt;/p&gt;
&lt;p&gt;Khayyam's work on solving &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cubic_equation"&gt;cubic equations&lt;/a&gt; laid the foundation for the development of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Algebraic_geometry"&gt;algebraic geometry&lt;/a&gt;, which in turn led to the invention of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cartesian_coordinate_system"&gt;Cartesian coordinates&lt;/a&gt; by &lt;a class="reference external" href="https://en.wikipedia.org/wiki/René_Descartes"&gt;René Descartes&lt;/a&gt; in the 17th century. This &amp;quot;algebrization of geometry&amp;quot; allowed for the mathematical description of physical phenomena, such as planetary motion, and paved the way for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Isaac_Newton"&gt;Isaac Newton&lt;/a&gt;'s development of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Calculus"&gt;calculus&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, Newton's calculus, while groundbreaking, lacked a rigorous mathematical foundation. It took the work of 19th-century mathematicians like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Augustin-Louis_Cauchy"&gt;Augustin-Louis Cauchy&lt;/a&gt; and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Karl_Weierstrass"&gt;Karl Weierstrass&lt;/a&gt; to establish the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/(%CE%B5,_%CE%B4)-definition_of_limit"&gt;epsilon-delta definition of limits&lt;/a&gt; and place calculus on a solid footing. This development also opened up new questions about infinity, leading to &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Georg_Cantor"&gt;Georg Cantor&lt;/a&gt;'s work on &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Set_theory"&gt;set theory&lt;/a&gt; and the discovery of paradoxes, such as &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Russell%27s_paradox"&gt;Russell's paradox&lt;/a&gt; by &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bertrand_Russell"&gt;Bertrand Russell&lt;/a&gt;, that threatened the foundations of mathematics.&lt;/p&gt;
&lt;p&gt;The quest to resolve these paradoxes and establish a secure foundation for mathematics led to &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Kurt_Gödel"&gt;Kurt Gödel&lt;/a&gt;'s &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Gödel%27s_incompleteness_theorems"&gt;incompleteness theorems&lt;/a&gt;, published in 1931. Gödel's first incompleteness theorem showed that in any consistent axiomatic system that includes arithmetic, there are statements that can neither be proved nor disproved within the system. The second incompleteness theorem demonstrated that such a system cannot prove its own consistency.&lt;/p&gt;
&lt;p&gt;Crucially, Gödel's theorems relied on the concept of computability, which he used to construct a formal system representing arithmetic. However, Gödel's definition of computability was not entirely convincing, as it relied on the intuitive notion of a &amp;quot;finite procedure.&amp;quot; This left open the possibility that a non-computable axiomatization of number theory, capturing &amp;quot;all that is true about the natural numbers,&amp;quot; could exist and potentially sidestep the incompleteness theorems.&lt;/p&gt;
&lt;p&gt;It was &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Alan_Turing"&gt;Alan Turing&lt;/a&gt; who took up the challenge of formalizing the concept of computability. In his groundbreaking 1936 paper &amp;quot;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/On_Computable_Numbers,_with_an_Application_to_the_Entscheidungsproblem"&gt;On Computable Numbers, with an Application to the Entscheidungsproblem&lt;/a&gt;,&amp;quot; Turing introduced the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Turing_machine"&gt;Turing machine&lt;/a&gt;, a simple yet powerful mathematical model of computation. Turing's work not only provided a more rigorous foundation for Gödel's ideas but also proved that certain problems, such as the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Halting_problem"&gt;halting problem&lt;/a&gt;, are undecidable by Turing machines.&lt;/p&gt;
&lt;p&gt;Turing's formalization of computability had far-reaching implications beyond the foundations of mathematics. It laid the groundwork for the development of modern &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Computer_science"&gt;computer science&lt;/a&gt; and played a crucial role in the birth of the digital age. Turing's work took on new urgency with the outbreak of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/World_War_II"&gt;World War II&lt;/a&gt;, as the need to break the German &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Enigma_machine"&gt;Enigma machine&lt;/a&gt; led to the development of early computing machines based on the principles he had established.&lt;/p&gt;
&lt;p&gt;After the war, the individuals who had worked on these machines helped to establish the first computing companies, leading to the industrialization of computing and the development of programming languages and operating systems. One notable example is &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Alan_Turing"&gt;Alan Turing&lt;/a&gt; himself, who joined the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/National_Physical_Laboratory_(United_Kingdom)"&gt;National Physical Laboratory&lt;/a&gt; (NPL) in London, where he worked on the design of the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Automatic_Computing_Engine"&gt;Automatic Computing Engine&lt;/a&gt; (ACE), one of the first stored-program computers.&lt;/p&gt;
&lt;p&gt;Another key figure was &lt;a class="reference external" href="https://en.wikipedia.org/wiki/John_von_Neumann"&gt;John von Neumann&lt;/a&gt;, a mathematician and physicist who made significant contributions to the design of the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/EDVAC"&gt;EDVAC&lt;/a&gt; (Electronic Discrete Variable Automatic Computer), an early stored-program computer. Von Neumann's work on the EDVAC and his subsequent report, &amp;quot;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/First_Draft_of_a_Report_on_the_EDVAC"&gt;First Draft of a Report on the EDVAC&lt;/a&gt;,&amp;quot; laid the foundation for the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Von_Neumann_architecture"&gt;von Neumann architecture&lt;/a&gt;, which became the standard design for modern computers.&lt;/p&gt;
&lt;p&gt;In the United Kingdom, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Maurice_Wilkes"&gt;Maurice Wilkes&lt;/a&gt;, who had worked on radar systems during the war, led the development of the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/EDSAC"&gt;EDSAC&lt;/a&gt; (Electronic Delay Storage Automatic Calculator) at the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/University_of_Cambridge"&gt;University of Cambridge&lt;/a&gt;. The EDSAC, which became operational in 1949, was the first practical stored-program computer and inspired the development of similar machines in the United States and elsewhere.&lt;/p&gt;
&lt;p&gt;In the United States, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/J._Presper_Eckert"&gt;J. Presper Eckert&lt;/a&gt; and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/John_Mauchly"&gt;John Mauchly&lt;/a&gt;, who had worked on the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/ENIAC"&gt;ENIAC&lt;/a&gt; (Electronic Numerical Integrator and Computer) during the war, founded the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Eckert–Mauchly_Computer_Corporation"&gt;Eckert-Mauchly Computer Corporation&lt;/a&gt; in 1946. The company developed the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/UNIVAC_I"&gt;UNIVAC&lt;/a&gt; (Universal Automatic Computer), which became the first commercially available general-purpose computer in the United States.&lt;/p&gt;
&lt;p&gt;The UNIVAC was followed by the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/IBM_7030_Stretch"&gt;Multiprocessing Automatic Computer&lt;/a&gt; (Multivac), developed by IBM in the late 1950s. The Multivac introduced several innovative features, such as multiprogramming and memory protection, which allowed multiple users to share the same machine and provided a degree of isolation between their programs. These features would later inspire both positive and negative lessons for the creators of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Unix"&gt;Unix&lt;/a&gt;, the influential operating system developed at &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bell_Labs"&gt;Bell Labs&lt;/a&gt; in the 1970s.&lt;/p&gt;
&lt;p&gt;Due to antitrust pressures, Bell Labs made Unix available to universities, where it became a standard teaching tool. This decision led to the development of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Minix"&gt;Minix&lt;/a&gt;, a simplified Unix-like system, and eventually to the creation of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Linux"&gt;Linux&lt;/a&gt; by &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Linus_Torvalds"&gt;Linus Torvalds&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As Linux grew in popularity, thanks to its open-source nature and ability to run on cheap hardware, it caught the attention of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Google"&gt;Google&lt;/a&gt;, which was looking for an operating system to power its &amp;quot;cloud-native&amp;quot; approach to computing. Google's engineers contributed key features to the Linux kernel, such as &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cgroups"&gt;cgroups&lt;/a&gt; and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Linux_namespaces"&gt;namespaces&lt;/a&gt;, which laid the groundwork for the development of containerization technologies like &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Docker_(software)"&gt;Docker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Google, recognizing the potential of containers and the need for a robust orchestration platform, developed Kubernetes as an open-source system based on its experience with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Borg_(Google)"&gt;Borg&lt;/a&gt; and other orchestration tools. By establishing Kubernetes as the standard for container orchestration, Google aimed to reduce the barrier to entry for users looking to switch between cloud providers, challenging the dominance of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Amazon_Web_Services"&gt;Amazon Web Services&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Today, Kubernetes has become the de facto standard for managing containerized applications. As in previous improvements, this led to a new open problem: generating and deploying manifests. Tools for generating manifests range from general templating solutions like Bash variable substitution, Sed, and Jinja, through full fledged programming languages, like using Jsonnet and Python, all the way to using dedicated tools like Kustomize and Helm. Meanwhile, deploying the manifests to Kubernetes can be done through continuous integration platforms running &amp;quot;helm upgrade&amp;quot; or &amp;quot;kubectl apply&amp;quot; or using dedicated platforms like ArgoCD or FluxCD. ArgoCD or Flagger also support gradual roll-outs.&lt;/p&gt;
&lt;p&gt;From cubic equations to cloud orchestration, the story of Kubernetes is a reminder that the path of progress is rarely straightforward, but rather a winding journey through the realms of mathematics, computer science, and human ingenuity.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Safe, Simple, Automatic Releases</title><link href="https://orbifold.xyz/ssa-releases.html" rel="alternate"></link><published>2023-05-07T20:00:00-07:00</published><updated>2023-05-07T20:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2023-05-07:/ssa-releases.html</id><summary type="html">&lt;p&gt;Two words that strike fear in the heart of
every software developer:
&amp;quot;release process&amp;quot;.
Whether deploying a new version of a
billion-person social network
or a
tiny little open source library,
release processes are often
manual,
complicated,
and
easy to mess up.&lt;/p&gt;
&lt;p&gt;Much has been said on the
&amp;quot;new version …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Two words that strike fear in the heart of
every software developer:
&amp;quot;release process&amp;quot;.
Whether deploying a new version of a
billion-person social network
or a
tiny little open source library,
release processes are often
manual,
complicated,
and
easy to mess up.&lt;/p&gt;
&lt;p&gt;Much has been said on the
&amp;quot;new version of a billion-person
social network&amp;quot;
side.
But what about those small,
barely a person,
open source libraries?&lt;/p&gt;
&lt;p&gt;The focus here will be on&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Open source&lt;/li&gt;
&lt;li&gt;Python libraries&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="automatic"&gt;
&lt;h2&gt;Automatic&lt;/h2&gt;
&lt;p&gt;A new version?
What is the number?&lt;/p&gt;
&lt;p&gt;As
&lt;a class="reference external" href="https://orbifold.xyz/fifty-shades.html"&gt;already explored&lt;/a&gt;,
CalVer
works better than
SemVer.
So you already know
&lt;em&gt;something&lt;/em&gt;
about the version.&lt;/p&gt;
&lt;p&gt;With most standard
&lt;a class="reference external" href="https://calver.org/"&gt;CalVer&lt;/a&gt;
schemes,
the version starts with
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;Year&amp;gt;.&amp;lt;Month&amp;gt;&lt;/span&gt;&lt;/tt&gt;.
For example,
something released
in April 2023
would be
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;2023.04....&lt;/span&gt;&lt;/tt&gt;&lt;/p&gt;
&lt;p&gt;One option is to choose as the last digit
a running number of releases in the month.
So,
&lt;tt class="docutils literal"&gt;2023.4.3&lt;/tt&gt;
would be the third release in
April 2023.
This means that when assigning the version,
you have to look and see what previous releases,
if any,
happened this month.&lt;/p&gt;
&lt;p&gt;More stateless is to choose the day.
However,
this means it is impossible to release more
than once per day.
This can be
&lt;em&gt;literally irresponsible&lt;/em&gt;:
what happens if you need to quickly patch up
a major goof?&lt;/p&gt;
&lt;p&gt;There is another,
sneakier,
option.
It is to take advantage that Python version standard
does
&lt;em&gt;not&lt;/em&gt;
mandate only three parts to the version.&lt;/p&gt;
&lt;p&gt;For example,
&lt;tt class="docutils literal"&gt;2023.4.27.3&lt;/tt&gt;
could be the third release
in April 27th, 2023.
Having to quickly release
&lt;em&gt;two&lt;/em&gt;
versions sounds stressful,
and I'm sorry someone had to experience that.&lt;/p&gt;
&lt;p&gt;On top of all the stress,
they had to have the presence of mind to check
how many releases already happened today.
This sounds like heaping misery on top of an
already stressful situation.&lt;/p&gt;
&lt;p&gt;Can we do better?
Go completely stateless?
Yes,
we can.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://autocalver.readthedocs.io/en/latest/"&gt;Autocalver&lt;/a&gt; will assign versions to packages using
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;lt;Year&amp;gt;.&amp;lt;Month&amp;gt;.&amp;lt;Day&amp;gt;.&amp;lt;Seconds&lt;/span&gt; from beginning of day&amp;gt;&lt;/tt&gt;.
The last number is only a little bit useful,
but does serve as an increasing counter.
The timestamp is taken from the
&lt;em&gt;commit log&lt;/em&gt;,
not the
&lt;em&gt;build time&lt;/em&gt;,
so builds are reproducible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="safe"&gt;
&lt;h2&gt;Safe&lt;/h2&gt;
&lt;p&gt;&amp;quot;Three may keep a Secret, if two of them are dead.&amp;quot;,
Benjamin Franklin,
Poor Richard's Almanac, 1735.&lt;/p&gt;
&lt;p&gt;Uploading your package to PyPI safely is not trivial.
You can generate a
package-specific token,
then store it as an encrypted secret in GitHub actions,
and then unpack it
at the right stage,
avoid leaking it,
and push the package.&lt;/p&gt;
&lt;p&gt;Sounds like being half a bad line away from leaking the
API key.
Luckily,
there is a way to avoid it.
The
&lt;a class="reference external" href="https://github.com/pypa/gh-action-pypi-publish"&gt;PyPI publish GitHub Action&lt;/a&gt;
uses
OpenID Connect
to authenticate the runner
against PyPI.&lt;/p&gt;
&lt;p&gt;You will want to configure GitHub,
with the appropriate parameters,
as a
&lt;a class="reference external" href="https://docs.pypi.org/trusted-publishers/"&gt;trusted publisher&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="simple"&gt;
&lt;h2&gt;Simple&lt;/h2&gt;
&lt;p&gt;When do you release?
Are you checking releases manually?
Why?&lt;/p&gt;
&lt;p&gt;CI should make sure that,
pre-merge,
branches pass all automated checks.
&amp;quot;Keep the main branch in a releasable state&amp;quot;,
as the kids used to say.&lt;/p&gt;
&lt;p&gt;Wait.
If main branch is releasable,
why not...release it?&lt;/p&gt;
&lt;pre class="code yaml literal-block"&gt;
&lt;span class="nt"&gt;on&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
  &lt;/span&gt;&lt;span class="nt"&gt;push&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
    &lt;/span&gt;&lt;span class="nt"&gt;branches&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
      &lt;/span&gt;&lt;span class="p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l-Scalar-Plain"&gt;trunk&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This will configure a GitHub action that releases on every push to trunk.
(Trunk is the
&amp;quot;main branch&amp;quot;
of a tree,
though yours might be named differently.)&lt;/p&gt;
&lt;p&gt;See the entire action in
&lt;a class="reference external" href="https://github.com/moshez/autocalver/blob/63d509ecff2173aff07b4e2897e0073cb5a05c0a/.github/workflows/release.yml"&gt;autocalver's workflows&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Configuring your project to use
&lt;tt class="docutils literal"&gt;autocalver&lt;/tt&gt;
gives you automatic version numbers.
Using PyPI/GitHub trusted publishing model
eliminates complicated secret sharing schemes.
GitHub upload actions on merge to main branch
removes the need to make a decision about
when to release.&lt;/p&gt;
&lt;p&gt;Putting all of them together results in
releases taking literally 0 work.
More time for fun!&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>The "Dynamic" Properties in PyProject</title><link href="https://orbifold.xyz/dynamic-pyproject.html" rel="alternate"></link><published>2022-12-30T20:00:00-08:00</published><updated>2022-12-30T20:00:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2022-12-30:/dynamic-pyproject.html</id><summary type="html">&lt;p&gt;When writing a
&lt;code&gt;pyproject.toml&lt;/code&gt;
file,
the
&lt;code&gt;project&lt;/code&gt;
section is optional.
However,
if it does exist,
two of its properties are
&lt;em&gt;required&lt;/em&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If these two properties are not there,
the section will be ignored.&lt;/p&gt;
&lt;p&gt;This is a lie.
But it is not a big lie:
it is
&lt;em&gt;almost …&lt;/em&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;When writing a
&lt;code&gt;pyproject.toml&lt;/code&gt;
file,
the
&lt;code&gt;project&lt;/code&gt;
section is optional.
However,
if it does exist,
two of its properties are
&lt;em&gt;required&lt;/em&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;code&gt;name&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;version&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If these two properties are not there,
the section will be ignored.&lt;/p&gt;
&lt;p&gt;This is a lie.
But it is not a big lie:
it is
&lt;em&gt;almost&lt;/em&gt;
true.&lt;/p&gt;
&lt;p&gt;In general,
if either of these two properties are not there,
the section will be ignored.
&lt;em&gt;However&lt;/em&gt;,
there is a way to indicate that either,
or both,
of these properties will be filled in by the
build system later on.&lt;/p&gt;
&lt;p&gt;This is done with
&lt;code&gt;dynamic&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[project]&lt;/span&gt;
&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my-package&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;dynamic&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is the most common setting.
However,
it is possible to set
&lt;code&gt;dynamic&lt;/code&gt;
to
&lt;code&gt;[&amp;quot;name&amp;quot;, &amp;quot;version&amp;quot;]&lt;/code&gt;
and avoid both parameters.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>On The Go</title><link href="https://orbifold.xyz/on-the-go.html" rel="alternate"></link><published>2022-08-14T14:00:00-07:00</published><updated>2022-08-14T14:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2022-08-14:/on-the-go.html</id><summary type="html">&lt;p&gt;Now that travel is more realistic,
I have started to optimize how well I can work on the go.
I want to be able to carry as few things as possible,
and have the best set-up possible.&lt;/p&gt;
&lt;div class="section" id="charging"&gt;
&lt;h2&gt;Charging&lt;/h2&gt;
&lt;img alt="Power Bank charging" src="bank.jpg" style="width: 400px;" /&gt;
&lt;p&gt;The
&amp;quot;center&amp;quot;
of the mobile set-up is my
&lt;a class="reference external" href="https://www.anker.com/products/a1651"&gt;Anker Power Bank&lt;/a&gt;.
It …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Now that travel is more realistic,
I have started to optimize how well I can work on the go.
I want to be able to carry as few things as possible,
and have the best set-up possible.&lt;/p&gt;
&lt;div class="section" id="charging"&gt;
&lt;h2&gt;Charging&lt;/h2&gt;
&lt;img alt="Power Bank charging" src="bank.jpg" style="width: 400px;" /&gt;
&lt;p&gt;The
&amp;quot;center&amp;quot;
of the mobile set-up is my
&lt;a class="reference external" href="https://www.anker.com/products/a1651"&gt;Anker Power Bank&lt;/a&gt;.
It serves two purposes:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It is my wall-plug charger.&lt;/li&gt;
&lt;li&gt;It is my &amp;quot;mobile power&amp;quot;:
I can carry around 10k mAH
of energy.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The charger has two
USB-C
slots
and one
USB-A
slot.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="compute"&gt;
&lt;h2&gt;Compute&lt;/h2&gt;
&lt;img alt="M1 MacBook Air with stickers" src="m1-air.jpg" style="width: 400px;" /&gt;
&lt;p&gt;For
&amp;quot;compute&amp;quot;,
I have three
devices:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;M1 MacBook Air&lt;/li&gt;
&lt;li&gt;Galaxy Samsung S9+
(I know it's a bit old)&lt;/li&gt;
&lt;li&gt;FitBit Charge 4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The S9 is old enough that
there is no case with a
MagSafe
compatible back.
Instead,
I got a
MagSafe
sticker
that goes on the back of the case.&lt;/p&gt;
&lt;p&gt;This allowed me to get a
MagSafe Pop-Socket base.
Sticking a
Pop-Socket
on top of it
lets me hold the phone securely,
and avoids it falling on my face at night.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ear-buds"&gt;
&lt;h2&gt;Ear buds&lt;/h2&gt;
&lt;p&gt;For earbuds,
I have the
&lt;a class="reference external" href="https://www.tozostore.com/buygoods/63"&gt;TOZO T10&lt;/a&gt;.
They come in multiple colors!&lt;/p&gt;
&lt;p&gt;The colors are not just an
aesthetic choice.
They also serve a purpose:
I have a black one and a khaki one.&lt;/p&gt;
&lt;p&gt;The black one is paired to my phone.
The khaki one is paired to my laptop.&lt;/p&gt;
&lt;p&gt;I can charge the
TOZO
cases with either
the
USB-C
cable
or the
PowerWave
charger,
whichever is free.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="charging-1"&gt;
&lt;h2&gt;Charging&lt;/h2&gt;
&lt;img alt="Phone charging with a wireless MagSafe charger" src="charging.jpg" style="width: 400px;" /&gt;
&lt;p&gt;In order to charge the
M1
I have a
USB-C &amp;quot;outtie&amp;quot;/USB-C &amp;quot;outtie&amp;quot;
3 foot wire.
It's a bit short,
but this also means it takes less space.
The
FitBit Charge
comes with its own
USB-A
custom cable.&lt;/p&gt;
&lt;p&gt;For wireless charging,
I have the
&lt;a class="reference external" href="https://www.amazon.com/gp/product/B095NQTNLZ/"&gt;Anker PowerWave&lt;/a&gt;.
It's
MagSafe
compatible,
and can connect to any
USB-C-compatible
outlet.&lt;/p&gt;
&lt;p&gt;The phone is only charged by
the wireless charging.
The
USB-C
input is wonky,
and can be incompatible with humid climates.&lt;/p&gt;
&lt;p&gt;I connected a
Pop Socket
to the back of the
PowerWave charger.
This means that while the phone is charging,
I can still hold it securely.&lt;/p&gt;
&lt;p&gt;Together,
they give me a
&amp;quot;wireless charging&amp;quot;
battery.
The
PowerWave connects to the phone,
and the
Power Bank
has plenty of energy to last for a while
while not connecting to anything.&lt;/p&gt;
&lt;p&gt;I cannot charge
&lt;em&gt;all&lt;/em&gt;
devices at once.
But I can charge
all
devices,
and
(almost)
any three at once.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="hub"&gt;
&lt;h2&gt;Hub&lt;/h2&gt;
&lt;img alt="USB-C hub" src="hub.jpg" style="width: 400px;" /&gt;
&lt;p&gt;The last device I have is an older version of the
&lt;a class="reference external" href="https://www.anker.com/products/a8338?variant=37438363205782"&gt;Anker 5-in-1 hub&lt;/a&gt;.
This allows connecting
USB Drives
and
HDMI connectors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="case"&gt;
&lt;h2&gt;Case&lt;/h2&gt;
&lt;img alt="Power Bank charging" src="bag.jpg" style="width: 400px;" /&gt;
&lt;p&gt;All of these things are carried in a
&lt;a class="reference external" href="https://us.targus.com/products/vertical-12-inch-laptop-slipcase-sleeve-with-hideaway-handles-tss912"&gt;Targus TSS912&lt;/a&gt;
case.
The laptop goes inside the sleeve,
while the other things all go in the
side pocket.&lt;/p&gt;
&lt;p&gt;The
side pocket
is small,
but can fit all of the things above.
Because of its size,
it does get crowded.
In order to find things easily,
I keep all of these things
in separate
sub-pockets.&lt;/p&gt;
&lt;p&gt;I keep the
Power Bank,
the
MagSafe charger,
and the
USB-C/USB-C
cable
in the little pouch that comes with the
Power Bank.&lt;/p&gt;
&lt;p&gt;The
hub
and
FitBit
charging cable
go into a ziplock bag.
Those things see less use.&lt;/p&gt;
&lt;p&gt;The earbud cases go into the pocket as-is.
They are easy enough to dig out by rooting around.&lt;/p&gt;
&lt;p&gt;I wanted a
messenger-style
case
so that I can carry it
&lt;em&gt;while&lt;/em&gt;
I have a
backpack
on.
Whether I am carrying my work laptop
(in the work backpack)
or a travel backpack,
this is a distinct advantage.&lt;/p&gt;
&lt;p&gt;The case is small enough to be slipped inside another
backpack.
If I am carrying a backpack,
and there's enough room,
I can consolidate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I chose this set up for options.&lt;/p&gt;
&lt;p&gt;For example,
if my phone is low on battery,
I can connect the
PowerWave
to the bank,
leave the bank in the side-bag's pocket,
and
and keep using the phone while it is charging,
holding it with the
PowerWave's
pop-sockets.&lt;/p&gt;
&lt;p&gt;If I am listening to a podcast while walking around,
and notice that the ear bud's case is low on battery,
I can connect the case to the bank
while they are both in the
side-bag's
pocket.&lt;/p&gt;
&lt;p&gt;When sitting down at a coffee shop
or an office,
I can connect the bank to the wall socket
and charge any of my devices while sitting there.
As a perk
the bank is charging
while I'm sitting down.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Reading the Documentation for Popular Products</title><link href="https://orbifold.xyz/documentation-for-popular-products.html" rel="alternate"></link><published>2022-02-20T10:00:00-08:00</published><updated>2022-02-20T10:00:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2022-02-20:/documentation-for-popular-products.html</id><summary type="html">&lt;p&gt;Popular products often have a
&amp;quot;Getting Started&amp;quot;
tutorial
in order to guide you in using them
for the first timees.
Those guides are easy to follow,
pleasant to use,
and lead you do make bad design choices.&lt;/p&gt;
&lt;p&gt;Follow the
&amp;quot;Getting Started&amp;quot;
guide to get a feel for the product.
Then …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Popular products often have a
&amp;quot;Getting Started&amp;quot;
tutorial
in order to guide you in using them
for the first timees.
Those guides are easy to follow,
pleasant to use,
and lead you do make bad design choices.&lt;/p&gt;
&lt;p&gt;Follow the
&amp;quot;Getting Started&amp;quot;
guide to get a feel for the product.
Then,
skip to the end:
in the
&amp;quot;Advanced&amp;quot;
section,
you will find how the people who
really use it in production
use it.&lt;/p&gt;
&lt;div class="section" id="the-physics-of-getting-started"&gt;
&lt;h2&gt;The Physics of &amp;quot;Getting Started&amp;quot;&lt;/h2&gt;
&lt;p&gt;What do
&lt;cite&gt;flask.Blueprint&lt;/cite&gt;,
&lt;cite&gt;requests.Session&lt;/cite&gt;,
and
&lt;cite&gt;ansible.plugins&lt;/cite&gt;
have in common?&lt;/p&gt;
&lt;p&gt;They all share two curious properties:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;In the official documentation,
they are relegated to the &amp;quot;Advanced&amp;quot; section.&lt;/li&gt;
&lt;li&gt;Any production use case of the relevant technologies
(&lt;cite&gt;flask&lt;/cite&gt;, &lt;cite&gt;requests&lt;/cite&gt;, and &lt;cite&gt;ansible&lt;/cite&gt;)
would use them.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these technologies are popular for their niche.
All of them have friendly
&amp;quot;Getting started&amp;quot;
guides.&lt;/p&gt;
&lt;p&gt;Those guides do not cover the relevant piece,
the piece that makes this technology usable
in most realistic cases.
Most people who use these technology start with
&amp;quot;Getting Started&amp;quot;,
and follow the path it suggests.
The path it suggests eventually breaks down.&lt;/p&gt;
&lt;p&gt;When this path breaks down,
often people will think to themselves
&amp;quot;I don't need the
&lt;em&gt;advanced&lt;/em&gt;
stuff.
My use case is pretty vanilla.&amp;quot;
They will shim and work around the limitations,
until either giving up on the whole enterprise,
or asking an expert.&lt;/p&gt;
&lt;p&gt;At the point where they asked an expert,
the expert will be exasperated.
&amp;quot;Just use
&lt;cite&gt;flask.Blueprint&lt;/cite&gt;/&lt;cite&gt;requests.Session&lt;/cite&gt;/&lt;cite&gt;ansible.plugins&lt;/cite&gt;
for anything beyond a toy example.
This is the way to
&lt;em&gt;really&lt;/em&gt;
use the technology.&amp;quot;&lt;/p&gt;
&lt;p&gt;The expert is exasperated because this is the fifth
(or the hundred and fifth!)
time this has come.
Someone is about to give up in disgust,
only to learn that the solution was simple all along:
the first three paragraphs in the
&amp;quot;Advanced&amp;quot;
section
cover how to do this.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-does-this-happen"&gt;
&lt;h2&gt;Why does this happen?&lt;/h2&gt;
&lt;p&gt;I chose these three examples because I know them well.
I can give similar examples from almost every popular technology:
following the
&amp;quot;Quickstart&amp;quot;
guide leads to a huge mess,
while a fairly simple way to do it in a better way is presented
in a section titled
&amp;quot;Advanced&amp;quot;
or
&amp;quot;Developer&amp;quot;
or something similar.&lt;/p&gt;
&lt;p&gt;These things happen so often that this cannot be a coincidence.
Just like the common shape of
whales
and
fish,
despite separate evolutionary origins,
the explanation is the shape of the dynamic systems at play.&lt;/p&gt;
&lt;p&gt;Whales and fish look similar because they both have to solve a similar problem:
moving through water efficiently.
Having an appropriate aquadynamic shape is the right solution.&lt;/p&gt;
&lt;p&gt;Technologies,
open source or commercial,
live and die by their adoption.
A technology that is hard to adopt is a useless relic.&lt;/p&gt;
&lt;p&gt;There are many things that can impact the ease of adoption of a technology.
One of the easiest
&lt;em&gt;levers&lt;/em&gt;
to pull,
by the core development team,
is the
&amp;quot;Quickstart&amp;quot;
guide.
This guide tries to get a toy example up and running
as fast as possible.&lt;/p&gt;
&lt;p&gt;At this point,
any extra complexity is a big turn off.
Any extra step will have a large fraction of the users dropping off.
This exponential decay means that to survive,
the Quickstart guide
needs to be heavily optimized.&lt;/p&gt;
&lt;p&gt;It does not matter whether it's
&amp;quot;design&amp;quot;
(developers explicitly optimizing the guide)
or
&amp;quot;evolution&amp;quot;
(technologies which don't do that
do not end up surviving long enough to cause problems).
It is probably a combination of both factors.&lt;/p&gt;
&lt;p&gt;As can be predicted from general optimization problems,
you can optimize more when you drop constraints.
Removing the constraint
&amp;quot;must lead to a proper production solution&amp;quot;
from the requirements for the Quickstart guide
leads to a guide more optimized to win hearts and minds.&lt;/p&gt;
&lt;p&gt;At the point the project is popular,
this will end up being the shape of the
documentation:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A Quickstart guide, generating a toy example with a serious scaling flaw.&lt;/li&gt;
&lt;li&gt;An &amp;quot;Advanced&amp;quot; section with the explanation of how to
&lt;em&gt;really&lt;/em&gt;
use the technology.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what-can-you-do"&gt;
&lt;h2&gt;What can you do?&lt;/h2&gt;
&lt;p&gt;Being upset with Quickstart guides,
as I have for many years,
is like being upset with gravity,
which I also have for many years.
Those phenomena are annyoing,
but they are the results of immutable laws of nature.&lt;/p&gt;
&lt;p&gt;In order to fly,
or use technologies,
you need to first
&lt;em&gt;understand the physics involved&lt;/em&gt;
and then
&lt;em&gt;figure out how to use them to accomplish your goals&lt;/em&gt;.
Now that the shape is understandable,
how can it make adopting technologies easier?&lt;/p&gt;
&lt;p&gt;The quickstart guide is still useful.
Follow it.
Generate a toy example.
Play around with it.
Get a feel for the technology.
See if it's at all a good fit.&lt;/p&gt;
&lt;p&gt;Put all of these attempts in a source-controlled repository.
Now move all of the code written so far into a subdirectory,
&lt;cite&gt;experiments&lt;/cite&gt;.
Go to the advanced section,
and figure out what are the 1-3 things that
you need to do in order to properly use the technology.
Alternatively,
consult someone with experience.&lt;/p&gt;
&lt;p&gt;Use the notes from the experiments,
plus the understanding from the
&amp;quot;advanced&amp;quot;
section,
to build your first
&amp;quot;real&amp;quot;
proof of concept.
From this point on,
&lt;em&gt;this&lt;/em&gt;
is the
&amp;quot;toy example&amp;quot;
you iterate on.&lt;/p&gt;
&lt;p&gt;The
&lt;cite&gt;experiments&lt;/cite&gt;
serve as research notes
for how to do the specific things you needed.
Never use the experiments directly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Good technologies will gently nudge you to
using them badly.
This is not good or bad:
this is a law of nature.
Understand it,
and start using platforms better!&lt;/p&gt;
&lt;p&gt;Thanks to
&lt;a class="reference external" href="https://www.linkedin.com/in/alexscammon/"&gt;Alex Scammon&lt;/a&gt;
for his feedback on an earlier draft of this post.
Any mistakes that remain are my responsibility.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Three Problems with a Tool</title><link href="https://orbifold.xyz/three-problems.html" rel="alternate"></link><published>2021-12-24T17:00:00-08:00</published><updated>2021-12-24T17:00:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2021-12-24:/three-problems.html</id><summary type="html">&lt;p&gt;One of my favorite Podcasts,
&lt;a class="reference external" href="https://www.pythonpodcast.com/"&gt;Podcast.__init__&lt;/a&gt;,
always makes sure to ask one question
towards the end of every episode:
when should you
&lt;em&gt;not&lt;/em&gt;
use the tool or technique introduced
in this episode?
This is a great question.
When people have a poor answer
I assume that the tool is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of my favorite Podcasts,
&lt;a class="reference external" href="https://www.pythonpodcast.com/"&gt;Podcast.__init__&lt;/a&gt;,
always makes sure to ask one question
towards the end of every episode:
when should you
&lt;em&gt;not&lt;/em&gt;
use the tool or technique introduced
in this episode?
This is a great question.
When people have a poor answer
I assume that the tool is not good,
or at least that it is not mature enough.&lt;/p&gt;
&lt;p&gt;If you use a tool for long enough,
and enough circumstances,
you will have some cases where it is a poor fit.
Not just a poor fit:
a painful mistake that you will regret.&lt;/p&gt;
&lt;p&gt;This does
&lt;em&gt;not&lt;/em&gt;
mean the tool is bad.
This is true for the some of the best tools I have used,
and some of the ones I have the most experience with.&lt;/p&gt;
&lt;p&gt;If a tool is not fundamentally useful,
it will not get to the point where it is causing problems.
It will be dropped long before it is used in a place
or in a way
where it is a mistake that makes people regret.&lt;/p&gt;
&lt;p&gt;A good rule of thumb for when you really understand how a tool
works
is that you can point out at least three
&lt;em&gt;big&lt;/em&gt;
problems with it.
Try it now with some of your favorite tools and tecniques.
List three big problems with them.&lt;/p&gt;
&lt;p&gt;For example,
it is no secret that I like,
and have plenty of experience in,
Python.
There are more than three problems,
and sorting by how big they are
is subjective.&lt;/p&gt;
&lt;p&gt;Regardless,
here are three big problems in Python:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Packaging: It is hard to produce a standalone package for a Python applications.
All of the ways to do it end up failing in one of several ways.&lt;/li&gt;
&lt;li&gt;Fractured tooling: Properly developing in Python requires understanding
&lt;code&gt;setuptools&lt;/code&gt;, &lt;code&gt;venv&lt;/code&gt;, &lt;code&gt;pip&lt;/code&gt;, and
&lt;code&gt;pip-tools&lt;/code&gt;.
These are all separate projects,
the documentation is in different places,
and understanding how they interact takes a while to master.&lt;/li&gt;
&lt;li&gt;Crufty standard library: The standard library is full of essential things,
like &lt;code&gt;sys&lt;/code&gt;,
useful things,
like &lt;code&gt;heapq&lt;/code&gt;,
useless things,
like &lt;code&gt;urllib.request&lt;/code&gt;,
and poor substitues for third-party packages,
like &lt;code&gt;dataclasses&lt;/code&gt;.
Knowing which is which is mostly folklore,&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of this is not to say I think Python is bad:
I use it every day!
It is to show how harsh you should be when talking about the problems
with something you like.
Until you can do that,
avoid using the tool anywhere important,
unless someone else,
who can articulate the tool's problems,
is guiding the project.&lt;/p&gt;
&lt;p&gt;Thanks to
&lt;a class="reference external" href="https://twitter.com/bennyvasquez"&gt;benny Vasquez&lt;/a&gt;
and
&lt;a class="reference external" href="https://alexscammon.com/"&gt;Alex Scammon&lt;/a&gt;
for their useful comments on an earlier draft of this post.
Any mistakes that remain are my responsibility alone.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Better Outage Retrospectives</title><link href="https://orbifold.xyz/better-outage-retrospectives.html" rel="alternate"></link><published>2021-08-15T21:00:00-07:00</published><updated>2021-08-15T21:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2021-08-15:/better-outage-retrospectives.html</id><summary type="html">&lt;p&gt;Originally published on
&lt;a class="reference external" href="https://www.redhat.com/architect/better-outage-retrospectives"&gt;Enable Architect&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Modern computer systems supply business-critical services everywhere
-- from Amazon providing shopping services to
Healthcare.gov
providing enrollment in health insurance plan.
We all rely on such systems.
But, unfortunately, these systems are complex and can fail in surprising ways.&lt;/p&gt;
&lt;p&gt;By now,
it is a well-understood …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Originally published on
&lt;a class="reference external" href="https://www.redhat.com/architect/better-outage-retrospectives"&gt;Enable Architect&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Modern computer systems supply business-critical services everywhere
-- from Amazon providing shopping services to
Healthcare.gov
providing enrollment in health insurance plan.
We all rely on such systems.
But, unfortunately, these systems are complex and can fail in surprising ways.&lt;/p&gt;
&lt;p&gt;By now,
it is a well-understood best practice that when failure happens,
it's an opportunity to learn and improve.
Thus,
blameless retrospectives
(sometimes called &amp;quot;post-mortems&amp;quot;)
are by now a development-cycle staple.&lt;/p&gt;
&lt;p&gt;However, the processes by which organizations conduct the failure analysis,
and make improvement recommendations,
are still based on shaky foundations.
It is time to do better.&lt;/p&gt;
&lt;div class="section" id="root-cause-analysis"&gt;
&lt;h2&gt;Root cause analysis&lt;/h2&gt;
&lt;p&gt;It is possible to do Root Cause Analysis (RCA) as originally defined.
This means looking for the initial action that started the problem
(i.e. the &amp;quot;root&amp;quot;)
and then figuring out how to prevent it in the future.
However, in recent years this method is seen to be of limited value.
The root cause is hard to define in increasingly complex systems and
not necessarily the right thing to change.&lt;/p&gt;
&lt;p&gt;Most organizations that conduct RCA do not follow the original definition.
Instead,
they do ad-hoc modifications.
They look for all contributing causes,
starting with the root cause,
and then offer mitigation.&lt;/p&gt;
&lt;p&gt;In acknowledgment of the limitations of RCA,
there is a new emphasis on service
&lt;em&gt;reliability&lt;/em&gt;.
Reliability often focuses on the need to have services resilient to upstream failure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="causal-analysis"&gt;
&lt;h2&gt;Causal analysis&lt;/h2&gt;
&lt;p&gt;Acknowledging the complexity of modern systems and formalizing it,
the Causal Analysis based on System Theory (CAST) process does precisely that:
a way to improve service reliability.
Instead of ad-hoc modifications to a fundamentally broken analysis process,
&lt;a class="reference external" href="http://sunnyday.mit.edu/CAST-Handbook.pdf"&gt;CAST&lt;/a&gt;
offers an alternative
from-the-ground-up analysis method based on
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Nancy_Leveson"&gt;Professor Levenson&lt;/a&gt;'s
research into system safety theory.&lt;/p&gt;
&lt;p&gt;CAST is a modern approach to analyze failure,
as described in Professor Levenson's book.
As written,
it assumes a physical system.
However,
this process is adaptable to investigating software,
and especially for service outages.
It is an alternative to the so-called RCA.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="performing-cast"&gt;
&lt;h2&gt;Performing CAST&lt;/h2&gt;
&lt;p&gt;CAST contains five steps.
Although it sometimes makes sense to go back to a previous stage as you uncover more information,
in general,
the analysis should follow the steps in order:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Assemble basic information&lt;/li&gt;
&lt;li&gt;Model safety control structure&lt;/li&gt;
&lt;li&gt;Analyze each component in loss&lt;/li&gt;
&lt;li&gt;Identify control structure flaws&lt;/li&gt;
&lt;li&gt;Create improvement program&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="assemble-basic-information"&gt;
&lt;h3&gt;Assemble basic information&lt;/h3&gt;
&lt;p&gt;When assembling basic information,
the first part is to define the system involved.
This indicates what the boundaries of the analysis are.
This part is essential:
it should be clear what part is the system and the environment.&lt;/p&gt;
&lt;p&gt;Next,
describe the loss:
the undesirable behavior.
Explain the hazard
(the original change)
that led to it&lt;/p&gt;
&lt;p&gt;From the hazard,
identify the system-level safety constraints required to prevent it.
Those are the system safety requirements and constraints.&lt;/p&gt;
&lt;p&gt;The next part is to construct a timeline.
Describe what happened.
Avoid any conclusions,
and especially avoid assigning blame.
This part will usually include open questions,
especially about why things happened.&lt;/p&gt;
&lt;p&gt;Analyze the loss in terms of the system requirements and controls in place.
This includes any mechanisms that were put in place to prevent such problems.
Indicate what interactions happened between different parts that led to the problem.
Note any contextual factors that influenced the events.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="model-safety-control-structure"&gt;
&lt;h3&gt;Model safety control structure&lt;/h3&gt;
&lt;p&gt;The model of underlying causality CAST treats safety as a control problem,
not a failure problem.
Thus,
the cause is always that the control structure and controls constructed to prevent the hazard.&lt;/p&gt;
&lt;p&gt;If a control structure for the system does not already exist,
it might be helpful to start with an abstract high-level control structure.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="analyze-each-component-in-loss"&gt;
&lt;h3&gt;Analyze each component in loss&lt;/h3&gt;
&lt;p&gt;Examine the components of the control structure to determine why they
were not effective in preventing the loss.&lt;/p&gt;
&lt;p&gt;Start at the bottom of the control structure.
Explain each component's role in the accident and analyze its behavior
and why it did what it did.
As context,
add the details from the original design for why these controls were deemed adequate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="identify-control-structure-flaws"&gt;
&lt;h3&gt;Identify control structure flaws&lt;/h3&gt;
&lt;p&gt;Identify general systemic factors that contributed to the loss.
These factors cut across the different control structure components.
Thus,
it is important to add this step explicitly to account for such cross-cutting concerns.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-improvement-program"&gt;
&lt;h3&gt;Create improvement program&lt;/h3&gt;
&lt;p&gt;Create recommendations for changes to the control structure to prevent a similar loss in the future.
These might include a continuous improvement program as part of an overall risk management program.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;The CAST process is a modern theory-inspired method that is tested by practice,
improving safety and reliability.
Professor Levenson has many of her books,
including the CAST handbook, available from the MIT website,
where you can learn more about the background,
the theory,
and the practice.&lt;/p&gt;
&lt;p&gt;Now go forth,
and conduct better retrospectives!&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Empathy vs. sympathy for Site Reliability Engineers (SRE)</title><link href="https://orbifold.xyz/devops-sympathy.html" rel="alternate"></link><published>2021-07-15T19:00:00-07:00</published><updated>2021-07-15T19:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2021-07-15:/devops-sympathy.html</id><summary type="html">&lt;p&gt;This article was originally published on
&lt;a class="reference external" href="https://www.redhat.com/architect/sre-empathy-vs-sympathy"&gt;Enable Architect&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many people have had the insight that DevOps is about people.
Often, they will summarize it as
&amp;quot;DevOps is about empathy&amp;quot;.
I have found,
however,
that idealizing empathy is just as bad as thinking that DevOps
is about a single technology.&lt;/p&gt;
&lt;p&gt;I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This article was originally published on
&lt;a class="reference external" href="https://www.redhat.com/architect/sre-empathy-vs-sympathy"&gt;Enable Architect&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Many people have had the insight that DevOps is about people.
Often, they will summarize it as
&amp;quot;DevOps is about empathy&amp;quot;.
I have found,
however,
that idealizing empathy is just as bad as thinking that DevOps
is about a single technology.&lt;/p&gt;
&lt;p&gt;I remember when I first heard &lt;a class="reference external" href="https://psychology.yale.edu/people/paul-bloom"&gt;Paul Bloom&lt;/a&gt; talking on
&lt;a class="reference external" href="http://rationallyspeakingpodcast.org/142-the-case-against-empathy-paul-bloom/"&gt;Rationally Speaking&lt;/a&gt;.
Julia Galef introduced him by saying:&lt;/p&gt;
&lt;blockquote&gt;
&amp;quot;I'm writing a book on empathy,&amp;quot;
psychologist Paul Bloom tells people.
They respond warmly,
until he follows up with,
&amp;quot;I'm against it.&amp;quot;&lt;/blockquote&gt;
&lt;div class="section" id="sre-are-different-by-design"&gt;
&lt;h2&gt;SRE are different by design&lt;/h2&gt;
&lt;p&gt;Many of the people who are titled,
at times,
Site Reliability Engineers (SRE)
--
or DevOps Engineers,
or Production Engineers,
or Platform Engineers,
or other terms that indicate the same responsibilities
connected to DevOps practices
--
are fundamentally and intentionally different than many of the people
they have to work with.
In order to be good at this job,
you need a reasonably solid ability to program and a
reasonably solid ability to handle operational issues.&lt;/p&gt;
&lt;p&gt;This is an uncommon skill set.
It often is acquired by starting as a software developer
or an IT administrator and slowly gaining complementary skills.
This means there are few truly &amp;quot;junior&amp;quot; people in that role.
Gaining the necessary skills and experience takes time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sympathy-vs-empathy"&gt;
&lt;h2&gt;Sympathy vs. empathy&lt;/h2&gt;
&lt;p&gt;Being more senior than someone,
and having skills they lack,
makes it difficult to empathize.
It is difficult and inaccurate to guess what someone might be
struggling with or what they need help with.
Site Reliability Engineers who try to use empathy imagine
themselves in the other person's role and will
build tools and processes that would be good for themselves
if they were in that role.&lt;/p&gt;
&lt;p&gt;In contrast,
sympathy begins with trusting that people
have unique insight into their own lived experiences.
A Site Reliability Engineer focusing on sympathy will
start by talking to people,
understanding their problems,
and believing them when describing pain points.
A Site Reliability Engineers focusing on sympathy will
involve others in the decision process to solve those problems.
A Site Reliability Engineer focusing on sympathy will
release partial solutions to focus groups to see
how they fail when used by people different from them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="it-starts-with-caring"&gt;
&lt;h2&gt;It starts with caring&lt;/h2&gt;
&lt;p&gt;Sympathy.
Compassion.
Trust.
These are the main tools a Site Reliability Engineer
uses daily to make DevOps possible.
Developing those is easy,
as long as you
&lt;em&gt;care about people&lt;/em&gt;.
&lt;em&gt;Caring about people&lt;/em&gt; is the only thing that can't be taught.&lt;/p&gt;
&lt;p&gt;I cannot teach anyone to care about people.
If you do care about people,
you already have the most important skill needed to succeed as an SRE.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.sefaria.org/Shabbat.31a.6?lang=bi&amp;amp;with=all&amp;amp;lang2=en"&gt;The rest is commentary, go and learn&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Minimal packing list</title><link href="https://orbifold.xyz/minimal-packing.html" rel="alternate"></link><published>2021-07-07T19:00:00-07:00</published><updated>2021-07-07T19:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2021-07-07:/minimal-packing.html</id><summary type="html">&lt;p&gt;With in-person conferences starting to open up,
I need to clear the dust off of some skills that have
not been used in a while.
One of those is how to pack for travel.&lt;/p&gt;
&lt;p&gt;This list works for me.
It will probably not work for you as-is.
Among other things …&lt;/p&gt;</summary><content type="html">&lt;p&gt;With in-person conferences starting to open up,
I need to clear the dust off of some skills that have
not been used in a while.
One of those is how to pack for travel.&lt;/p&gt;
&lt;p&gt;This list works for me.
It will probably not work for you as-is.
Among other things,
I have very specific guidelines.&lt;/p&gt;
&lt;p&gt;I don't count things I usually carry in my pockets:
phone, wallet, house keys.
This is because I do not need to pack them.&lt;/p&gt;
&lt;p&gt;I also do not like checking in luggage,
so I have optimized the list for avoiding that.
Among other things, I intentionally minimized the list.&lt;/p&gt;
&lt;p&gt;My goal is to be able to pack,
from scratch,
in under 15 minutes.
I pack things into my travel backpack,
but I also pack a small walking-around backpack.
This way,
the big backpack can stay in the hotel room,
and I can work around with a bare-bones backpack
(just a laptop and maybe a battery).&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Clothes: T-shirts, Socks, Underwear, Pants&lt;/li&gt;
&lt;li&gt;Toiletries: Deodorant, Floss, Tooth brush, Tooth paste, Hand sanitizer&lt;/li&gt;
&lt;li&gt;Electronics: Chargers, Batteries, Cables, Laptop, Ear buds&lt;/li&gt;
&lt;li&gt;Misc: Pens, Small notebook, Spare glasses, Face masks, Medication, Spare small backpack&lt;/li&gt;
&lt;li&gt;Maybe: Dress shirts, Swimming trunks, Passport, Power adapter, Water bottle&lt;/li&gt;
&lt;/ul&gt;
</content><category term="misc"></category></entry><entry><title>Post that PR</title><link href="https://orbifold.xyz/post-that-pr.html" rel="alternate"></link><published>2021-06-16T18:00:00-07:00</published><updated>2021-06-16T18:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2021-06-16:/post-that-pr.html</id><summary type="html">&lt;p&gt;Sometimes you will be working on hairy and complicated feature
in a shared repository.
Maybe it's for work.
Maybe it's an open source project.&lt;/p&gt;
&lt;p&gt;As a responsible person,
you are working on a branch.
The usual way of working involves a lot of
&amp;quot;intermediate&amp;quot;
check-ins.
Those serve,
if nothing else …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sometimes you will be working on hairy and complicated feature
in a shared repository.
Maybe it's for work.
Maybe it's an open source project.&lt;/p&gt;
&lt;p&gt;As a responsible person,
you are working on a branch.
The usual way of working involves a lot of
&amp;quot;intermediate&amp;quot;
check-ins.
Those serve,
if nothing else,
as a form of backup.&lt;/p&gt;
&lt;p&gt;If you really enjoy backing up your code,
you are probably already pushing to a remote branch
on your source control server.&lt;/p&gt;
&lt;p&gt;This is a great workflow.
Responsible,
safe,
and resistant to local failures.&lt;/p&gt;
&lt;p&gt;What could be better?&lt;/p&gt;
&lt;p&gt;Well,
it is often the case that people hesitate to
open the pull request
(or merge request, as known in some systems)
before they are
&amp;quot;ready&amp;quot;.
Time to post the PR,
already!&lt;/p&gt;
&lt;p&gt;If the PR is not ready,
you can mark it as not ready for merging.
Most modern systems allow an explicit flag
to make pull requests
as &amp;quot;draft&amp;quot;.
If nothing else,
you can use a dedicated label
like
&amp;quot;do not merge&amp;quot;.&lt;/p&gt;
&lt;p&gt;There are a few benefits.
One is that when your Continuous Integration system runs,
this gives an obvious place to keep the results.
This avoids the need to dig in the guts of the
CI system
to find the latest tests.&lt;/p&gt;
&lt;p&gt;Speaking of digging through guts,
most of these systems
allow an easy search of
&amp;quot;all my open PRs&amp;quot;.
This means that to find out the branches you
have been working on,
for example when getting back to the office from the weekend,
you can just open the handy-dandy
link
and immediately see the list.
(This list is also useful as
&amp;quot;what do I need to clean up because it has become irrelevant.&amp;quot;)&lt;/p&gt;
&lt;p&gt;For some teams,
this requires a culture adjustment.
People need to allow for the code's
state in their review,
if they review at all.
Ideally,
this encourages the team to have a serious conversation
on when code is reviewed,
by whom,
and according to what criteria.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;After&lt;/em&gt;
this conversation happens,
and assuming people open PRs early in the process,
magic starts happening.
Because now,
when needing localized feedback
(for example,
&amp;quot;am I using this function correctly&amp;quot;)
you can link to the right place in the PR
and ask for specific feedback.&lt;/p&gt;
&lt;p&gt;This feedback,
given constructively and helpfully,
allows the entire team to learn.
Working in public,
at least among your team,
is helpful to everyone.&lt;/p&gt;
&lt;p&gt;So don't delay,
post the PR,
and start working better with your colleagues.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Portable Python Binary Wheels</title><link href="https://orbifold.xyz/binary-wheels.html" rel="alternate"></link><published>2021-04-05T20:00:00-07:00</published><updated>2021-04-05T20:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2021-04-05:/binary-wheels.html</id><summary type="html">&lt;p&gt;It is possible to work with Python quite a bit and not be aware of some
of the subtler details of package management.
Since Python is a popular “glue” language,
one of its core strengths is integrating with libraries
written in other languages:
from database drivers written in C,
numerical …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It is possible to work with Python quite a bit and not be aware of some
of the subtler details of package management.
Since Python is a popular “glue” language,
one of its core strengths is integrating with libraries
written in other languages:
from database drivers written in C,
numerical algorithms written in Fortran,
to cryptographic algorithms written in Rust.
In all these cases,
one way to avoid error-prone and frustrating installation errors
in the target environment is to distribute pre-built code.
However,
while source code can be made portable,
making the build output portable is a lot more complicated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;
This post focuses specifically about binary wheels on Linux.
Binary wheels exist for other platforms,
but those are beyond the current scope.&lt;/p&gt;
&lt;p&gt;The Python
&lt;code&gt;manylinux&lt;/code&gt; project,
composed of three PEPs,
two software repositories,
and support in pip,
addresses how to accomplish that.
These problems are hard,
and few other ecosystems solve them as well as Python.
The solution has many moving parts,
developed over the course of ten years.
Unfortunately,
this means that understanding all of those is not easy.&lt;/p&gt;
&lt;p&gt;While this post cannot make it easy,
it can at least make it easier,
by making sure all the details are in one place.&lt;/p&gt;
&lt;div class="section" id="wheels"&gt;
&lt;h2&gt;Wheels&lt;/h2&gt;
&lt;p&gt;Python packages come in two main forms:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Source&lt;/li&gt;
&lt;li&gt;Wheels&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wheels are
&amp;quot;pre-built&amp;quot;
packages that are easier and faster to install.
The name comes originally from a bad joke:
the Monty Python Cheese Shop sketch,
since PyPI used to be called
&amp;quot;Cheese Shop&amp;quot;
and cheese is sometimes sold in wheels.
The name has been retconned for another bad joke,
as a reference to the phrase
&amp;quot;reinventing the wheel&amp;quot;,
allowing Python packaging talks to make cheap puns.
For the kind of people who give packaging talks,
or write explainers about packaging formats,
these cheap jokes fill the void in what would otherwise be their soul.&lt;/p&gt;
&lt;p&gt;Even for packages that include no native code,
only pure Python,
wheels have some advantages.
They do not execute any potentially-fragile code on installation,
and querying their dependencies can be done without a Python interpreter.&lt;/p&gt;
&lt;p&gt;However,
when packages do include native code the story is more complicated.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="c-library"&gt;
&lt;h2&gt;C library&lt;/h2&gt;
&lt;p&gt;Let's start with the relatively straightforward part:
portable binary wheels for Linux are called
&lt;code&gt;manylinux&lt;/code&gt;,
not
&lt;code&gt;alllinux&lt;/code&gt;.
This is because it relies on the GNU C library,
and specific features of it.
There is another popular libc for Linux:
&lt;a class="reference external" href="https://www.musl-libc.org/"&gt;musl&lt;/a&gt;.
There is absolutely no attempt to be compatible with
musl-based Linux distributions[#],
the most famous among them is Alpine Linux.&lt;/p&gt;
&lt;p&gt;[#] For now. See &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0656/"&gt;PEP-656&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;However,
most other distributions derive from either Debian
(for example, Ubuntu) or from
Fedora (CentOS, RHEL, and more).
Those all use the GNU C library.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="gnu-c-library"&gt;
&lt;h2&gt;GNU C library&lt;/h2&gt;
&lt;p&gt;GNU libc has an official
&amp;quot;infinite backwards compatibility&amp;quot;
policy:
&lt;code&gt;libc6&lt;/code&gt;
version
&lt;code&gt;X.Y&lt;/code&gt;
is compatible with
&lt;code&gt;W.Z&lt;/code&gt;
if
&lt;code&gt;X&amp;gt;=W&lt;/code&gt; or
&lt;code&gt;X=W&lt;/code&gt; and
&lt;code&gt;Y&amp;gt;=Z&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Aside: the 6 in libc6 does not refer to the version of the GNU C Library:
Linux only moved to adopt the GNU C Library in libc6.
The libc4 library was written from scratch,
while libc5 combined code from GNU C Library version 1
and some bits from BSD C library.
In libc6,
Linux moved to rely on GNU C Library version 2.x,
first released in January 1997.
The GNU C Library is still,
over twenty years later,
on major version 2.
We will ignore some nuances,
and just treat all GNU C Library versions as 2.X.&lt;/p&gt;
&lt;p&gt;The infinite compatibility policy means that binaries built against
libc6 version 2.17, for example, are compatible with libc6 version 2.32.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="manylinux-history"&gt;
&lt;h2&gt;Manylinux history&lt;/h2&gt;
&lt;p&gt;The relevant &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0600/"&gt;PEP&lt;/a&gt; is dense but worth reading.
&amp;quot;Portable&amp;quot; is a loaded word,
and unpacking it is important.
The specific meaning of &amp;quot;portable&amp;quot; is encoded in the
&lt;a class="reference external" href="https://github.com/pypa/auditwheel/blob/686024ecc6882af63b10619351d82b56630f1e1a/auditwheel/policy/policy.json#L1"&gt;auditwheel policy file&lt;/a&gt;.
This file concedes the main point:
portability is a spectrum.&lt;/p&gt;
&lt;p&gt;When the manylinux project started,
in 2016,
the oldest security-supported open source distribution was CentOS:
specifically,
CentOS 5.11.
It was released in 2014.
However,
because CentOS tracks RHEL,
and RHEL is conservative,
the GNU C library
(glibc, from now on)
it used was
2.5:
a version released in 2006.&lt;/p&gt;
&lt;p&gt;Even then,
it was clear that the
&amp;quot;minimum&amp;quot;
compatibility level will be a moving target.
Because of that,
that compatibility level was named
&lt;code&gt;manylinux1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In 2018,
the manylinux project moved to a more transparent naming scheme:
the date in which the relevant compatible CentOS release was first released.
Thus,
instead of
&lt;code&gt;manylinux1&lt;/code&gt;,
the next compatibility target
(defined in 2018)
was called
&lt;code&gt;manylinux2010&lt;/code&gt;,
referencing CentOS 6.&lt;/p&gt;
&lt;p&gt;In April 2019,
&lt;code&gt;manylinux2014&lt;/code&gt;
was defined as a compatibility tag,
referencing CentOS 7.&lt;/p&gt;
&lt;p&gt;In the beginning of 2021,
Red Hat,
in a
&lt;a class="reference external" href="https://www.theregister.com/2021/01/26/killing_centos/"&gt;controversial move&lt;/a&gt;,
changed the way CentOS works,
effectively nullifying the value any future releases have
as a way of specifying a minimum glibc version support.&lt;/p&gt;
&lt;p&gt;The Python community decided to switch to a new scheme:
directly naming the version of glibc supported.
The first such tag,
&lt;code&gt;manylinux_2_24&lt;/code&gt;,
was added in November 2020.
The next release of
&lt;code&gt;auditwheel&lt;/code&gt;,
4.0,
moves all releases to glibc-based tags,
while keeping the original names as
&amp;quot;aliases&amp;quot;.
It also adds a compatibility level
&lt;code&gt;manylinux_2_27&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="libc-compatibility-and-beyond"&gt;
&lt;h2&gt;Libc compatibility and beyond&lt;/h2&gt;
&lt;p&gt;The compatibility level of a manylinux wheel is defined by the
glibc symbols it links against.
However,
this is not the only compatibility manylinux wheels care about:
this just puts them on a serial line from
&amp;quot;most compatible&amp;quot;
to
&amp;quot;least compatible&amp;quot;.&lt;/p&gt;
&lt;p&gt;Each compatibility level also includes
A list of allowed libraries to dynamically link against.
Specific symbol versions and ABI flags that depend on both glibc and gcc.&lt;/p&gt;
&lt;p&gt;However,
many Python extensions include native code precisely because they need to link
against a C library.
As a concrete example,
the
&lt;code&gt;mysqlclient&lt;/code&gt;
wheel would not compile if the
&lt;code&gt;libmysql&lt;/code&gt; headers are not installed,
and would not run if the
&lt;code&gt;libmysql&lt;/code&gt; shared library
(of a version that matches the one the package was compiled against)
is not installed.&lt;/p&gt;
&lt;p&gt;It would seem that portable binary wheels are only of limited utility if they
do not support the main use case.
However, the
&lt;code&gt;auditwheel&lt;/code&gt; tool includes one more twist:
patching ELF.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="elves"&gt;
&lt;h2&gt;Elves&lt;/h2&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Elf"&gt;Elves&lt;/a&gt;
predate Tolkien's Middle-Earth.
They appear in many Germanic and Nordic mythologies:
sometimes as do-gooders,
sometimes as evil-doers,
but always associated with having powerful magic.&lt;/p&gt;
&lt;p&gt;Our context is no less magical,
but more modern.
ELF
(&amp;quot;Executable and Loader Format&amp;quot;)
is the format of executable and shared libraries in Linux,
since libc5
(before that, Linux used the so-called a.out format).&lt;/p&gt;
&lt;p&gt;When auditwheel is asked to repair a wheel for a specific platform version,
it checks for any shared libraries it links against that are not part of the
pre-approved list.
If it finds any,
it patches them directly into the module.
This means that post &lt;code&gt;repair&lt;/code&gt;,
the new (&amp;quot;repaired&amp;quot;) wheel will not depend on any libraries outside the
approved list.&lt;/p&gt;
&lt;p&gt;These repaired binary wheels will include the requested manylinux tag and the
patched modules.
They can be uploaded to PyPI or other Python packaging repositories
(such as DevPI).&lt;/p&gt;
&lt;p&gt;For pip to install the correct wheels it needs to be up-to-date
in order to self-check the OS and decide which manylinux tags are compatible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="installing-binary-wheels"&gt;
&lt;h2&gt;Installing Binary Wheels&lt;/h2&gt;
&lt;p&gt;Because wheels tagged as
&lt;code&gt;linux_&amp;lt;cpu architecture&amp;gt;&lt;/code&gt;
(for example,
&lt;code&gt;linux_x86_64&lt;/code&gt;)
cannot be assumed on any platform other than the one they have been compiled for,
PyPI rejects those.
In order to upload a binary wheel for Linux to PyPI,
it has to be tagged with a manylinux tag.
It is possible to upload multiple manylinux wheels for a single package,
each with a different compatibility target.&lt;/p&gt;
&lt;p&gt;When installing packages,
pip will prefer to use a wheel,
if available,
instead of a source distribution.
When pip checks the availability of a wheel,
it will introspect the platform it is running it,
and map it to the list of compatible manylinux distributions.
Since the list is changing,
it is possible that a newer pip will recognize more compatibilities than an older
pip.&lt;/p&gt;
&lt;p&gt;Once pip finds the list of manylinux tags compatible with its platform,
it will install the least-compatible wheel that is still compatible with the
platform:
for example,
it will prefer
&lt;code&gt;manylinux2014&lt;/code&gt; to
&lt;code&gt;manylinux2010&lt;/code&gt; if both are compatible.
If there are no binary wheels available,
pip will fall back to installing from a source distribution
(&lt;code&gt;sdist&lt;/code&gt;).
As mentioned before,
installing from
&lt;code&gt;sdist&lt;/code&gt;,
at the very least,
requires a functional compiler and Python header files.
It might also have specific build-time dependencies, depending on the package.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thanks"&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;Thanks to SurveyMonkey
for encouraging me to do the research
this post is based on.&lt;/p&gt;
&lt;p&gt;Thanks to
&lt;a class="reference external" href="https://vorpus.org/"&gt;Nathaniel J. Smith&lt;/a&gt;
and
&lt;a class="reference external" href="https://glyph.twistedmatrix.com/"&gt;Glyph&lt;/a&gt;
for their feedback on this blog,
post-publication.
I have added some corrections and clarifications
based on their feedback.&lt;/p&gt;
&lt;p&gt;All mistakes that remain are my responsibility.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>So you want to create a universe</title><link href="https://orbifold.xyz/universe-pi-day.html" rel="alternate"></link><published>2021-03-11T21:00:00-08:00</published><updated>2021-03-11T21:00:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2021-03-11:/universe-pi-day.html</id><summary type="html">&lt;h2&gt;A story about looking for a universe, and finding a pi(e)&lt;/h2&gt;
&lt;p&gt;This is fine.
You need not feel shame.
Many want to create a universe.
But it is good you are being careful.
A universe with sentient beings is a big moral responsibility.&lt;/p&gt;
&lt;p&gt;It is good to start with …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;A story about looking for a universe, and finding a pi(e)&lt;/h2&gt;
&lt;p&gt;This is fine.
You need not feel shame.
Many want to create a universe.
But it is good you are being careful.
A universe with sentient beings is a big moral responsibility.&lt;/p&gt;
&lt;p&gt;It is good to start with something small.
The smallest.
Move up from there.
So there is one point,
that can move in one dimension.
Just interesting enough to be exciting,
but little chances of messing anything serious up.&lt;/p&gt;
&lt;p&gt;It is good if the way the point moves can be described by a function.
At each point in time, &lt;span class="math"&gt;\(t\)&lt;/span&gt;, the point is at a place, &lt;span class="math"&gt;\(x\)&lt;/span&gt;.
This mapping is a function.&lt;/p&gt;
&lt;div class="math"&gt;$$ f: \mathbb{R} \to \mathbb{R} $$&lt;/div&gt;
&lt;p&gt;Right now there are no sentient beings in the universe.
But inevitably,
you will want to create a universe with such beings.
Beings that want the universe to be predictable.
Better start practicing now!&lt;/p&gt;
&lt;p&gt;This means you want &lt;span class="math"&gt;\(f\)&lt;/span&gt; to have a simple mathematical description.
The concept of death is morally complicated,
but you want to allow for the potential of beings with a limited
lifespan.
This means that figuring out how &lt;span class="math"&gt;\(f\)&lt;/span&gt; changes should not rely on &lt;span class="math"&gt;\(t\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;One way to have a predictable function that does not depend on &lt;span class="math"&gt;\(t\)&lt;/span&gt;
is to define &lt;span class="math"&gt;\(f\)&lt;/span&gt; with a &lt;em&gt;position-independent differential equation&lt;/em&gt; (PIDE):
an equation that involves &lt;span class="math"&gt;\(f\)&lt;/span&gt; and its derivatives.&lt;/p&gt;
&lt;p&gt;You are just starting out,
so why not have the simplest PIDE?&lt;/p&gt;
&lt;div class="math"&gt;$$ f' = f $$&lt;/div&gt;
&lt;p&gt;Any simpler and your universe will be constant!
Solving differential equations is hard.
A solution probably exists, right?
Hopefully, one that is more interesting than the constant zero function.&lt;/p&gt;
&lt;div class="math"&gt;$$ f = 0 $$&lt;/div&gt;
&lt;p&gt;Yes, it definitely solves it,
but that sounds like a really boring universe.
If a solution that is not &lt;span class="math"&gt;\(0\)&lt;/span&gt; at &lt;span class="math"&gt;\(0\)&lt;/span&gt; exists, &lt;span class="math"&gt;\(f\)&lt;/span&gt;,
then&lt;/p&gt;
&lt;div class="math"&gt;$$ f/f(0) $$&lt;/div&gt;
&lt;p&gt;is also a solution since derivatives are linear.
The function &lt;span class="math"&gt;\(f/f(0)\)&lt;/span&gt; is an interesting solution.
Call it &lt;span class="math"&gt;\(e\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;For a constant &lt;span class="math"&gt;\(c\)&lt;/span&gt;, &lt;span class="math"&gt;\(e(x + c)/e(c)\)&lt;/span&gt; solves the equation and is &lt;span class="math"&gt;\(1\)&lt;/span&gt; at &lt;span class="math"&gt;\(0\)&lt;/span&gt;.
Differential equations have a unique solution with the same starting condition,
so&lt;/p&gt;
&lt;div class="math"&gt;$$ e(x + c)/e(c) = e(x) $$&lt;/div&gt;
&lt;p&gt;or, equivalently&lt;/p&gt;
&lt;div class="math"&gt;$$ e(x + c) = e(x)e(c) $$&lt;/div&gt;
&lt;p&gt;As a result, with a little induction,&lt;/p&gt;
&lt;div class="math"&gt;$$ e(n/m) ^ m = e(1)^n $$&lt;/div&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;div class="math"&gt;$$ e(n/m) = \sqrt[m]{e(1) ^ n} $$&lt;/div&gt;
&lt;p&gt;If you use the convention that &lt;/p&gt;
&lt;div class="math"&gt;$$ \sqrt[m](a) = a^{1/m} $$&lt;/div&gt;
&lt;p&gt;,
you get&lt;/p&gt;
&lt;div class="math"&gt;$$ e(n/m) = e(1)^{n/m} $$&lt;/div&gt;
&lt;p&gt;Your universe is one dimensional,
but you cannot help thinking about two dimensions.
Is there a way to get a second dimension for "free"?
You decide to leave the details for later,
and for now,
just see if
&lt;span class="math"&gt;\(e\)&lt;/span&gt; 
can be extended to the complex numbers.
This is sure to come handy later.&lt;/p&gt;
&lt;p&gt;Since
&lt;span class="math"&gt;\(e' = e\)&lt;/span&gt;,
&lt;span class="math"&gt;\(e'' = e\)&lt;/span&gt; 
nd so on.
In particular&lt;/p&gt;
&lt;div class="math"&gt;$$ 1 = e(0) = e'(0) = e''(0) ... $$&lt;/div&gt;
&lt;p&gt;This means that the Taylor series for &lt;span class="math"&gt;\(e\)&lt;/span&gt; looks like&lt;/p&gt;
&lt;div class="math"&gt;$$ e(x) = \Sigma_{n=0}^{\infty} x^n / n! $$&lt;/div&gt;
&lt;p&gt;This converges for every &lt;span class="math"&gt;\(x\)&lt;/span&gt;.
Because it converges absolutely everywhere, it can be extended to complex number with the same formula, and &lt;span class="math"&gt;\(e' = e\)&lt;/span&gt; over the complex numbers as well.&lt;/p&gt;
&lt;p&gt;If &lt;span class="math"&gt;\(t\)&lt;/span&gt; is a real number,&lt;/p&gt;
&lt;div class="math"&gt;$$ e(-it) = \overline {e (it) } $$&lt;/div&gt;
&lt;p&gt;and so&lt;/p&gt;
&lt;div class="math"&gt;$$ 1 = e(0) = e(it + (-it)) = e(it)e(-it)=e(it)\overline{(e(it))} = || e(it) || $$&lt;/div&gt;
&lt;p&gt;Nifty, for real &lt;span class="math"&gt;\(t\)&lt;/span&gt;, you get that &lt;span class="math"&gt;\(e(it)\)&lt;/span&gt; is on the unit circle.
But where on the unit circle?&lt;/p&gt;
&lt;div class="math"&gt;$$ \operatorname{Re} e(2i) = 1 - 2^2/2! + 2^4/4! - 2^6 / 6! + d  $$&lt;/div&gt;
&lt;div class="math"&gt;$$ = 1 - 2 + 16/24 - 64/720 + ... = -1 + 2/3 - 4/45 + d = -0.4\bar{2} + d $$&lt;/div&gt;
&lt;p&gt;Where &lt;span class="math"&gt;\(d\)&lt;/span&gt; represents the rest of the series.&lt;/p&gt;
&lt;p&gt;We can estimate &lt;span class="math"&gt;\(|d|\)&lt;/span&gt; as follows:&lt;/p&gt;
&lt;div class="math"&gt;$$ |d| \leq \Sigma_{n=0}^{\infty} 2^{8 + n}/(8 + n)! \leq \Sigma_{n=0}^{\infty}  ((2/315) 2^n / 4^n)) $$&lt;/div&gt;
&lt;div class="math"&gt;$$ \leq 2/315 &amp;lt; 1/10 = 0.1 $$&lt;/div&gt;
&lt;p&gt;and &lt;/p&gt;
&lt;div class="math"&gt;$$ \operatorname{Re} e(2i) &amp;lt; -0.4\bar{2} + d &amp;lt; -0.4\bar{2} + 0.1  &amp;lt; -0.3 &amp;lt; 0 $$&lt;/div&gt;
&lt;p&gt;Now&lt;/p&gt;
&lt;div class="math"&gt;$$ \operatorname{Re} e(0i) = \operatorname{Re} e(0) = \operatorname{Re} 1 = 1 &amp;gt; 0 $$&lt;/div&gt;
&lt;p&gt;and &lt;span class="math"&gt;\(t \to \operatorname{Re} e(ti)\)&lt;/span&gt; is a continuous function.
This means there must be a minimal &lt;span class="math"&gt;\(t\)&lt;/span&gt; such that&lt;/p&gt;
&lt;div class="math"&gt;$$ \operatorname{Re} e(ti) = 0 $$&lt;/div&gt;
&lt;p&gt;This is fun!
It is not obvious how this ties into the original goal of building universes,
but it definitely cannot hurt!
This is an interesting number.
You decide to give it a name.&lt;/p&gt;
&lt;p&gt;The minimal &lt;span class="math"&gt;\(t\)&lt;/span&gt; such that &lt;span class="math"&gt;\(\operatorname{Re} e(ti) = 0\)&lt;/span&gt; will be &lt;span class="math"&gt;\(\rho\)&lt;/span&gt;.
Since &lt;span class="math"&gt;\(||e(\rho i)|| = 1\)&lt;/span&gt;, this means that&lt;/p&gt;
&lt;div class="math"&gt;$$ e(\rho i) = \pm i $$&lt;/div&gt;
&lt;p&gt;and so&lt;/p&gt;
&lt;div class="math"&gt;$$ e(4  \rho i) = (\pm 1)^4 i^4 = 1 $$&lt;/div&gt;
&lt;p&gt;Looks like &lt;span class="math"&gt;\(4 \rho\)&lt;/span&gt; is even more interesting than &lt;span class="math"&gt;\(\rho\)&lt;/span&gt;,
maybe it should have its own name.
How about &lt;span class="math"&gt;\(\tau\)&lt;/span&gt;?
With this new symbol, we get&lt;/p&gt;
&lt;div class="math"&gt;$$ e (\tau i + x) = e(\tau i)e(x) = 1e(x) = e(x)  $$&lt;/div&gt;
&lt;p&gt;So &lt;span class="math"&gt;\(e\)&lt;/span&gt;,
the tentative universe-evolution function,
has a period of &lt;span class="math"&gt;\(\tau i\)&lt;/span&gt;.
You did not expect it.
It is good you started with a simple universe,
there are many things to learn before creating an interesting one.&lt;/p&gt;
&lt;p&gt;You had a special name for &lt;span class="math"&gt;\(\rho\)&lt;/span&gt; and for &lt;span class="math"&gt;\(4 \rho\)&lt;/span&gt;,
it seems almost rude not to have a name for their
geometric mean.
All this universe creation is hungry work,
though.
It would be so much easier to think if you had a piece of...&lt;/p&gt;
&lt;p&gt;Back to the topic at hand, you decide to call the geometric mean of &lt;span class="math"&gt;\(\rho\)&lt;/span&gt; and &lt;span class="math"&gt;\(\tau\)&lt;/span&gt;,
&lt;span class="math"&gt;\(\tau / 2\)&lt;/span&gt;, &lt;span class="math"&gt;\(\pi\)&lt;/span&gt;:&lt;/p&gt;
&lt;div class="math"&gt;$$ \pi = \tau / 2 $$&lt;/div&gt;
&lt;p&gt;Time to relax and eat a nice piece of pie.
You definitely deserved it.
Whether it is savory or sweet,
a pie is delicious.
Enjoy it.
Savor it.
The universe will be waiting for you,
right here.&lt;/p&gt;
&lt;p&gt;Satisfied and with a full tummy,
you get back to the universe.
You gave &lt;span class="math"&gt;\(\rho\)&lt;/span&gt;, &lt;span class="math"&gt;\(\pi\)&lt;/span&gt;, and &lt;span class="math"&gt;\(\tau\)&lt;/span&gt; names.&lt;/p&gt;
&lt;p&gt;Any idea what their approximate value is?&lt;/p&gt;
&lt;p&gt;You  know that &lt;span class="math"&gt;\(0 &amp;lt; \rho &amp;lt; 2\)&lt;/span&gt;,
but this is a pretty wide gap of ignorance.
Calculating &lt;span class="math"&gt;\(e(it)\)&lt;/span&gt;, for &lt;span class="math"&gt;\(t\)&lt;/span&gt; in that range,
seems to converge quickly.&lt;/p&gt;
&lt;p&gt;Just a handful of terms gave you something accurate to within &lt;span class="math"&gt;\(2/315\)&lt;/span&gt;.
Time to leave abstract thinking, and crank up your universe simulation machine.
You want to have a sense of the values involved here.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;approximate_re_e_i&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;factorial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With a decent approximation of $ \operatorname{Re} e(it) $,
you look for where the function is zero using binary search.
It might not be the fastest way,
but your universe simulator can handle it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_zero&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mf"&gt;0.001&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;midpoint&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;approximate_re_e_i&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;midpoint&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;midpoint&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;low&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;midpoint&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;high&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;low&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now it is time to activate the simulator,
and find the values.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;rho&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_zero&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;tau&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;rho&lt;/span&gt;
&lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tau&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Wonderful progress on the universe for today.
A great day.
A wonderful day.
A day you want to celebrate.&lt;/p&gt;
&lt;p&gt;But when?&lt;/p&gt;
&lt;p&gt;With &lt;span class="math"&gt;\(\rho &amp;lt;2\)&lt;/span&gt;, you know that &lt;span class="math"&gt;\(\pi &amp;lt;8\)&lt;/span&gt;.
Sounds like the integer part of it could be the month, maybe?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pi&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All that is left is to choose a day.
There are thirty days in a month,
so hopefully two digits will do here.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pi&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;
&lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rest&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt;

&lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;today&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;

&lt;span class="n"&gt;celebration&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Celebrate on&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;celebration&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;Celebrate on 2021-03-14
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Enjoy your pie!&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/latest.js?config=TeX-AMS-MML_HTMLorMML';

    var configscript = document.createElement('script');
    configscript.type = 'text/x-mathjax-config';
    configscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'none' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        availableFonts: ['STIX', 'TeX']," +
        "        preferredFont: 'STIX'," +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";

    (document.body || document.getElementsByTagName('head')[0]).appendChild(configscript);
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="misc"></category></entry><entry><title>Virtual Buffet Line</title><link href="https://orbifold.xyz/virtual-buffet.html" rel="alternate"></link><published>2021-02-18T19:00:00-08:00</published><updated>2021-02-18T19:00:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2021-02-18:/virtual-buffet.html</id><summary type="html">&lt;p&gt;Many people have written about the
&lt;a class="reference external" href="ttps://twitter.com/chrisjrn/status/996765333108146177"&gt;logistical challenges&lt;/a&gt;
of food in a conference.
You trade off not just,
as Chris points out,
expensive food versus terrible food,
but also the challenges of serving the food
to everyone at once.&lt;/p&gt;
&lt;p&gt;One natural method of crowd control is the buffet line.
People …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Many people have written about the
&lt;a class="reference external" href="ttps://twitter.com/chrisjrn/status/996765333108146177"&gt;logistical challenges&lt;/a&gt;
of food in a conference.
You trade off not just,
as Chris points out,
expensive food versus terrible food,
but also the challenges of serving the food
to everyone at once.&lt;/p&gt;
&lt;p&gt;One natural method of crowd control is the buffet line.
People shuffling slowly through the line,
picking food items,
allows for a natural choke-point that avoids
overwhelming table and staff availability.
It is unpleasant to have to walk slowly,
at the pace of the slowest decision maker,
while hungry.&lt;/p&gt;
&lt;p&gt;As humans do,
one tries to make the best of a bad situation.
All of the people in the conference share some common interests,
and many of them have interesting tales besides.
A common way of entertaining yourself in the line
is to strike up a conversation with the random person
before or ahead of you.
Indeed, this has led me to hear some fascinating things:
tales of incidents,
new libraries,
or just interesting perspectives.&lt;/p&gt;
&lt;p&gt;With a global pandemic looming,
responsible folks have either cancelled conferences or
led virtual conferences.
Virtual conferences,
especially while a global pandemic ravages the world,
are nowhere as good as the real thing.&lt;/p&gt;
&lt;p&gt;One of my favorite things in conferences is the so-called
hallway track,
where we stand and chat about common interests.
Friendly and inclusive people stand in the
&amp;quot;pac-man&amp;quot;
shape,
so that people can join the conversation.
I have learned a lot from these random conversations.&lt;/p&gt;
&lt;p&gt;As humans do,
one tries to make the best of a bad situation.
While we are stuck at home,
at least lunch time is easy.
When you want to eat,
order a delivery or step into the kitchen
and food,
chosen by you,
is available.
No shuffling.
No waiting.&lt;/p&gt;
&lt;p&gt;So far,
no conference has tried to have a virtual buffet line,
where people are forced to virtually wait in a line
before eating.
True,
the random conversations are gone,
but they have always been a coping mechanism,
not the intent.
If the pandemic continues,
however,
I am not sure this will remain true.&lt;/p&gt;
&lt;p&gt;Conferences have
&lt;em&gt;already&lt;/em&gt;
tried to
&amp;quot;recreate&amp;quot;
many of the constraints foisted upon physical conferences
by the uncaring laws of physics
in order to make them feel more
&amp;quot;real&amp;quot;.
This rarely helps the
&amp;quot;realism&amp;quot;
but often creates new,
unexpected problem.&lt;/p&gt;
&lt;p&gt;One conference platform allows for
&amp;quot;virtual coffee tables&amp;quot;
where 2-10 people
(depending on the table)
can sit.
Once the table is &amp;quot;full&amp;quot;,
nobody else can join the conversation.
Table-mates can speak via text, video, or audio.&lt;/p&gt;
&lt;p&gt;The reason real hallway tables are set for 2-10 people
is because of physical constraints
and avaialbility of furniture.
There was no careful design of which combination of 2-10-sized tables
makes for an
&amp;quot;optimal&amp;quot;
experience.&lt;/p&gt;
&lt;p&gt;Further,
this is not even a good recreation.
With real tables,
space is somewhat negotiable.
An extra person can fit in
if the seated people will let them.
People can see the conversation.
People can trade-off a subtle
&amp;quot;how eaves-droppy&amp;quot;
they want to be.
You can stand next to the table for a long time,
but possibly perceived as weird.
You can pass by quickly,
catch a whiff of the conversation.
You can hear from afar,
but only distorted highlights&lt;/p&gt;
&lt;p&gt;These things mean,
for example,
someone seated at a table trying to harass a table-mate
chances being seen and caught by random people.
While we hope that this is not the only thing preventing
people from harassing,
this is a useful social enforcement tool.
However,
the &amp;quot;virtual tables&amp;quot;
are more like
&amp;quot;virtual isolation rooms&amp;quot;.
Stuck inside one with an unpleasant person
means they can say and do what they will
with no fear of witnesses.&lt;/p&gt;
&lt;p&gt;How does Code of Conduct enforcement happens?
How do vulnerable demographics feel about that?&lt;/p&gt;
&lt;p&gt;Attempting to recreate a physical experience in a virtual world
is doomed to failure,
unless you have sophisticated science-fictional-level
virtual reality and physics simulation.
However,
as a culture,
we have adapted to video chats,
video webinars,
text chats and more.
We figured out social conventions and norms,
and how to enforce them.&lt;/p&gt;
&lt;p&gt;When designing a virtual conference,
concentrating on
&amp;quot;physical fidelity&amp;quot;
is a fool's errand.
Instead,
figure out what kind of pleasant virtual experiences you want to supply,
how to enforce those norms you want to enforce,
and how to communicate expected standards to the attendees.&lt;/p&gt;
&lt;p&gt;Just like physical conferences can be different,
virtual conferences can be different.
Pre-recorded or live talks,
video distribution platforms,
chatting platforms,
and more,
need to be chosen carefully.
Optimize for a good conference,
not a conference that feels
like an in-person conference.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>DRY is a Trade-Off</title><link href="https://orbifold.xyz/dry-trade-off.html" rel="alternate"></link><published>2020-12-11T20:00:00-08:00</published><updated>2020-12-11T20:00:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2020-12-11:/dry-trade-off.html</id><summary type="html">&lt;p&gt;DRY,
or
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;Don't Repeat Yourself&lt;/a&gt;
is frequently touted as a principle of software development.
&amp;quot;Copy-pasta&amp;quot;
is the derisive term applied to a violation of it,
tying together the concept of copying code
and
pasta as description of software development bad practices
(see also
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Spaghetti_code"&gt;spaghetti code&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;It is so uniformly reviled …&lt;/p&gt;</summary><content type="html">&lt;p&gt;DRY,
or
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself"&gt;Don't Repeat Yourself&lt;/a&gt;
is frequently touted as a principle of software development.
&amp;quot;Copy-pasta&amp;quot;
is the derisive term applied to a violation of it,
tying together the concept of copying code
and
pasta as description of software development bad practices
(see also
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Spaghetti_code"&gt;spaghetti code&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;It is so uniformly reviled that some people call DRY a
&amp;quot;principle&amp;quot;
that you should never violate.
Indeed, some linters even detect copy-paste
so that it can never sneak into the code.
But copy-paste is not a comic-book villain,
and DRY does not come bedecked in primary colors to defeat it.&lt;/p&gt;
&lt;p&gt;It is worthwhile to know
&lt;em&gt;why&lt;/em&gt;
DRY
started out as a principle.
In particular,
some for some modern software development practices,
violating DRY is the right thing to do.&lt;/p&gt;
&lt;p&gt;The main problem with &lt;em&gt;repeating&lt;/em&gt; a code chunk
is that if a bug is found,
there is more than one place where it needs to be fixed.
On the surface of it,
this seems like a reasonable criticism.
All code has bugs,
those bugs will be fixed,
why not minimize the cost of fixing them?&lt;/p&gt;
&lt;p&gt;As with all engineering decisions,
following DRY
is a
&lt;em&gt;trade-off&lt;/em&gt;.
DRY leads to the following issues:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Loss of locality&lt;/li&gt;
&lt;li&gt;Overgeneralized code&lt;/li&gt;
&lt;li&gt;Coordination issues&lt;/li&gt;
&lt;li&gt;Ownership issues&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="loss-of-locality"&gt;
&lt;h2&gt;Loss of locality&lt;/h2&gt;
&lt;p&gt;The alternative to copy-pasting the code is usually to put it in a
function (or procedure, or a subroutine, depending on the language),
and call it.
This means that when reading through the original caller,
it is less clear what the code does.&lt;/p&gt;
&lt;p&gt;When you are debugging, this means we need to &amp;quot;Step into&amp;quot; the function.
While stepping into, it is non-trivial to check the original variables.
If you are doing &amp;quot;print debugging&amp;quot;,
this means finding the original source for the function and adding
relevant print statements there.&lt;/p&gt;
&lt;p&gt;Especially when DRY is pointed out and reactions are instinctive,
the function might have some surprising semantics.
For example, mutating contents of local variables is sensible
in code.
When you move this  code to a function as a part of a straightforward
DRY
refactoring,
this means that now a function is mutating its parameters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="overgeneralized-code"&gt;
&lt;h2&gt;Overgeneralized code&lt;/h2&gt;
&lt;p&gt;Even if the code initially was the same in both places,
there is no a-priori guarantee that it will stay this way.
For example, one of those places might be called frequently,
and so would like to avoid logging too many details.
The other place is called seldom, and those details are
essential to trouble-shooting frequent problems.&lt;/p&gt;
&lt;p&gt;The function that was refactored now has to support an extra parameter:
whether to log those details or not.
(This parameter might be a boolean, a logging level, or even a logging
&amp;quot;object&amp;quot; that has correct levels set up.)&lt;/p&gt;
&lt;p&gt;Since usually there is no institutional memory to undo
the DRY refactoring,
the function might add more and more cases,
eventually almost being two functions in one.
If the &amp;quot;copy-pasta&amp;quot; was more extensive,
it might lead to extensive over-generalization:
each place needs a slightly different variation of the functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="coordination-issues"&gt;
&lt;h2&gt;Coordination issues&lt;/h2&gt;
&lt;p&gt;Each modification of the
&amp;quot;common&amp;quot;
function now requires testing all of its callers.
In some situations,
this can be subtly non-trivial.&lt;/p&gt;
&lt;p&gt;For example,
if the repetition was across different repositories,
now updates means updating library versions.
The person making the change might not even be aware of all the callers.
The callers only find out when a new library version is used in their code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ownership-issues"&gt;
&lt;h2&gt;Ownership issues&lt;/h2&gt;
&lt;p&gt;When each of those code segments were repeated,
ownership and responsibility were trivial.
Whoever owned the surrounding code also owned
the repeated segment.&lt;/p&gt;
&lt;p&gt;Now that the code has been moved elsewhere,
to a
&amp;quot;shared&amp;quot;
location,
ownership can often be muddled.
When a bug is found,
who is supposed to fix it?
What happens if that
&amp;quot;bug&amp;quot;
is already relied on by another use?&lt;/p&gt;
&lt;p&gt;Especially in case with reactive DRY refactoring,
there is little effort given to specifying the expected
semantics of the common code.
There might be some tests,
but the behavior that is not captured by tests
might still vary.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Having a common library which different code bases can be relied on is good.
However, adding functions to such a library or libraries should be done
mindfully.
A reviewer comment about
&amp;quot;this code duplicates the functionality already implemented &lt;em&gt;here&lt;/em&gt;&amp;quot;
or,
even worse,
something like
&lt;cite&gt;pylint&lt;/cite&gt;
code duplication detector,
does not have that context or mindfulness.&lt;/p&gt;
&lt;p&gt;It is better to acknowledge the duplication,
perhaps track it via a ticket,
and let the actual
&amp;quot;DRY&amp;quot;
application take place later.
This allows gathering more examples,
thinking carefully about API design,
and make sure that ownership and backwards compatibility issues
have been thought of.&lt;/p&gt;
&lt;p&gt;Deduplicating code by putting common lines into functions,
without careful thought about abstractions,
is &lt;em&gt;never&lt;/em&gt; a good idea.
Understanding how to abstract correctly is essentially
API design.
API design is subtle, and difficult to do well.
There are no easy short-cuts,
and developing expertise in it takes a long time.&lt;/p&gt;
&lt;p&gt;Because API design is such a complex skill,
it is not easy to give general guidelines except one:
wait.
Rushing into an API design does not make a good API,
even if the person rushing &lt;em&gt;is&lt;/em&gt; an expert.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Fifty Shades of Ver</title><link href="https://orbifold.xyz/fifty-shades.html" rel="alternate"></link><published>2020-09-19T22:00:00-07:00</published><updated>2020-09-19T22:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2020-09-19:/fifty-shades.html</id><summary type="html">&lt;p&gt;Computers work on binary code.
If statements take one path:
true, or false.
For computers,
bright lines and clear borders make sense.&lt;/p&gt;
&lt;p&gt;Humans are more complicated.
What's an adult?
When are you happy?
How mature are you?
Humans have fuzzy feelings
with no clear delination.&lt;/p&gt;
&lt;p&gt;I was more responsible as …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Computers work on binary code.
If statements take one path:
true, or false.
For computers,
bright lines and clear borders make sense.&lt;/p&gt;
&lt;p&gt;Humans are more complicated.
What's an adult?
When are you happy?
How mature are you?
Humans have fuzzy feelings
with no clear delination.&lt;/p&gt;
&lt;p&gt;I was more responsible as a ten year old
than as a three year old.
At 13, I reached the age when I was responsible
for following Jewish law myself.
At 18, the legal system trusted me to could drink alcohol and drive,
and trusted me that I will keep the two activities distinct.
In the US, you cannot become a senator before you are 30.&lt;/p&gt;
&lt;p&gt;At what age are you responsible &amp;quot;enough&amp;quot;?&lt;/p&gt;
&lt;p&gt;Software is written by humans, not computers.
Humans with &lt;a class="reference external" href="http://neverworkintheory.org/2014/05/01/happy-sw-devs-solve-problems-better.html"&gt;feelings&lt;/a&gt;, hopes, and dreams.
We cry, we strive, we feel accomplished at times,
and disappointed at others.&lt;/p&gt;
&lt;p&gt;If you were designing a version system for computers,
&lt;a class="reference external" href="https://semver.org/"&gt;SemVer&lt;/a&gt;, or &amp;quot;Semantic Versioning&amp;quot;,
would make perfect sense.
Each part number in a three-part version number
is given a specific, distinct, definition:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Increment &lt;cite&gt;MAJOR&lt;/cite&gt; for backwards incompatible changes.&lt;/li&gt;
&lt;li&gt;Increment &lt;cite&gt;MINOR&lt;/cite&gt; for changes which add functionality.&lt;/li&gt;
&lt;li&gt;Increment &lt;cite&gt;PATH&lt;/cite&gt; for bugfix-only backwards compatible release.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But software is not made by computers.
It is made by humans.&lt;/p&gt;
&lt;div class="section" id="start-small"&gt;
&lt;h2&gt;Start small&lt;/h2&gt;
&lt;p&gt;A journey of a thousand miles begins with a single step.
The first version of the Linux kernel printed As and Bs to the screen.
The first version of Python didn't have modules.
SemVer, to its credit, acknowledges that.&lt;/p&gt;
&lt;p&gt;In versions like
&lt;code&gt;0.x.y&lt;/code&gt;.
SemVer defines the semantics:&lt;/p&gt;
&lt;blockquote&gt;
Anything MAY change at any time.
The public API SHOULD NOT be considered stable.&lt;/blockquote&gt;
&lt;p&gt;When something is small and fragile, it should be able to change.
Every UNIX programmer knows the story of why &lt;code&gt;Makefile&lt;/code&gt;
treats tabs and spaces differently.
In retrospect, causing a &lt;a class="reference external" href="https://beebo.org/haycorn/2015-04-20_tabs-and-makefiles.html"&gt;dozen of people&lt;/a&gt; a small amount of pain
would probably have been better than staying with the problem.&lt;/p&gt;
&lt;p&gt;Once the software is mature enough,
the SemVer reasoning goes,
just release &lt;code&gt;1.0.0&lt;/code&gt;
and commit to API stability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="grow-slowly"&gt;
&lt;h2&gt;Grow slowly&lt;/h2&gt;
&lt;p&gt;Given the amount of projects that have stayed on
&lt;a class="reference external" href="https://0ver.org/"&gt;ZeroVer&lt;/a&gt;
for a long time (or forever!)
the assumption that commiting to API stability
once the project matures is easy seems
to not pan out.&lt;/p&gt;
&lt;p&gt;Remember: software is written by humans.
Fuzzy humans, in complicated social structures,
who work together as best they can,
using brains evolved to figure out politics
in a fifty-person tribe in order to stay alive.&lt;/p&gt;
&lt;p&gt;Once a social structure is in place and working,
changing it is hard.
In the ZeroVer days, there was no reason to figure out which changes
broke API compatibility.
There was no reason to clearly delinate which parts are
&amp;quot;public&amp;quot;
API
and which are not.
After all, there was no need.&lt;/p&gt;
&lt;p&gt;Switching out of ZeroVer requires building all of this.
Not switching out of ZeroVer does not require complicated
social engineering.
It is not surprising that it is hard.
It's almost as if humans work better with slow changes,
and not sudden revolutions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="small-commitments"&gt;
&lt;h2&gt;Small commitments&lt;/h2&gt;
&lt;p&gt;Lately,
I have been frustrated with some aspects of my life.
COVID-19 did not cause them,
but helped bring them into sharp focus.
As the least embarassing example to admit in a public forum,
I realized that while my book shelves are so full of books
that shoving another one requires my 80s-kids Tetris skills,
I have not read a single fiction book in the last three years.
I used to be a voracious reader!&lt;/p&gt;
&lt;p&gt;How do you change habits?
I used to read, easily, 200 pages of fiction a day in my 20s.
I have not gotten worse at reading.
I could commit to reading 200 pages a day,
and track my progress.
If you have ever done that,
you know what the outcome is.
Every day, you look at the task,
and you decide it is too big.
You never begin.&lt;/p&gt;
&lt;p&gt;Instead, I decided I will read 20 pages a day,
and &lt;em&gt;feel good about it&lt;/em&gt;.
Feel good? I even decided to reward myself for every week
where I hit this goal five out seven days.&lt;/p&gt;
&lt;p&gt;The result?
The last few weeks,
I have been consistently been reading 20 pages a day,
missing only one or two days.&lt;/p&gt;
&lt;p&gt;When you are not good at something,
as a person or as a group,
and you want to get better,
small commitments frequently achieved are the way to go.&lt;/p&gt;
&lt;p&gt;SemVer does not work that way.
It is all or nothing.
SemWay or the Highway.
Perhaps it is better to have a versioning system for humans,
not a fictional alien race,
if we assume software will keep being written by humans.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="deprecation-policy"&gt;
&lt;h2&gt;Deprecation policy&lt;/h2&gt;
&lt;p&gt;It is an easy change to say that no single change can &amp;quot;just&amp;quot;
break an API.
One change to deprecate, and one change to break.
This is straightforward to verify.
It is reasonable to have a policy for exceptions,
but document the exceptions carefully.&lt;/p&gt;
&lt;p&gt;Note that this change does not help potential users all that much
by itself.
After all,
&lt;em&gt;two&lt;/em&gt; PRs in close succession can land,
and there is no reasonable upgrade path.&lt;/p&gt;
&lt;p&gt;Should we feel good about making a small change that does not help anyone?
&lt;em&gt;Absolutely&lt;/em&gt;.
Because it is small, and it is on the right path.&lt;/p&gt;
&lt;p&gt;Now that this change becomes ingrained in the developer group,
we can start mandating a minimum time between deprecation
and breakage.
At first,
we can have a 0day policy:
you can break,
&lt;em&gt;as long as the deprecated software has been released&lt;/em&gt;.
This causes more releases to happen,
making the team better at releasing.
It helps users only minimally.
However, at least with careful version pinning,
there is an upgrade path.&lt;/p&gt;
&lt;p&gt;Now,
we can start making the number 0 a bit bigger.
First, a week.
Then, a month.
Eventually, a quarter or a year.
If the project is big, the number might be different for different parts.&lt;/p&gt;
&lt;p&gt;But at that point, the project has a &lt;em&gt;clear&lt;/em&gt; deprecation policy.
A deprecation policy that can slowly grow the more mature the project is.
Not a binary, true/false, mature/new.
Shades of maturity.
Levels of reliability.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-calendar"&gt;
&lt;h2&gt;The calendar&lt;/h2&gt;
&lt;p&gt;A minute has 60 seconds.
An hour has 60 minutes.
A day has 24 hours.
Our time measurement system is still based on the Babylonian base-60 system,
though the actual digits used by the Babylonians are studied only
by specialists.&lt;/p&gt;
&lt;p&gt;Humans organize their lives by their calendar.
Kids learn that their birthday happens when they are a year older.
Every seven days, we have a weekend.
Every month, utility bills need to be paid.&lt;/p&gt;
&lt;p&gt;Humans make plans that depend on time.
They wait for their tax refund on April 15th to make purchases.&lt;/p&gt;
&lt;p&gt;A time-based deprecation policy takes advantage of those skills.
If the time between deprecation and breakage is one week,
then the policy is clear:
better make sure to upgrade weekly.
If it is one year,
do it when returning from the end-of-year holidays.
If the policy is incompatible with the expected value of the maintenance
effort,
then this can be known in advance.
This might mean that that dependency is not mature enough to be used.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="versioning-for-adults"&gt;
&lt;h2&gt;Versioning for adults&lt;/h2&gt;
&lt;p&gt;A versioning scheme needs to remember two things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;The people writing the software are humans&lt;/li&gt;
&lt;li&gt;The people using the software are humans&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If there is one thing that humans are good at,
it is communicating with other humans.
Humans can communicate feelings, fuzzy boundaries,
and plans for the future.&lt;/p&gt;
&lt;p&gt;Calendar-based versioning,
and a clear deprecation policy,
give them the ability to communicate those.
Not in a way that is suitable for computers.
Not in a way that will help your dependency-resolver
decide which version is &amp;quot;compatible&amp;quot;.
But in a way that lets you communicate with people
about your needs in a mature way,
and figuring out whether you can work together,
or part on friendly terms.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;If the main consumer of version numbers was the dependency resolver,
and the producer of version number was a top-down military structure
used to following orders,
SemVer would work well.&lt;/p&gt;
&lt;p&gt;For real software projects,
used by humans,
depending on documents written by humans for humans,
and often
&amp;quot;managed&amp;quot;
in extremely loose ways, even for commercial projects,
let alone volunteer-led ones,
a versioning system that helps adults work with adults is best.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="credits"&gt;
&lt;h2&gt;Credits&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Thanks to &lt;a class="reference external" href="https://atleastfornow.net/"&gt;Amber &amp;quot;Hawkowl&amp;quot; Brown&lt;/a&gt; for her inspiration in
among other things,
her excellent talk,
&lt;a class="reference external" href="https://www.youtube.com/watch?v=m44brj9PwPA"&gt;Releasing Calendar-Versioned Software&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a class="reference external" href="https://sedimental.org/"&gt;Mahmoud Hashemi&lt;/a&gt; for his work on
&lt;a class="reference external" href="https://calver.org/"&gt;CalVer&lt;/a&gt;,
&lt;a class="reference external" href="https://0ver.org/"&gt;ZeroVer&lt;/a&gt;,
and &lt;a class="reference external" href="https://sedimental.org/calver.html"&gt;blog post about CalVer&lt;/a&gt;
as well as &lt;a class="reference external" href="https://sedimental.org/designing_a_version.html"&gt;design notes&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a class="reference external" href="https://glyph.twistedmatrix.com/"&gt;Glyph Lefkowitz&lt;/a&gt; for insights into
how &lt;a class="reference external" href="https://glyph.twistedmatrix.com/2014/09/ungineering.html"&gt;software development happens&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Thanks to &lt;a class="reference external" href="https://www.jaylooney.dev/"&gt;Jay Looney&lt;/a&gt; and
&lt;a class="reference external" href="mailto:paul&amp;#64;nathan.house"&gt;Paul Nathan&lt;/a&gt;
for feedback on earlier drafts of this article.
Any issues or errors that remain are my responsibility.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Universal Binary</title><link href="https://orbifold.xyz/universal-binary.html" rel="alternate"></link><published>2020-08-20T21:45:00-07:00</published><updated>2020-08-20T21:45:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2020-08-20:/universal-binary.html</id><summary type="html">&lt;p&gt;I have written before about my
&lt;a class="reference external" href="https://orbifold.xyz/inbox-zero.html"&gt;Inbox Zero&lt;/a&gt;
methodology.
This is still what I practice,
but there is a lot more that helps me.&lt;/p&gt;
&lt;p&gt;The concept behind &amp;quot;Universal Binary&amp;quot;
is that the only numbers that make sense
asymptotically are zero, one, and infinity.
Therefore, in order to prevent things from …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I have written before about my
&lt;a class="reference external" href="https://orbifold.xyz/inbox-zero.html"&gt;Inbox Zero&lt;/a&gt;
methodology.
This is still what I practice,
but there is a lot more that helps me.&lt;/p&gt;
&lt;p&gt;The concept behind &amp;quot;Universal Binary&amp;quot;
is that the only numbers that make sense
asymptotically are zero, one, and infinity.
Therefore, in order to prevent things from going
off into infinity,
there needs to be processes that keep everything
to either zero or one.&lt;/p&gt;
&lt;p&gt;One:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;TODO list.&lt;/li&gt;
&lt;li&gt;Calendar.&lt;/li&gt;
&lt;li&gt;Time tracker.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Zero:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&amp;quot;Notes&amp;quot;&lt;/li&gt;
&lt;li&gt;E-mails in inbox&lt;/li&gt;
&lt;li&gt;Non-pinned open tabs&lt;/li&gt;
&lt;li&gt;Floating tasks&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="one-todo-list"&gt;
&lt;h2&gt;One TODO List&lt;/h2&gt;
&lt;p&gt;I have a single list that tracks everything I needed to do.
Be it a reminder to put a garbage bin in the car
or work on upgrading a dependency in production,
everything goes in the same place.&lt;/p&gt;
&lt;p&gt;Sometimes this will not be where all the information is.
Many of the things I need to do for work,
for example,
require a link to our internal issue tracking system.
For open source tickets, I have a GitHub link.&lt;/p&gt;
&lt;p&gt;But the important thing is that I don't go to GitHub or our internal
ticketing system to figure out what I need to do.
I have a single TODO list&lt;/p&gt;
&lt;p&gt;Since I have &lt;em&gt;one&lt;/em&gt; TODO list, it gets a lot of things. If my wife asks me to run an errand, it becomes a task. In my one-on-one meeting with my manager, if I make a commitment, it becomes a task. If a conference e-mails me to suggest I participate in the CFP, it becomes a task. The tasks accumulate fast.&lt;/p&gt;
&lt;p&gt;Currently, I feel like I'm on top of things and not behind on anything. In this calm, smooth sailing situation, I have around 200 tasks in my list. If every time I opened my list, I would have to look through 200 items to figure out what I am doing, I would get frustrated.&lt;/p&gt;
&lt;p&gt;Instead, I have appropriate filters on it. &amp;quot;Today and not related to work&amp;quot; when I am at home relaxing. &amp;quot;Overdue and related to work&amp;quot; when I get to the office in the morning, to see I dropped anything on the floor. &amp;quot;Things that are either not related to work or need to be done at home and due soon&amp;quot; for when I'm at home catching up in the evening.&lt;/p&gt;
&lt;p&gt;As I mentioned, I use TODOist. I think it's perfectly reasonable.
However, there are a lot of equally reasonable alternatives.
What's not reasonable is anything that does not let you tag and filter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="one-calendar"&gt;
&lt;h2&gt;One Calendar&lt;/h2&gt;
&lt;p&gt;I have gotten all my calendars feeding into a single pane of glass,
which color-codes the source.
My calendars include:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Work calendar (the feeding removes sensitive information)&lt;/li&gt;
&lt;li&gt;A Trello board with the Calendar power-up for co-ordinating events with my family.&lt;/li&gt;
&lt;li&gt;TODOist's due date/time calendar.&lt;/li&gt;
&lt;li&gt;Personal calendar invites.&lt;/li&gt;
&lt;li&gt;My &amp;quot;Daily schedule&amp;quot;, which is where I try to document my plans for each hour
I am awake, by day of the week.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I have a daily morning task to review the calendar for the day.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="one-time-tracker"&gt;
&lt;h2&gt;One Time Tracker&lt;/h2&gt;
&lt;p&gt;I use Toggl. The coolest feature in Toggl is that the Firefox button integration
integrates with TODOist and GitHub, so I have a button that says
&amp;quot;start working on this&amp;quot;.
Some of the things I do are not tracked at tasks.
As a horrible work-around, I have a Microsoft TO-DO pinned tab.
This does not violate the &amp;quot;One TODO list&amp;quot; motto,
because these are not tasks I ever plan to accomplish.
This are simply things I can activate as a &amp;quot;thing I am doing&amp;quot;
with one click: for example, &amp;quot;dinner&amp;quot; or &amp;quot;figuring out next task&amp;quot;.&lt;/p&gt;
&lt;p&gt;Since as long as I am alive I am doing &amp;quot;something&amp;quot;,
my time tracker is always supposed to be ticking.
I also have a daily task to go over the tracked items
and fix spelling and add appropriate metadata so that
I have less pressure to do so when I start tasks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zero-notes"&gt;
&lt;h2&gt;Zero Notes&lt;/h2&gt;
&lt;p&gt;A note is just some information that has no place.
Everything should have a proper place.
If I want to take down some information and not sure what is
its proper place,
then it goes in the TODO list.
The action item is &amp;quot;figure out where to put this.&amp;quot;&lt;/p&gt;
&lt;p&gt;I have a links file, where I put links.
I have a recipes GitHub repo, where I put recipes.
I have a &amp;quot;Notes&amp;quot; folder in Dropbox,
but the only notes that go there are things that I
need to be able to see immediately on my phone.
This means that every note should have an expiry date,
and after that they can be archived.&lt;/p&gt;
&lt;p&gt;During the beforetimes, I would have flight information for trips
there, and the like.
In these times, sadly, this folder is mostly empty until the world
is right again.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zero-unpinned-tabs"&gt;
&lt;h2&gt;Zero Unpinned Tabs&lt;/h2&gt;
&lt;p&gt;Firefox has an amazing feature called &amp;quot;pinned tabs&amp;quot;.
Pinned tabs are always left-most,
and only have their icon showing up.
My pinned tabs include my E-mail,
my Calendar, WhatsApp,
TODOist, and the Microsoft To-Do hack.&lt;/p&gt;
&lt;p&gt;Other tabs get closed. Since many of my tasks generate a lot of open tabs,
when cross-referencing documentation, this is an easy reminder.
Whenever I can't see all tab titles, I close everything unpinned.
Anything that I hesitate to close gets converted to a task with the TODOist
browser extension and then closed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zero-e-mails"&gt;
&lt;h2&gt;Zero E-mails&lt;/h2&gt;
&lt;p&gt;I have daily tasks to empty out my personal and work inbox.
Anything that can't be emptied in the time I allocated to doing that
gets converted to a task.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="zero-floating-tasks"&gt;
&lt;h2&gt;Zero Floating Tasks&lt;/h2&gt;
&lt;p&gt;Tasks get created in &amp;quot;Inbox&amp;quot; with no &amp;quot;due date&amp;quot;.
There is a daily task have that list have zero items.
Items can be non-floating by being assigned to a project
and having one of three things be true:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It's marked &lt;tt class="docutils literal"&gt;&amp;#64;when:time_permitting&lt;/tt&gt;, which is effectively equivalent to
&amp;quot;Archived&amp;quot;.&lt;/li&gt;
&lt;li&gt;It's marked &lt;tt class="docutils literal"&gt;&amp;#64;status:subtask&lt;/tt&gt;, which means it is part of a bigger
task where it is managed.&lt;/li&gt;
&lt;li&gt;It's marked with a specific day I plan to do it (&amp;quot;due date&amp;quot;, but it does
not actually mean &amp;quot;due date&amp;quot;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="work-in-progress-one-report"&gt;
&lt;h2&gt;(Work in Progress) One Report&lt;/h2&gt;
&lt;p&gt;I am working on having one report that pulls via API integration from
Toggl, TODOist, and FastMail Calendar (CalDav) details for the past week
and summarizes them.
For example, how many things did I do without a task?
Did they make sense?
What was my calendar saying I did at the time?&lt;/p&gt;
&lt;p&gt;I have a rough prototype, so now it is mostly debugging the logic
to make sure I am getting everything I expect and cleaning up the Look And Feel
so I can see as much as possible on one screen.
I am using Jupyter for that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;For some people, &amp;quot;small amounts of chaos&amp;quot; is a reasonable goal.
But for me, it's zero or infinity
Funneling everything to one TODO box allows emptying all the others.
Funneling everything to one calendar means only checking in one place
&amp;quot;what am I supposed to be doing&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>The Hardest Logic Puzzle Ever (In Python)</title><link href="https://orbifold.xyz/hardest-logic-puzzle-ever.html" rel="alternate"></link><published>2020-07-24T09:00:00-07:00</published><updated>2020-07-24T09:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2020-07-24:/hardest-logic-puzzle-ever.html</id><summary type="html">&lt;p&gt;The &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Labyrinth_(1986_film)"&gt;Labyrinth&lt;/a&gt;
is a children’s movie. The main character is 16 years old, and solving a
logic puzzle that will literally decide if she lives or dies. In
fiction, characters are faced with realistic challenges: ones they &lt;em&gt;can&lt;/em&gt;
solve, even if they have to make an effort.&lt;/p&gt;
&lt;p&gt;So, it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Labyrinth_(1986_film)"&gt;Labyrinth&lt;/a&gt;
is a children’s movie. The main character is 16 years old, and solving a
logic puzzle that will literally decide if she lives or dies. In
fiction, characters are faced with realistic challenges: ones they &lt;em&gt;can&lt;/em&gt;
solve, even if they have to make an effort.&lt;/p&gt;
&lt;p&gt;So, it makes sense that the designer of the eponymous labyrinth did not
consult logicians &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Raymond_Smullyan"&gt;Richard
Smullyan&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/George_Boolos"&gt;George
Boolos&lt;/a&gt; (no relation to
the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/George_Boole"&gt;inventor of boolean
algebra&lt;/a&gt;), and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)"&gt;John
McCarthy&lt;/a&gt;
(yes, the same person who invented
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)"&gt;Lisp&lt;/a&gt;
and suggested that a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Dartmouth_workshop"&gt;“2-month, 10-(person)
study”&lt;/a&gt; would make
significant headway in the study of Artificial Intelligence). Those
three would suggest that the designer use &lt;a class="reference external" href="https://en.wikipedia.org/wiki/The_Hardest_Logic_Puzzle_Ever"&gt;The Hardest Logic Puzzle
Ever&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There are persistent rumors of the movie getting a reboot, or perhaps a
sequel. Like any good sequel, the protagonists should face newer and
bigger challenges. In the interests of helping the screen writers for
the sequel/reboot, here is my explanation of the “Hardest Logic Puzzle
Ever”, together with clear code.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;__future__&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;annotations&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Do you remember movies from your childhood that just did not age that
well? You cringe at some tasteless joke, you say “I can’t believe it was
acceptable to show this back then”? I think we can agree we want to
future-proof the script for a bit.&lt;/p&gt;
&lt;p&gt;Using modern-style annotations will make our code much easier to
maintain.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;attr&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This movie will come out in the 2020s, and we should use 2020-era code
to model it. The &lt;a class="reference external" href="https://www.attrs.org/en/stable/index.html"&gt;attrs&lt;/a&gt;
library is almost always the right solution to implement classes.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The protagonist will face unknown challenges. Randomness is &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Bayesian_probability"&gt;a state of
knowledge&lt;/a&gt;. From
her perspective, the true state of the world is random.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;zope&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This is already a hard logic puzzle, no reason to make it harder on
ourselves. Clear interface and type hints will make the logic easier to
understand.&lt;/p&gt;
&lt;p&gt;This is why
&lt;a class="reference external" href="https://orbifold.xyz/zope-interface.html"&gt;zope.interface&lt;/a&gt; is
appropriate for The Hardest Logic Puzzle Ever. We also need the
&lt;tt class="docutils literal"&gt;Callable&lt;/tt&gt; interface, since our protagonist will be asking the Gods
questions in the form of functions, and &lt;tt class="docutils literal"&gt;Mapping&lt;/tt&gt;, since she will
eventually need to answer the question “which God is which”.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;Tuple&lt;/tt&gt; type will most be used by the careful protagonist in her
internal type hints. This is high stakes code, and she wants to make
sure she gets it right.&lt;/p&gt;
&lt;p&gt;In the HLPE (Hardest Logic Puzzle Ever), the ones who answer the
questions are Gods. Just like in the Marvel Cinematic Universe, they
might not be literal “Gods”, but clearly powerful aliens. As aliens,
they have their own language. The words for “yes” and “no” are “da” and
“ja” – but we do not know which is which.&lt;/p&gt;
&lt;p&gt;I suggest that this will not be revealed in the script. This is good
fodder for endless fan discussions later on Reddit. As such, the best
way is to make sure we do not know the answer ourselves: make it a
random language!&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;enum&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="nd"&gt;&amp;#64;enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GodWords&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;ja&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ja&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;da&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;da&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_god_language&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GodWords&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;words&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GodWords&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;words&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()}&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Shuffling the words for “yes” and “no” means that the &lt;tt class="docutils literal"&gt;.pop()&lt;/tt&gt; call
will get a random one. Now we have the language: it maps an abstract
concept (a Python Boolean) to a string.&lt;/p&gt;
&lt;p&gt;In the HLPE, there are three Gods, called “A”, “B”, and “C”. They can be
asked any question that refers to the Gods.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="nd"&gt;&amp;#64;enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;GodNames&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;IGod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;interface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Interface&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GodWords&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
        &lt;/span&gt;&lt;span class="sd"&gt;&amp;quot;&amp;quot;&amp;quot;Ask&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;But what questions is the protagonist allowed to ask? Questions are
something the audience-identification protagonist will ask. For this, a
&lt;tt class="docutils literal"&gt;Protocol&lt;/tt&gt; is appropriate. (Also, those are more convenient for
describing functions, which we do not want to annotate with explicit
implementation declarations.)&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;typing_extensions&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Protocol&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Protocol&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GodName&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IGod&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="k"&gt;pass&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Because of how annotations work, at this point we need not know what
&lt;tt class="docutils literal"&gt;GodName&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;IGod&lt;/tt&gt; are.&lt;/p&gt;
&lt;p&gt;The simplest of the Gods is the one who speaks always truly (in the God
language).&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="nd"&gt;&amp;#64;interface&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;implementer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IGod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nd"&gt;&amp;#64;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_attribs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frozen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TrueGod&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;_gods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IGod&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;_language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GodWords&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GodWords&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_language&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;question&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_gods&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The next God always lies.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="nd"&gt;&amp;#64;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_attribs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frozen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FalseGod&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;_gods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IGod&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;_language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GodWords&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GodWords&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_language&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;question&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_gods&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;But how to implement Random? This is a harder question than it seems.&lt;/p&gt;
&lt;p&gt;The original statement just said “whether Random speaks truly or falsely
is a completely random matter”. What does that mean? If you ask it two
questions, can it answer truthfully to one and lie to the other?&lt;/p&gt;
&lt;p&gt;Boolos wrote a “clarification”: “Whether Random speaks truly or not
should be thought of as depending on the flip of a coin hidden in
(their) brain: if the coin comes down heads, (they) speaks truly; if
tails, falsely.” This clarification fails to elucidate much: it does not
answer, for example, the question above.&lt;/p&gt;
&lt;p&gt;Finally, based on the suggested solution, and assuming that the obvious
simpler solutions do not work,
&lt;a class="reference external" href="https://brianrabern.net/index.html"&gt;Raben&lt;/a&gt; and
&lt;a class="reference external" href="https://landon.github.io/#about"&gt;Raben&lt;/a&gt;
&lt;a class="reference external" href="https://www.pure.ed.ac.uk/ws/files/15023904/Simple_Solution.pdf"&gt;suggested&lt;/a&gt;
suggested the clear guideline: “Whether Random says ja or da should be
thought of as depending on the flip of a coin hidden in his brain: if
the coin comes down heads, he says ja; if tails, he says da.”&lt;/p&gt;
&lt;p&gt;This is the guideline I have chosen to implement here.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="nd"&gt;&amp;#64;attr&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;auto_attribs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;frozen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;RandomGod&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;_gods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IGod&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;_language&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GodWords&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;GodWords&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_language&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;])]&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;So much back and forth discussion, over two millenia, for such simple
code.&lt;/p&gt;
&lt;p&gt;I’m sure the God-like aliens would have used code to describe the puzzle
from the beginning, avoiding the messiness of natural language.&lt;/p&gt;
&lt;p&gt;Accessing the God classes themselves would be the height of hubris, but
the goal of the protagonist is to answer “which God is which”. We will
build a special enumeration of the Gods’ identities, to be used in the
solution.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;GodIdentities&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;enum&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Enum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'God Identities'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;                          &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;klass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;klass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;                           &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;klass&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TrueGod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FalseGod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RandomGod&lt;/span&gt;&lt;span class="p"&gt;]})&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;With the Gods’ personalities implemented, we can write the code that
creates a random world that complies with the terms of the puzzle. Three
Gods, known as “A”, “B”, and “C”, assigned to the names randomly, and
speaking in a randomly generated language.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_gods&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IGod&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_god_language&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;gods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;god_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;klass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;klass&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;TrueGod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FalseGod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;RandomGod&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shuffle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;god_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;god_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;gods&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The code so far corresponds to the first part of the scene: where the
protagonist comes to the place of the Gods, learns the local rules, and
realizes that she must either solve the puzzle correctly, or fail.&lt;/p&gt;
&lt;p&gt;This time she is granted the chance to ask three questions. However,
there are many more unknowns: there are 6 possible assignments for the
Gods, and two possible meanings for the language. Frankly, I doubt that
I would be able to solve the puzzle on my feet, when I am afraid for my
life.&lt;/p&gt;
&lt;p&gt;But luckily, I have Wikipedia and time, and so I have written up the
code to find a solution here.&lt;/p&gt;
&lt;p&gt;Part of the solution is to ask a God a question about &lt;em&gt;themselves&lt;/em&gt;: “if
I asked you SOME QUESTION, would you say ja”. While no question asked of
Random is useful (the answer is random) for either True or False, this
question would result in “ja” the &lt;em&gt;right answer&lt;/em&gt; is “yes”, and “da* if
the &lt;em&gt;right answer&lt;/em&gt; is”no&amp;quot;. This means that wrapping questions like this
means we have to care neither the identity of the God, nor about the
details of the God language.&lt;/p&gt;
&lt;p&gt;This makes it a useful abstraction!&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;if_asked_a_question_would_you_say_ja_is_ja&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="n"&gt;god_name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IGod&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="n"&gt;question&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Callable&lt;/span&gt;&lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="n"&gt;IGod&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IGod&lt;/span&gt;&lt;span class="p"&gt;]],&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;god_name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add_you&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;question&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;add_you&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;GodWords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ja&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;GodWords&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ja&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This would be a wonderful chance for a flash-“forward” into a
hypothetical scene: the movie goes into black-and-white, and the
protagonist voice-overs: if “A” is “True”, what would happen if I ask
them “is 1 equal 1”? What would happen if I ask them “if I asked you,
‘is 1 equal 1?’, would you answer ’ja? What if”A&amp;quot; is “False”?&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hypothetical&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;language&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_god_language&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;gods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;hypothetical_true_god&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;TrueGod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;hypothetical_false_god&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FalseGod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;language&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hypothetical_true_god&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hypothetical_false_god&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[(&lt;/span&gt;&lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GodIdentities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TrueGod&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GodIdentities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FalseGod&lt;/span&gt;&lt;span class="p"&gt;)]:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;question&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;            &lt;span class="n"&gt;objective_value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;question&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;                &lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;identity&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;, asked &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;objective_value&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; question:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;                &lt;span class="n"&gt;if_asked_a_question_would_you_say_ja_is_ja&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;question&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;            &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;hypothetical&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;hypothetical&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
God Identities.TrueGod, asked True question: True
God Identities.TrueGod, asked False question: False
God Identities.FalseGod, asked True question: True
God Identities.FalseGod, asked False question: False
&lt;/pre&gt;
&lt;p&gt;Movie goes back to color. A smile spreads on the protagonist’s face. She
knows how to solve this.&lt;/p&gt;
&lt;p&gt;The next challenge is to find a God that is not Random. If you ask God
&lt;em&gt;B&lt;/em&gt; about whether &lt;em&gt;A&lt;/em&gt; is Random, then if the answer is “ja”, then it
means either the correct answer is that A is Random or it means B is
Random. Either way, C is &lt;em&gt;not&lt;/em&gt; Random.&lt;/p&gt;
&lt;p&gt;For similar reasons, if B answers “da”, then “A” is not Random.&lt;/p&gt;
&lt;p&gt;Either way, we have found a non-Random God. Now we know that we can find
the truth from them by using the wrapper!&lt;/p&gt;
&lt;p&gt;So we ask them whether they’re True. Now we ask them about whether “B”
is Random.&lt;/p&gt;
&lt;p&gt;So we know:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;One God who is not Random (who we will call “the interlocutor”, since
we’ll spend the rest of the conversation with them)&lt;/li&gt;
&lt;li&gt;Whether the interlocutor is True&lt;/li&gt;
&lt;li&gt;Whether B is Random&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;ask_questions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IGod&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;is_a_random_according_to_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;if_asked_a_question_would_you_say_ja_is_ja&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;RandomGod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;interlocutor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_a_random_according_to_b&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;is_interlocutor_true&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;if_asked_a_question_would_you_say_ja_is_ja&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="n"&gt;interlocutor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TrueGod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;is_b_random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;if_asked_a_question_would_you_say_ja_is_ja&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="n"&gt;interlocutor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;isinstance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;RandomGod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;interlocutor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_interlocutor_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_b_random&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Once again, the movie goes into a black and white flash-forward as the
protagonist plans her move.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hypothetical&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;experiment&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Experiment&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;experiment&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="n"&gt;gods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_gods&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="n"&gt;interlocutor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_interlocutor_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_b_random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ask_questions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;I think &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;interlocutor&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt; is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="n"&gt;is_interlocutor_true&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;God. They're &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;interlocutor&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;f&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;B is &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;is_b_random&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'not '&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;RandomGod. They're &lt;/span&gt;&lt;span class="si"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;hypothetical&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="n"&gt;hypothetical&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
Experiment 1
I think GodNames.C is FalseGod. They're FalseGod.
B is not RandomGod. They're TrueGod.
Experiment 2
I think GodNames.A is FalseGod. They're FalseGod.
B is not RandomGod. They're TrueGod.
Experiment 3
I think GodNames.A is TrueGod. They're TrueGod.
B is RandomGod. They're RandomGod.
Experiment 4
I think GodNames.A is FalseGod. They're FalseGod.
B is not RandomGod. They're TrueGod.
&lt;/pre&gt;
&lt;p&gt;Now that we know the answers, it is time to put them all together. We
first record whether the interlocutor is True or False. If B is Random,
we mark them as such. If not, we know that neither the interlocutor or B
is Random, so the other God must be Random.&lt;/p&gt;
&lt;p&gt;Now that we know two Gods’ identities, the last name that remains
belongs to the last possible identity.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;analyze_answers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;interlocutor&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_interlocutor_true&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_b_random&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;solution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;interlocutor&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GodIdentities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TrueGod&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_interlocutor_true&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;                              &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;GodIdentities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FalseGod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;other_god&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;interlocutor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;random_god&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;is_b_random&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;other_god&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;random_god&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;GodIdentities&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RandomGod&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;last_god&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;last_god_value&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;GodIdentities&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;solution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;solution&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;last_god&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;last_god_value&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;solution&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Putting the questioning and the analysis together is straightforward.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_solution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IGod&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;GodNames&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;GodIdentities&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;interlocutor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_interlocutor_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_b_random&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ask_questions&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;analyze_answers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;interlocutor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_interlocutor_true&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;is_b_random&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Our little checker returns both a description of the situation, as well
as whether the solution was correct.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;check_solution&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Tuple&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;Mapping&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;]:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;gods&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;make_gods&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;solution&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;find_solution&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;reality&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;type&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;god&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;god&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;gods&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;deduced&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;([(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;identity&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;solution&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;()])&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;reality&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deduced&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reality&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;deduced&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The last step is to test our solution multiple times. Again, remember
that there are &lt;tt class="docutils literal"&gt;6 * 2 = 12&lt;/tt&gt; possible situations. However, if “B” is
Random, we can get two different answers. This means the total number of
options for a path is more than &lt;em&gt;12&lt;/em&gt;, but less than &lt;em&gt;24&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If we run the solution for a 1000 times, the probability that a given
path will not be taken is less than &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;(23/24)**1000&lt;/span&gt; * 24&lt;/tt&gt;. How much is
it?&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;24&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
7.885069901070409e-18
&lt;/pre&gt;
&lt;p&gt;Good enough!&lt;/p&gt;
&lt;p&gt;Now we can see if the script works. We lack Hollywood’s professional
script doctors, but we do have a powerful Python interpreter.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;reality&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deduced&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;correct&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;check_solution&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="n"&gt;correct&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Solution is incorrect&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reality&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deduced&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Solved correctly for&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;reality&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
Solved correctly for [('A', 'RandomGod'), ('B', 'TrueGod'), ('C', 'FalseGod')]
Solved correctly for [('A', 'RandomGod'), ('B', 'FalseGod'), ('C', 'TrueGod')]
Solved correctly for [('A', 'RandomGod'), ('B', 'TrueGod'), ('C', 'FalseGod')]
Solved correctly for [('A', 'TrueGod'), ('B', 'FalseGod'), ('C', 'RandomGod')]
Solved correctly for [('A', 'TrueGod'), ('B', 'RandomGod'), ('C', 'FalseGod')]
&lt;/pre&gt;
&lt;p&gt;We printed out every 200th situation, to have some nice output!&lt;/p&gt;
&lt;p&gt;Python confirms it. Hollywood should buy our script.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a class="reference external" href="https://glyph.twistedmatrix.com/"&gt;Glyph Lefkowitz&lt;/a&gt; for his
feedback on the &lt;a class="reference external" href="https://orbifold.xyz/labyrinth.html"&gt;Labyrinth&lt;/a&gt;
post, some of which inspired changes in this post. Thanks to &lt;a class="reference external" href="https://enotuniq.org/"&gt;Mark
Williams&lt;/a&gt; for his feedback on an early draft.
Any mistakes or issues that remain are my responsibility.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Hey, Back Off!</title><link href="https://orbifold.xyz/back-off.html" rel="alternate"></link><published>2020-07-12T21:00:00-07:00</published><updated>2020-07-12T21:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2020-07-12:/back-off.html</id><summary type="html">&lt;p&gt;The choice in parameters for back-off configuration is important.
It can be the difference between a barely noticable blip in service quality
and an hours-long site outage.
In order to explore the consequences of the choice,
I wrote a little fictional ditty about a fictional website.&lt;/p&gt;
&lt;p&gt;I hope you enjoy …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The choice in parameters for back-off configuration is important.
It can be the difference between a barely noticable blip in service quality
and an hours-long site outage.
In order to explore the consequences of the choice,
I wrote a little fictional ditty about a fictional website.&lt;/p&gt;
&lt;p&gt;I hope you enjoy escaping into this fictional reality
as much as I enjoyed writing about it.&lt;/p&gt;
&lt;p&gt;Your recipe site is different.
After all,
recipe sites are a dime-a-dozen.
With today's modern technology,
any kid can put a quick mock-up together
with Django, React, and MongoDB
to store recipes and retrieve them
by various attributes.&lt;/p&gt;
&lt;p&gt;In order to make your recipe site stand above the rest,
you made sure it uses really cutting edge techniques.
From details of the web requests coming in,
using sophisiticated language parsing and machine learning algorithm,
with just a few words about the user's likes and dislikes,
you find the perfect recipe just for them.&lt;/p&gt;
&lt;p&gt;HackerNews called it
&amp;quot;just a bunch of buzzwords&amp;quot;,
of course.
But once the graphs went up into the right,
with 50% month-over-month growth rates,
everyone explained that
&lt;em&gt;they&lt;/em&gt;
knew that this one was different.
Popularity sky-rocketed,
the engineers worked on scaling up the site,
and though it was not the world's most sophisticated microservice architecture,
it was
medium-service architecture,
at least.&lt;/p&gt;
&lt;p&gt;The web front end would call the machine learning cluster,
running on special GPU machines,
to get the appropriate keywords by which to look up the recipe.
Maybe not a the kind of 50-microservices-architecture
that takes three whiteboards to explain,
but at least it was easy enough to scale up horizontally.
You hired a great Site Reliability Engineer,
who built a sophisticated continuous delivery machine.
As your machine learning team fine-tuned the model,
it would slowly roll out into the cluster,
running continous A/B tests that would immediately roll back
the change if the model performed worse than before.&lt;/p&gt;
&lt;p&gt;The SRE also made sure the web front-end would back off
of a malfunctioning machine learning node,
as those do sometimes.
Instead of immediately reconnecting,
it would try reconnecting at intervals starting at 5 milliseconds
and increasing by powers of 2: 10ms, 20ms, and so on.&lt;/p&gt;
&lt;p&gt;Amazing.&lt;/p&gt;
&lt;p&gt;You will never forget what happened next.
A new model was rolled out.
It looked great.
Performed wonderfully.
The only problem was that it had a hidden time-bomb.
The model had a small overfit that happend to match
the sum of the user's ID and the time.
This, in itself, is the kind of overfit that happens every day.
Unfortunately, if that value exceeded a threshold,
it triggered a bug in the machine learning library.
When that happened,
the node would become flakey,
and start dropping random connections.
Even worse,
for the specific input used in the health checks,
it would work:
all nodes appeared healthy in the monitoring dashboard,
and to the service discovery framework.&lt;/p&gt;
&lt;p&gt;A nightmare scenario.&lt;/p&gt;
&lt;p&gt;One by one,
nodes started dropping off,
as users with higher IDs connected
and the seconds ticked on mercilessly.
The front end started backing off:
by 5ms, then 10ms, then 20ms.&lt;/p&gt;
&lt;p&gt;The exponential function explodes fast,
so of course the backoff
(with jitter, as is common practice)
had an upper limit.
When the Site Reliability Engineer set the upper limit,
there was a lot of things on their mind.
Decisions are hard to make.
Sometimes, one neuron firing makes all the difference.
But neurons are small,
and electrons are smaller.&lt;/p&gt;
&lt;p&gt;When we look at the firing of a neuron,
we can no longer imagine the world is as Maxwell and Newton imagined it to be.
Quantum effects must be taken into account.
As per the obviously correct Many-Worlds interpretation of Quantum Mechanics,
the one world had split into two that would never interact again.&lt;/p&gt;
&lt;p&gt;In one world, the SRE had set the maximum to 1 second.
In the other, to 10 minutes.
For a while, these worlds seemed to parallel each other closely:
sure,
a few bits on in a YAML file were different,
but what storm could come from such a small butterfly?&lt;/p&gt;
&lt;p&gt;It was not until the disasterous model roll-out that
the worlds would diverge wildly.
In the world where the limit was set to one second,
the front ends were hammering the nodes mercilessly.
Rolling back the model would mean that a node
would start getting too many connections,
and before a few seconds had passed,
it would fall back down.&lt;/p&gt;
&lt;p&gt;Eventually,
in this world,
the whole front-end had to be brought down,
the model fully rolled back,
and only then the front-end brought back up.
This was too bad,
because the front-end had a bad-but-working model built-in,
and some recipes would still be found while the
&amp;quot;outage&amp;quot;
was happening.
Sure, they were not the &amp;quot;wow you read my mind&amp;quot; quality,
but they were still decent results.&lt;/p&gt;
&lt;p&gt;Bringing down the whole front-end cluster,
and bringing it up again,
turned the outage from a blip in recipe click-through rates
into a three-hour, news-coverage-worthy outage.&lt;/p&gt;
&lt;p&gt;In the other world,
where the back-off had a maximum of ten minutes,
things progressed much more smoothly.
As a machine learning node's model was rolled back,
it came back up, and machines started connecting to it.
The first one to be brought up did go down from connection overload --
but took ten minutes to do so,
enough time to ascertain that this solution was correct.
A few more nodes were rolled back,
and as the connections grew,
the roll back flowed through the fleet.&lt;/p&gt;
&lt;p&gt;The outage has been managed,
and other than a few irate customers posting on Twitter
about looking for vegan recipes and getting
a &amp;quot;meat lover's delight&amp;quot;,
the outage mostly went unnoticed.&lt;/p&gt;
&lt;p&gt;Back-off is important.
Exponential back-off with jitter and a maximum is almost always the
right solution.
Yes, the exponent matters a little.
The initial back off matters a little.
But the maximum matters
&lt;em&gt;a lot&lt;/em&gt;.
Set the maximum to
&amp;quot;human time frames&amp;quot;:
a few minutes
(1-30)
is a good balance.&lt;/p&gt;
&lt;p&gt;Even in a big cluster,
an extra action every 10 minutes will probably not cause serious
downstream repercussions.
But even the most entitled customer can be mollified by
a support technician for five minutes
doing
&amp;quot;everything possible to find a solution&amp;quot;
while waiting the clock out on the 10 minute back-off clock.&lt;/p&gt;
&lt;p&gt;Choose maximums for back-off carefully,
or the site you bring down may be your own.&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a class="reference external" href="https://faingezicht.com/"&gt;Avy Faingezicht&lt;/a&gt; for his feedback on an earlier draft.
Any mistakes or issues that remain are my reponsibility.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>A Labyrinth of Lies</title><link href="https://orbifold.xyz/labyrinth.html" rel="alternate"></link><published>2020-07-03T10:30:00-07:00</published><updated>2020-07-03T10:30:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2020-07-03:/labyrinth.html</id><summary type="html">&lt;p&gt;In the 1986 movie Labyrinth, a young girl (played by Jennifer Connelly)
is faced with a dilemma. The adorable Jim Henson puppets explain to her
that one guard always lies, and one guard always tells the truth. She
needs to figure out which door leads to the castle at the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In the 1986 movie Labyrinth, a young girl (played by Jennifer Connelly)
is faced with a dilemma. The adorable Jim Henson puppets explain to her
that one guard always lies, and one guard always tells the truth. She
needs to figure out which door leads to the castle at the center of the
eponymous Labyrinth, and which one to certain death (dun-dun-dun!).&lt;/p&gt;
&lt;p&gt;I decided that like any reasonable movie watcher, I need to implement
this in Python.&lt;/p&gt;
&lt;p&gt;First, I implemented two guards: one who always tells the truth, and one
who always lies. The guards know who &lt;em&gt;they&lt;/em&gt; are, and what the doors are,
but can only answer &lt;tt class="docutils literal"&gt;True&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;False&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import dataclasses
from typing import List

guards = [None, None]
doors = [&amp;quot;certain death&amp;quot;, &amp;quot;castle&amp;quot;]

&amp;#64;dataclasses.dataclass
class Guard:
    _truth_teller: bool
    _guards: List
    _doors: List[str]

    def ask(self, question):
        answer = bool(question(self, self._guards, self._doors))
        if not self._truth_teller:
            answer = not answer
        return answer

guards[0] = Guard(True, guards, doors)
guards[1] = Guard(False, guards, doors)
&lt;/pre&gt;
&lt;p&gt;This being a children’s movie, the girl defeats all odds and figures out
what to ask the guard: “would he (&lt;em&gt;points to the other guard&lt;/em&gt;) tell me
that this (&lt;em&gt;points to the door on the left&lt;/em&gt;) door leads to the castle?”&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def question(guard, guards, doors):
    other_guard, = (candidate for candidate in guards if candidate != guard)
    def other_question(ignored, guards, doors):
        return doors[0] == &amp;quot;castle&amp;quot;
    return other_guard.ask(other_question)
&lt;/pre&gt;
&lt;p&gt;What would the truth-teller answer?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
guards[0].ask(question)
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
True
&lt;/pre&gt;
&lt;p&gt;And the liar?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
guards[1].ask(question)
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
True
&lt;/pre&gt;
&lt;p&gt;No matter &lt;em&gt;who&lt;/em&gt; she asks, now she can count on a lie. After a short
exposition, she confidently walks through the other door. It’s a piece
of cake!&lt;/p&gt;
&lt;p&gt;Thanks to
&lt;a class="reference external" href="https://twitter.com/rinaarts"&gt;Rina Arstain&lt;/a&gt;
and
&lt;a class="reference external" href="https://twitter.com/veronica_hanus"&gt;Veronica Hanus&lt;/a&gt;
for their feedback on an earlier draft.
Thanks to &lt;a class="reference external" href="https://glyph.twistedmatrix.com/"&gt;Glyph Lefkowitz&lt;/a&gt;
for the idea to use &lt;code&gt;dataclasses&lt;/code&gt;.
All mistakes and issues that remain are my responsibility.&lt;/p&gt;
&lt;p&gt;Some related work in the field of formalizing logic puzzles:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://glyph.twistedmatrix.com/2020/07/zen-guardian.html"&gt;Glyph wrote a response post&lt;/a&gt; about getting the code to be professional-level Python.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.hillelwayne.com/post/"&gt;Hillel Wayne&lt;/a&gt; wrote about &lt;a class="reference external" href="https://www.hillelwayne.com/post/knights-knaves/"&gt;how to solve logic puzzles with Alloy&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
</content><category term="misc"></category></entry><entry><title>Conditionally Logging Expensive Tasks</title><link href="https://orbifold.xyz/logging-expensive.html" rel="alternate"></link><published>2020-06-13T20:30:00-07:00</published><updated>2020-06-13T20:30:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2020-06-13:/logging-expensive.html</id><summary type="html">&lt;p&gt;(I have shown this technique in my
&lt;a class="reference external" href="https://buttondown.email/moshez/"&gt;mailing list&lt;/a&gt;.
If this kind of thing seems interesting,
why not subscribe?)&lt;/p&gt;
&lt;p&gt;Imagine you want to log something that is,
potentially,
expensive to calculate.
For example,
in &lt;tt class="docutils literal"&gt;DEBUG&lt;/tt&gt; mode,
you would like to count the classes of the objects in
&lt;code&gt;gc.get_objects()&lt;/code&gt;
and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;(I have shown this technique in my
&lt;a class="reference external" href="https://buttondown.email/moshez/"&gt;mailing list&lt;/a&gt;.
If this kind of thing seems interesting,
why not subscribe?)&lt;/p&gt;
&lt;p&gt;Imagine you want to log something that is,
potentially,
expensive to calculate.
For example,
in &lt;tt class="docutils literal"&gt;DEBUG&lt;/tt&gt; mode,
you would like to count the classes of the objects in
&lt;code&gt;gc.get_objects()&lt;/code&gt;
and log those counts:
this is often a useful technique for diagnosing reference leaks.
This is pretty heavy to calculate,
and logging it always sounds wasteful.&lt;/p&gt;
&lt;p&gt;The logging module has
&lt;em&gt;lazy interpolation&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;A line like&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
logging.debug(&amp;quot;total number: %r&amp;quot;, 2500)
&lt;/pre&gt;
&lt;p&gt;will not bother calculating the string interpolation
&lt;tt class="docutils literal"&gt;total number: 2500&lt;/tt&gt;
unless the logging level is set to output it.&lt;/p&gt;
&lt;p&gt;However,
calling
&lt;code&gt;logging.debug(&amp;quot;total number: %r&amp;quot;, get_object_counts())&lt;/code&gt;
will still call
&lt;code&gt;get_object_counts()&lt;/code&gt;
regardless.
It is not the cost of calculating the interpolation,
but that of calculating the counts themselves
that you would like to avoid.&lt;/p&gt;
&lt;p&gt;One way to piggy-back on the lazy interpolation to do lazy evaluation
is to write a custom class with a lazy
&lt;code&gt;__repr__()&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class OnDemand:
    def __init__(self, callable):
        self.callable = callable
    def __repr__(self):
        return repr(self.callable())
&lt;/pre&gt;
&lt;p&gt;This defines a class,
&lt;code&gt;OnDemand&lt;/code&gt;,
which will only call the function when it needs its
&lt;cite&gt;repr&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;This allows us to write code like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
logging.debug(&amp;quot;total number: %r&amp;quot;, OnDemand(get_object_counts))`
&lt;/pre&gt;
&lt;p&gt;Now,
&lt;code&gt;get_object_counts()&lt;/code&gt;
will not be called at all:
notice that
the logging line does not call it.
This makes the lazy &lt;em&gt;evaluation&lt;/em&gt; explicit:
we explicitly delay evaluation with
&lt;code&gt;OnDemand&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Here is a simple example of how it would work:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; def get_object_counts():
...     print(&amp;quot;doing something expensive&amp;quot;)
...     return 5
...
&amp;gt;&amp;gt;&amp;gt; debug_logging.debug(&amp;quot;result is %r&amp;quot;, OnDemand(get_object_counts))
doing something expensive
DEBUG:debug:result is 5
&amp;gt;&amp;gt;&amp;gt; warnonly_logging.debug(&amp;quot;result is %r&amp;quot;, OnDemand(get_object_counts))
&amp;gt;&amp;gt;&amp;gt; warnonly_logging.debug(&amp;quot;result is %r&amp;quot;, get_object_counts())
doing something expensive
&lt;/pre&gt;
&lt;p&gt;Note that when the
&lt;tt class="docutils literal"&gt;warnonly_logging&lt;/tt&gt;
is called with a
&lt;code&gt;.debug()&lt;/code&gt;
method,
&lt;em&gt;the expensive calculation is not done&lt;/em&gt;:
not only is the log message ignored,
but the function that calculates the value is not done.&lt;/p&gt;
&lt;p&gt;The last line shows that without the careful usage of
&lt;code&gt;OnDemand&lt;/code&gt;,
the expensive calculation is done.&lt;/p&gt;
&lt;p&gt;This should make it easy to sprinkle heavy calculations in
&lt;code&gt;logging.debug&lt;/code&gt;
statements.
Coupled with easy ways to trigger logging level changes
(which are beyond the scope of this article)
this gives a powerful way to get insight into your program's innards.&lt;/p&gt;
&lt;p&gt;(Thanks to
Adi Stav,
Avy Faingezicht,
Chris Withers,
Dave Briccetti,
and
Lucas Wiman
on their feedback on an early draft of this article.
Any mistakes or issues that remain are my responsibility.)&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>My Little Pony -- DevOps is Magic</title><link href="https://orbifold.xyz/my-little-devops.html" rel="alternate"></link><published>2020-04-26T17:00:00-07:00</published><updated>2020-04-26T17:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2020-04-26:/my-little-devops.html</id><summary type="html">&lt;p&gt;(This article is based on the one I
&lt;a class="reference external" href="https://opensource.com/article/20/5/devops-lessons"&gt;originally published&lt;/a&gt;
on OpenSource.com.)&lt;/p&gt;
&lt;p&gt;In 2010,
the My Little Pony franchise was rebooted with the animated show
&lt;em&gt;My Little Pony: Friendship is Magic&lt;/em&gt;.
The combination of accessibility to children with the sophisticated themes the
show tackled garnered a following that cut …&lt;/p&gt;</summary><content type="html">&lt;p&gt;(This article is based on the one I
&lt;a class="reference external" href="https://opensource.com/article/20/5/devops-lessons"&gt;originally published&lt;/a&gt;
on OpenSource.com.)&lt;/p&gt;
&lt;p&gt;In 2010,
the My Little Pony franchise was rebooted with the animated show
&lt;em&gt;My Little Pony: Friendship is Magic&lt;/em&gt;.
The combination of accessibility to children with the sophisticated themes the
show tackled garnered a following that cut across ages.
I was swept up in the wave and discovered there
is a lot to learn about DevOps from the show.&lt;/p&gt;
&lt;p&gt;The show begins with Twilight Sparkle reading obscure documentation,
only to realize that Equestria,
where the show is set,
is due to suffer a calamity.
Though Nightmare Moon has been imprisoned for a thousand years,
there is a prophecy she will return.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson 1: Technical debt matters.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Document technical debt.
Pay attention to the signs of risk no matter how infrequently they occur.
Have a plan to resolve it.&lt;/p&gt;
&lt;p&gt;Twilight Sparkle goes to her manager with the news,
only to be told that it is not a current priority.
She is sent to Ponyville to prepare for the coming celebration,
instead.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson 2: Communication with management is key.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Twilight Sparkle communicated her priority but did
not convince her management that it was more important than the celebration.&lt;/p&gt;
&lt;p&gt;We all need to make clear what the business case is for resolving critical
issues.
It is also not straightforward to explain technical debt in business terms.
If management does not agree on the severity,
find new ways to communicate the risk,
and team up with others who speak that language.&lt;/p&gt;
&lt;p&gt;As the prophecy has foreseen,
Nightmare Moon returns and declares eternal night.
Twilight quickly understands that she cannot resolve the issue by herself,
and she recruits the ponies who will become,
with her,
the &amp;quot;Mane Six.&amp;quot;
They each stand for a different element of harmony
—
Applejack stands for Honesty,
Fluttershy for Kindness,
Pinkie Pie for Laughter,
Rarity for Generosity,
Rainbow Dash for Loyalty,
and Twilight Sparkle herself for Magic.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson 3: Few are the issues that can be resolved by one person.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When facing an outage,
reach out to other people with complementary skills who
can help you.
It is best if they are different than you:
different backgrounds leads to differing perspectives,
and that can lead to better problem-solving.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson 4: When resolving an outage, honest communication is key.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Throughout the struggle against the eternal night,
the Mane Six have to speak openly and honestly about what's not working.
Their blameless communication is part of problem-solving.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson 5: When resolving an outage,
kindness to yourself and to others is crucial.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Though tempers flare hot in the land of Equestria,
we all benefit from coming back to working together.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson 6: Laughter is important.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Even when everything comes crashing down,
remember to take a break,
drink a glass of water,
and take a deep breath.
Stressing out does not help anything.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson 7: Be generous.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Even if you are not on-call right now,
if your help is needed to resolve a problem,
help out as you hope your colleagues will do for you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson 8: Be loyal.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An outage is not a time to settle rivalries between teams.
Focus on how to collaborate and resolve the outage as a team.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson 9: Though people skills are important,
you have to understand the technology on a deep level.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Keep your tech skills sharp.
Expertise is not only the ability to learn;
it is knowing when that information is needed.
Part of being an expert is practice.&lt;/p&gt;
&lt;p&gt;After the issue is resolved,
Princess Celestia realizes that the Mane Six are crucial to the
long-term survival of Equestria,
and tells Twilight Sparkle to stay in Ponyville and keep researching the magic
of friendship.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson 10: After an outage is resolved,
conduct a review,
take concrete lessons,
and act on them.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;I could go on,
episode by episode,
detailing lessons relevant for DevOps,
but I will &lt;em&gt;wrap up&lt;/em&gt; with one of my favorite ones.&lt;/p&gt;
&lt;p&gt;In the &amp;quot;Winter Wrap-Up&amp;quot; episode,
all the ponies in Ponyville help in preparing for the spring.
As per tradition,
they do not use magic,
leaving Twilight Sparkle to wonder how she can contribute.
Eventually,
she realizes that she can help by making a checklist to
make sure everything is done in the right order.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Lesson 11: When automation is impossible or inadvisable,
write a solid checklist, and follow it. Do not depend on your memory.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Twilight Sparkle and the Mane Six overcome great obstacles as a team,
and now have a system to improve as a team.
I hope you,
too,
can help bring a collaborative DevOps culture to your work.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Numbers in Python</title><link href="https://orbifold.xyz/numbers.html" rel="alternate"></link><published>2020-04-26T17:00:00-07:00</published><updated>2020-04-26T17:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2020-04-26:/numbers.html</id><summary type="html">&lt;p&gt;Numbers in Python come in all shapes and forms.
The reason different kind of representations of numbers exist is because
they all have different trade-offs.
These trade-offs are often surprising!&lt;/p&gt;
&lt;div class="section" id="integers"&gt;
&lt;h2&gt;Integers&lt;/h2&gt;
&lt;p&gt;The most surprising things about integers is how easily they stop being
integers.
Dividing two integers, for example,
&lt;code&gt;4 …&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Numbers in Python come in all shapes and forms.
The reason different kind of representations of numbers exist is because
they all have different trade-offs.
These trade-offs are often surprising!&lt;/p&gt;
&lt;div class="section" id="integers"&gt;
&lt;h2&gt;Integers&lt;/h2&gt;
&lt;p&gt;The most surprising things about integers is how easily they stop being
integers.
Dividing two integers, for example,
&lt;code&gt;4/3&lt;/code&gt;,
gives a float,
and &lt;code&gt;(4/3)*3&lt;/code&gt; is the
&lt;em&gt;float&lt;/em&gt;
&lt;code&gt;4.0&lt;/code&gt;.
Even if a program has no floating point numbers coming in,
all that is needed for floating point numbers to exist
somewhere is a division operation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="floats"&gt;
&lt;h2&gt;Floats&lt;/h2&gt;
&lt;p&gt;Floats do not behave like numbers.
Numbers obey certain mathematical properties:
subtraction is the inverse to addition,
addition is associative,
and more.&lt;/p&gt;
&lt;p&gt;For example&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; 1 + 2 - 2 - 1
0
&amp;gt;&amp;gt;&amp;gt; 0.1 + 0.2 - 0.2 - 0.1
2.7755575615628914e-17
&lt;/pre&gt;
&lt;p&gt;adding two numbers,
and then subtracting them one at a time,
does not result in the same value.&lt;/p&gt;
&lt;p&gt;They do not obey the associative law of addition,
&lt;code&gt;a + (b + c) = (a + b) + c&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; a = 2**-53
&amp;gt;&amp;gt;&amp;gt; (a + a) + 1 == a + (a + 1)
False
&lt;/pre&gt;
&lt;p&gt;These show just two of the corner cases that floating point numbers
exhibit,
which can be surprising.
A full treatise on the ways that floating point behavior can be surprising
is too big to fit in the margin of this blog post.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="fractions"&gt;
&lt;h2&gt;Fractions&lt;/h2&gt;
&lt;p&gt;Many algorithms that look straightforward
&amp;quot;explode&amp;quot;
with exact fractions.
Explosion usually starts as time explosion:
the algorithm becomes &amp;quot;quadratic&amp;quot;:
the time it takes is proportional not to the input length,
but to the scare of the input's length.
In other words, doubling the input size
&lt;em&gt;quadruples&lt;/em&gt;
the time it takes.&lt;/p&gt;
&lt;p&gt;If enough time is spent,
memory explosion is also possible:
the space requirements increase,
until all memory fills up.&lt;/p&gt;
&lt;p&gt;One weird protection against memory explosion
is that usually it will take too long to get it,
and the program will be killed for
&amp;quot;hanging&amp;quot;.&lt;/p&gt;
&lt;p&gt;One such &amp;quot;algorithm&amp;quot; is addition.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; print(set(type(p) for p in primes))
&amp;gt;&amp;gt;&amp;gt; one = fractions.Fraction(1)
&amp;gt;&amp;gt;&amp;gt; before = datetime.now()
&amp;gt;&amp;gt;&amp;gt; res = sum(one/p for p in primes[:10000])
&amp;gt;&amp;gt;&amp;gt; after = datetime.now()
&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;It took&amp;quot;, after-before)
&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;Size of output&amp;quot;, len(str(res)))
&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;Approximate value&amp;quot;, float(res))
{&amp;lt;class 'int'&amp;gt;}
It took 0:01:16.033260
Size of output 90676
Approximate value 2.7092582487972945
&lt;/pre&gt;
&lt;p&gt;This is just adding the inverses to some primes
(I removed the first few from the list,
and then chopped the list to be the next 10,000).
On a nice laptop designed as a gaming rig,
adding 10,000 numbers took
over a minute,
and resulted in an output that was over 90K!&lt;/p&gt;
&lt;p&gt;In comparison,
running the same algorithm with floats is much more efficient:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; print(set(type(p) for p in primes))
&amp;gt;&amp;gt;&amp;gt; before = datetime.now()
&amp;gt;&amp;gt;&amp;gt; res = sum(1/p for p in primes[:10000])
&amp;gt;&amp;gt;&amp;gt; after = datetime.now()
&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;It took&amp;quot;, after-before)
&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;Size of output&amp;quot;, len(str(res)))
&amp;gt;&amp;gt;&amp;gt; print(&amp;quot;Approximate value&amp;quot;, float(res))
{&amp;lt;class 'int'&amp;gt;}
It took 0:00:00.000480
Size of output 17
Approximate value 2.709258248797317
&lt;/pre&gt;
&lt;p&gt;The time it took is less than a millisecond,
and some of that is possibly measurement error from
&lt;cite&gt;datetime&lt;/cite&gt;.
This is around 10,000 times faster.
The output can be saved in 17 bytes:
a mere 1000 reduction in space.
However, the result is inaccurate:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
Approximate value 2.7092582487972945
Approximate value 2.709258248797317
                    1234567891234
&lt;/pre&gt;
&lt;p&gt;The results are off by less than &lt;code&gt;1e-14&lt;/code&gt;.
This would be like getting the distance to the moon wrong
by one millimeter.
In cases that do not involve sending a rocket to the moon with
less than a millimeter
(one grain of sand)
tolerance,
floats give a result that is precise enough
and several orders of magnitude more efficient.&lt;/p&gt;
&lt;p&gt;A lot of the responses to this were along the lines of
&amp;quot;fractions are slow because they are implemented in Python&amp;quot;.
Python can be responsible for a 10x slowdown,
but not 10,000x.
There is a third-party module,
&lt;code&gt;quicktions&lt;/code&gt;,
which implements fractions using Cython.&lt;/p&gt;
&lt;p&gt;Using &lt;code&gt;quicktions&lt;/code&gt; was,
indeed,
quicker.
It took the time down from a minute and sixteen seconds to
to a minute and fifteen seconds on my laptop.&lt;/p&gt;
&lt;p&gt;Fundamentally,
the problem is that this is a quadratic algorithm.
I chose the inputs carefully:
the worst case behavior for fraction addition is on prime numbers.
But unless you can predict the inputs to an algorithm,
you cannot rely on anything but the worst-case behavior.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="decimals"&gt;
&lt;h2&gt;Decimals&lt;/h2&gt;
&lt;p&gt;Decimal numbers are useful when managing financial transactions.
This is for the most boring reason possible:
the laws governing finance are specified in decimals.
However, all decimal point calculations in Python are governed
by hidden global state:
the &lt;code&gt;context&lt;/code&gt;.
The context determines precision,
and is taken from the caricature of how action at a distance
is problematic for APIs.&lt;/p&gt;
&lt;p&gt;Quoting the &lt;a class="reference external" href="https://docs.python.org/3.8/library/decimal.html"&gt;documentation&lt;/a&gt;
(for Python 3.8):&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; getcontext().prec = 6
&amp;gt;&amp;gt;&amp;gt; Decimal(1) / Decimal(7)
Decimal('0.142857')
&amp;gt;&amp;gt;&amp;gt; getcontext().prec = 28
&amp;gt;&amp;gt;&amp;gt; Decimal(1) / Decimal(7)
Decimal('0.1428571428571428571428571429')
&lt;/pre&gt;
&lt;p&gt;In practice,
code might have hundreds of lines between setting the precision
and doing a calculation.
The calculation can be in another function,
or even another file.&lt;/p&gt;
&lt;p&gt;The only safe way to use decimal numbers in Python is with
&lt;code&gt;localcontext&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; getcontext().prec = 6
&amp;gt;&amp;gt;&amp;gt; # 6853 lines elided
... with localcontext() as ctx:
...     ctx.prec = 10
...     Decimal(1) / Decimal(7)
...
Decimal('0.1428571429')
&lt;/pre&gt;
&lt;p&gt;As long as you are careful to use
&lt;cite&gt;localcontext&lt;/cite&gt;,
decimals work pretty well.
It is thread-safe and signal-safe.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Before you do things with numbers in your code,
stop and think.
What types should you use?
What do you want to happen?
What tolerances are important?&lt;/p&gt;
&lt;p&gt;Not thinking means letting the corner cases in the code just happen.&lt;/p&gt;
&lt;p&gt;(Thanks to Adi Stav, Aaron Hall, and Avy Faingezicht for their
feedback on an earlier draft.
All issues and mistakes that remain are my responsibility.)&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Goodbye, John H. Conway</title><link href="https://orbifold.xyz/john-h-conway.html" rel="alternate"></link><published>2020-04-21T17:00:00-07:00</published><updated>2020-04-21T17:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2020-04-21:/john-h-conway.html</id><summary type="html">&lt;p&gt;John H. Conway passed away ten days ago,
and I think it's only now I can write a proper eulogy.&lt;/p&gt;
&lt;p&gt;I was first introduced to his work,
if not his name,
when I was at the end of elementary school.
I am sure everyone has heard about the Game of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;John H. Conway passed away ten days ago,
and I think it's only now I can write a proper eulogy.&lt;/p&gt;
&lt;p&gt;I was first introduced to his work,
if not his name,
when I was at the end of elementary school.
I am sure everyone has heard about the Game of Life,
but did you know it had a 1D version?
The 1D version is significantly simpler,
but has the advantage that on a grid paper,
you can just play with yourself manually by putting a generation on each line.&lt;/p&gt;
&lt;p&gt;This was 12 year old me's &amp;quot;fidget spinner&amp;quot;,
how I kept myself calm in classes.
Starting with an initial configuration and letting it evolve.&lt;/p&gt;
&lt;p&gt;Later on,
when I went to college,
I got to borrow his amazing book,
&amp;quot;On Numbers and Games&amp;quot;.
Now,
I am definitely the sort of person who reads math books for fun,
but most of them are not fun.
They are dry,
poorly written,
and make leaps all the time.
&amp;quot;ONAG&amp;quot; was the exact opposite.
It's a short, delightful book,
that tries to get across the thinking,
the intuition, the methods,
and, yes, the joy.&lt;/p&gt;
&lt;p&gt;Fast forward a decade or two,
and again I found myself enamored with another one of his inventions:
the Look-and-Say sequence.
My old interview coding question was getting too popular on the interview-question-sites,
and I was getting worried.
Writing code for the look-and-say sequence is reasonably straightforward,
but does require basic skills:
looping while keeping a bunch of state variables.&lt;/p&gt;
&lt;p&gt;Then I read about his work on the look-and-say sequence,
and was utterly amazed and delighted by it.
Atoms and decay and asymptotic growth!&lt;/p&gt;
&lt;p&gt;Throughtout his career,
I think what made his things special is that he embodies the truest
mathematician spirit,
which is also the truest geek spirit:
starting out with something simple,
and then nerding out about it until you have built a whole universe.&lt;/p&gt;
&lt;p&gt;Whether it is a place where guns shoot spaceships at 3/8 the speed of light,
an algebraic field so vast it includes all other ordered fields and also all infinities,
or a concept of numbers atomically decaying,
he was a master at whipping out mathematicially consistent fictional worlds.&lt;/p&gt;
&lt;p&gt;Goodbye John H. Conway,
you were taken from us too soon.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Using Twisted to Massively Parallelize Web Clients</title><link href="https://orbifold.xyz/treq.html" rel="alternate"></link><published>2020-04-13T20:00:00-07:00</published><updated>2020-04-13T20:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2020-04-13:/treq.html</id><summary type="html">&lt;p&gt;The Twisted Requests
(&lt;tt class="docutils literal"&gt;treq&lt;/tt&gt;)
package is an HTTP client built on the popular
Twisted library that is used for web requests.
Async libraries offer the ability to do large amounts of network
requests in parallel with relatively little CPU impact.
This can be useful in HTTP clients that need to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Twisted Requests
(&lt;tt class="docutils literal"&gt;treq&lt;/tt&gt;)
package is an HTTP client built on the popular
Twisted library that is used for web requests.
Async libraries offer the ability to do large amounts of network
requests in parallel with relatively little CPU impact.
This can be useful in HTTP clients that need to make several
requests before they have all the information they need.&lt;/p&gt;
&lt;p&gt;This post shows an example of a problem like this,
and how to solve it using
&lt;tt class="docutils literal"&gt;treq&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;I enjoy playing the real-time strategy game Clash Royale.
Clash Royale is a mobile strategy player-vs-player game where
players play cards in an arena to win.
Each card has different strengths and weaknesses,
and different players prefer different cards.
Clash Royale remembers which card a player plays the most;
this is their &amp;quot;favorite&amp;quot; card.
Players come together in clans where they can help each other.
Supercell,
Clash Royale's developer,
released an HTTP-based API where different statistics can be queried.&lt;/p&gt;
&lt;p&gt;How can we write a program that will output the most popular favorite
cards in a clan?&lt;/p&gt;
&lt;p&gt;If you want to follow along,
you will need to register an account.
If you register an account,
create an API token via the Clash Royale developer portal.
Then choose &amp;quot;Create New Key&amp;quot; under your profile,
and enter a name, description, and a valid IP address.
(An exact address is required.)
Since you should never save an API key in your code,
keep it as a separate file in &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.crtoken&lt;/span&gt;&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ ls ~/.crtoken
/home/moshez/.crtoken
&lt;/pre&gt;
&lt;p&gt;To make it easier to see what is going on,
let's start with this introductory program that prints
&lt;tt class="docutils literal"&gt;Hello world&lt;/tt&gt;,
and then we'll talk through what it does:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import collections, json, os, sys, urllib.parse
from twisted.internet import task, defer
import treq

with open(os.path.expanduser(&amp;quot;~/.crtoken&amp;quot;)) as fpin:
    token = fpin.read().strip()

def main(reactor):
    print(&amp;quot;Hello world&amp;quot;)
    return defer.succeed(None)

task.react(main, sys.argv[1:])
&lt;/pre&gt;
&lt;p&gt;This imports many more modules than we need for the
&lt;tt class="docutils literal"&gt;&amp;quot;Hello world&amp;quot;&lt;/tt&gt;
example.
We will need these modules for the final version of the program,
which will accomplish the more complex task of asynchronously querying an API.
After the import,
the program reads the token from the file and stores it in the variable token.
(We are not going to do anything with the token right now,
but it's good to see that code.)
Next there is a main function that accepts a Twisted reactor.
A reactor is sort of like an interface to the machinery
of the Twisted package.
In this case
the function &lt;tt class="docutils literal"&gt;main&lt;/tt&gt; is sent as a parameter
to
&lt;tt class="docutils literal"&gt;task.react&lt;/tt&gt;,
and,
which will call
&lt;tt class="docutils literal"&gt;main&lt;/tt&gt;
with the reactor
and any arguments we give --
the command-line arguments,
in this case.&lt;/p&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;main&lt;/tt&gt; function returns a
&lt;tt class="docutils literal"&gt;defer.succeed(None)&lt;/tt&gt;.
This is how it returns a value of the right type:
a deferred value,
but one that already has been &amp;quot;fired&amp;quot; or &amp;quot;called.&amp;quot;
Because of that,
the program will exit immediately after printing Hello world,
as we need.&lt;/p&gt;
&lt;p&gt;Next, we will look at the concepts of async functions and
&lt;tt class="docutils literal"&gt;ensureDeferred&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
async def get_clan_details(clan):
     print(&amp;quot;Hello world&amp;quot;, clan)

def main(reactor, clan):
    return defer.ensureDeferred(get_clan_details(clan))

task.react(main, sys.argv[1:])
&lt;/pre&gt;
&lt;p&gt;In this program,
which should start with the same imports,
we moved all the logic to the async function
&lt;tt class="docutils literal"&gt;get_clan_details&lt;/tt&gt;.
Just like a regular function,
an async function has an implicit
&lt;tt class="docutils literal"&gt;return None&lt;/tt&gt; at the end.
However, async functions,
sometimes called co-routines,
are a different type than
&lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt;.
In order to let Twisted,
which has existed since Python 1.5.2,
use this modern feature,
we must adapt the co-routine using
&lt;tt class="docutils literal"&gt;ensureDeferred&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;While we could write all the logic without using co-routines,
using the async syntax will allow us to write code that is
easier to understand,
and we will need to move a lot less of the code into embedded callbacks.&lt;/p&gt;
&lt;p&gt;The next concept to introduce is that of
&lt;tt class="docutils literal"&gt;await&lt;/tt&gt;.
Later, we will
&lt;tt class="docutils literal"&gt;await&lt;/tt&gt;
a network call,
but for simplicity,
right now,
we will await on a timer.
Twisted has a special function,
&lt;tt class="docutils literal"&gt;task.deferLater&lt;/tt&gt;,
which will call a function with given parameters after some time has passed.&lt;/p&gt;
&lt;p&gt;The following program will take five seconds to complete:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
async def get_clan_details(clan, reactor):
     out = await task.deferLater(
         reactor,
         5,
         lambda clan: f&amp;quot;Hello world {clan}&amp;quot;,
         clan
     )
     print(out)

def main(reactor, clan):
    return defer.ensureDeferred(get_clan_details(clan, reactor))

task.react(main, sys.argv[1:])
&lt;/pre&gt;
&lt;p&gt;A note about types:
&lt;tt class="docutils literal"&gt;task.deferLater&lt;/tt&gt;
returns a
&lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt;,
as do most Twisted functions that do not have the value already available.
When running the Twisted event loop,
we can &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; on both &lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt; values and co-routines.&lt;/p&gt;
&lt;p&gt;The function
&lt;tt class="docutils literal"&gt;task.deferLater&lt;/tt&gt;
will wait five seconds and then call our
&lt;tt class="docutils literal"&gt;lambda&lt;/tt&gt;,
calculating the string to print out.&lt;/p&gt;
&lt;p&gt;Now we have all the Twisted building blocks needed to write an efficient
clan-analysis program!&lt;/p&gt;
&lt;p&gt;Since we will be using the global reactor,
we no longer need to accept the reactor as a parameter in the function that
calculates these statistics.
The way to use the token is as a &amp;quot;bearer&amp;quot; token in the headers:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
async def get_clan_details(clan):
    headers={b'Authorization': b'Bearer '+token.encode('ascii')}
&lt;/pre&gt;
&lt;p&gt;We want clan tags to be sent,
which will be strings.
Clan tags begin with &lt;tt class="docutils literal"&gt;#&lt;/tt&gt;,
so they must be quoted before they're put in URLs.
This is because &lt;tt class="docutils literal"&gt;#&lt;/tt&gt; has the special meaning &amp;quot;URL fragment&amp;quot;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
async def get_clan_details(clan):
     # ...
     clan = urllib.parse.quote(clan)
&lt;/pre&gt;
&lt;p&gt;The first step is to get the details of the clan, including the clan members:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
async def get_clan_details(clan):
     # ...
     res = await treq.get(&amp;quot;https://api.clashroyale.com/v1/clans/&amp;quot; + clan,
                          headers=headers)
&lt;/pre&gt;
&lt;p&gt;Notice that we have to await the
&lt;tt class="docutils literal"&gt;treq.get&lt;/tt&gt;
call.
We have to be explicit about when to wait and get information
since it is an asynchronous network call.
Just using the &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; syntax to call a &lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt; function
does not let us take full power of asynchronicity
(we will see how to do it later).&lt;/p&gt;
&lt;p&gt;Next,
after getting the headers,
we need to get the content.
The &lt;tt class="docutils literal"&gt;treq&lt;/tt&gt; library gives us a helper method that parses the JSON directly:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
async def get_clan_details(clan):
     # ...
     content = await res.json()
&lt;/pre&gt;
&lt;p&gt;The content includes some metadata about the clan,
which is not interesting for our current purposes,
and a &lt;tt class="docutils literal"&gt;memberList&lt;/tt&gt; field that contains the clan members.
Note that while it has some data about the players,
the current favorite card is not part of it.
It does include the unique &amp;quot;player tag&amp;quot; that we can use to
retrieve further data.&lt;/p&gt;
&lt;p&gt;We collect all player tags,
and,
since they also begin with &lt;tt class="docutils literal"&gt;#&lt;/tt&gt;,
we URL-quote them:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
async def get_clan_details(clan):
     # ...
     player_tags = [urllib.parse.quote(player['tag'])
                    for player in content['memberList']]
&lt;/pre&gt;
&lt;p&gt;Finally,
we come to the real power of treq and Twisted:
generating all requests for player data at once!
That can really speed up tasks like this one,
which queries an API over and over again.
In cases of APIs with rate-limiting, this can be problematic.&lt;/p&gt;
&lt;p&gt;There are times when we need to be considerate to our API owners
and not run up against any rate limits.
There are techniques to support rate-limiting explicitly in Twisted,
but they are beyond the scope of this post.
(One important tool is &lt;tt class="docutils literal"&gt;defer.DeferredSemaphore&lt;/tt&gt;.)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
async def get_clan_details(clan):
     # ...
     requests = [treq.get(&amp;quot;https://api.clashroyale.com/v1/players/&amp;quot; + tag,
                          headers=headers)
                 for tag in player_tags]
&lt;/pre&gt;
&lt;p&gt;Remember that requests do not return the JSON body directly.
Earlier,
we used &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; so that we did not have to worry about exactly what the
requests return.
They actually return a &lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt;.
A &lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt; can have an attached callback that
will modify the &lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt;.
If the callback returns a &lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt;,
the final value of the &lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt; will be
the value of the returned &lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;So, to each deferred, we attach a callback that will
retrieve the JSON of the body:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
async def get_clan_details(clan):
     # ...
     for request in requests:
         request.addCallback(lambda result: result.json())
&lt;/pre&gt;
&lt;p&gt;Attaching callbacks to
&lt;tt class="docutils literal"&gt;Deferreds&lt;/tt&gt;
is a more manual technique,
which makes code that is harder to follow but uses the async
features more efficiently.
Specifically,
because we are attaching all the callbacks at the same time,
we do not need to wait for the network calls,
which potentially can take a long time,
to indicate how to post-process the result.&lt;/p&gt;
&lt;p&gt;From Deferreds to values&lt;/p&gt;
&lt;p&gt;We cannot calculate the most popular favorite cards until all
results have been gathered.
We have a list of
&lt;tt class="docutils literal"&gt;Deferreds&lt;/tt&gt;,
but what we want is a
&lt;tt class="docutils literal"&gt;Deferred&lt;/tt&gt;
that gets a list value.
This inversion is exactly what the Twisted function
&lt;tt class="docutils literal"&gt;defer.gatherResults&lt;/tt&gt; does:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
async def get_clan_details(clan):
     # ...
     all_players = await defer.gatherResults(requests)
&lt;/pre&gt;
&lt;p&gt;This seemingly innocent call is where we use the full power of Twisted.
The
&lt;tt class="docutils literal"&gt;defer.gatherResults&lt;/tt&gt;
function immediately returns a deferred that will fire only when all the
constituent Deferreds have fired and will fire with the result.
It even gives us free error-handling:
if any of the
&lt;tt class="docutils literal"&gt;Deferreds&lt;/tt&gt;
error out,
it will immediately return a failed deferred,
which will cause the &lt;tt class="docutils literal"&gt;await&lt;/tt&gt; to raise an exception.&lt;/p&gt;
&lt;p&gt;Now that we have all the players' details,
we need to munch some data.
We get to use one of Python's coolest built-ins,
&lt;tt class="docutils literal"&gt;collections.Counter&lt;/tt&gt;.
This class takes a list of things and counts how many times
it has seen each thing,
which is exactly what we need for vote counting or popularity contests:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
async def get_clan_details(clan):
     # ...
     favorite_card = collections.Counter([player[&amp;quot;currentFavouriteCard&amp;quot;][&amp;quot;name&amp;quot;]
                                          for player in all_players])
&lt;/pre&gt;
&lt;p&gt;Finally, we print it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
async def get_clan_details(clan):
     # ...
     print(json.dumps(favorite_card.most_common(), indent=4))
&lt;/pre&gt;
&lt;p&gt;So, putting it all together, we have:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import collections, json, os, sys, urllib.parse
from twisted.internet import task, defer
import treq

with open(os.path.expanduser(&amp;quot;~/.crtoken&amp;quot;)) as fpin:
    token = fpin.read().strip()


async def get_clan_details(clan):
     headers = headers={b'Authorization': b'Bearer '+token.encode('ascii')}
     clan = urllib.parse.quote(clan)
     res = await treq.get(&amp;quot;https://api.clashroyale.com/v1/clans/&amp;quot; + clan,
                          headers=headers)
     content = await res.json()
     player_tags = [urllib.parse.quote(player['tag'])
                    for player in content['memberList']]
     requests = [treq.get(&amp;quot;https://api.clashroyale.com/v1/players/&amp;quot; + tag,
                          headers=headers)
                 for tag in player_tags]
     for request in requests:
         request.addCallback(lambda result: result.json())
     all_players = await defer.gatherResults(requests)
     favorite_card = collections.Counter([player[&amp;quot;currentFavouriteCard&amp;quot;][&amp;quot;name&amp;quot;]
                                          for player in all_players])
     print(json.dumps(favorite_card.most_common(), indent=4))

def main(reactor, clan):
    return defer.ensureDeferred(get_clan_details(clan))

task.react(main, sys.argv[1:])
&lt;/pre&gt;
&lt;p&gt;Thanks to the efficiency and expressive syntax of Twisted and &lt;tt class="docutils literal"&gt;treq&lt;/tt&gt;,
this is all the code we need to make asynchronous calls to an API.
If you were wondering about the outcome,
my clan's list of favorite cards is Wizard, Mega Knight, Valkyrie,
and Royal Giant,
in descending order.&lt;/p&gt;
&lt;p&gt;(This post is based on the article I wrote for
&lt;a class="reference external" href="https://opensource.com/article/20/3/treq-python"&gt;opensource.com&lt;/a&gt;)&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Comfort with Small Mistakes</title><link href="https://orbifold.xyz/small-mistakes.html" rel="alternate"></link><published>2020-04-04T22:20:00-07:00</published><updated>2020-04-04T22:20:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2020-04-04:/small-mistakes.html</id><summary type="html">&lt;p&gt;It has been a long time since I learned how to program,
and it is easy to forget some of the hard-won lessons in the beginning.
Easy until I try to teach people to program.
There is a lot of accidental and inherent complexity in programming,
but I am ready …&lt;/p&gt;</summary><content type="html">&lt;p&gt;It has been a long time since I learned how to program,
and it is easy to forget some of the hard-won lessons in the beginning.
Easy until I try to teach people to program.
There is a lot of accidental and inherent complexity in programming,
but I am ready for that:
I remember to explain how carefully to follow the syntax,
and the kind of syntactical gotchas that are easy to fail.&lt;/p&gt;
&lt;p&gt;But there is one metalesson that is much easier to forget,
and much harder to learn, and to teach.
Humans are used to small mistakes having reasonably small consequences.
But even in cases with catatrophic consequences,
the consequences &lt;em&gt;look&lt;/em&gt; related to the mistakes.&lt;/p&gt;
&lt;p&gt;However,
in programming,
small mistakes
can lead not just to
&lt;em&gt;big&lt;/em&gt;
consequences,
but to
&lt;em&gt;weird&lt;/em&gt;
consequences.
A missing comma might mean that things work fine in the testing environment,
but in production,
every third request gets a slightly wrong result.&lt;/p&gt;
&lt;p&gt;This
&lt;em&gt;really&lt;/em&gt;
stumps people.
They copy code somewhat imperfectly from the board,
or make a small mistake when they edit it to change
from
&lt;cite&gt;&amp;quot;Hello world&amp;quot;&lt;/cite&gt;
to
&lt;cite&gt;&amp;quot;Goodbye world&amp;quot;&lt;/cite&gt;,
and suddenly,
a completely unrelated part of the program starts going haywire.&lt;/p&gt;
&lt;p&gt;This happens to old hands too.
The number of times I have edited code and ran the tests,
only to discover a clearly unrelated test failing,
is not small.
The difference that comes with experience is that I take a deep breath,
think
&amp;quot;I've got this&amp;quot;,
and start down the troubleshooting path.&lt;/p&gt;
&lt;p&gt;The troubleshooting can include any number of things:
I might go in with a debugger,
add print statements,
do a bisect-diff to figure out what caused the problem,
try random things to see what happens,
or just trace the execution path carefully.&lt;/p&gt;
&lt;p&gt;The troubleshooting process does not matter as much as what comes before it:
the deep breath.
This is my time to accept the problem has happened,
and that I am in for a process which can take two hours,
and at the end of which my entire productivity will be
&amp;quot;added missing semicolon&amp;quot;.
Sometimes a breath is not enough,
and I need to get up and get some tea.
But the most important,
and almost invisible step,
at the beginning is to step back,
remember that this is,
weirdly,
part of the job,
and to become comfortable doing it.&lt;/p&gt;
&lt;p&gt;If you want to be any kind of software developer,
accept it now.
Much of your life will be seeing weird consequences,
and tracing it back to a small mistake.
Eventually,
like everyone,
you will succeed.
Flush with victory,
make a note of your success somewhere:
anywhere where the overhead of writing it is low,
be it an e-mail to yourself or a note-keeping app.&lt;/p&gt;
&lt;p&gt;If you ever decide to teach,
or write a blog,
this is an unending source of content.&lt;/p&gt;
&lt;p&gt;(Thanks to
&lt;a class="reference external" href="https://veronicahanus.com/"&gt;Veronica Hanus&lt;/a&gt;
for her feedback on an early draft.
All issues and mistakes that remain are my responsibility.)&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Or else:</title><link href="https://orbifold.xyz/or-else.html" rel="alternate"></link><published>2020-03-12T19:00:00-07:00</published><updated>2020-03-12T19:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2020-03-12:/or-else.html</id><summary type="html">&lt;p&gt;This was originally sent to my
&lt;a class="reference external" href="https://buttondown.email/moshez"&gt;newsletter&lt;/a&gt;.
I send one e-mail,
always about Python,
every other Sunday.
If this blog post interests you, consider subscribing.&lt;/p&gt;
&lt;p&gt;The underappreciated &lt;cite&gt;else&lt;/cite&gt; keyword in Python has three distinct uses.&lt;/p&gt;
&lt;div class="section" id="if-else"&gt;
&lt;h2&gt;if/else&lt;/h2&gt;
&lt;p&gt;On an &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; statement, &lt;tt class="docutils literal"&gt;else&lt;/tt&gt; will contain code that runs
if the condition …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;This was originally sent to my
&lt;a class="reference external" href="https://buttondown.email/moshez"&gt;newsletter&lt;/a&gt;.
I send one e-mail,
always about Python,
every other Sunday.
If this blog post interests you, consider subscribing.&lt;/p&gt;
&lt;p&gt;The underappreciated &lt;cite&gt;else&lt;/cite&gt; keyword in Python has three distinct uses.&lt;/p&gt;
&lt;div class="section" id="if-else"&gt;
&lt;h2&gt;if/else&lt;/h2&gt;
&lt;p&gt;On an &lt;tt class="docutils literal"&gt;if&lt;/tt&gt; statement, &lt;tt class="docutils literal"&gt;else&lt;/tt&gt; will contain code that runs
if the condition is false.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
if anonymize:
    print(&amp;quot;Hello world&amp;quot;)
else:
    print(&amp;quot;Hello, name&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;This is probably the least surprising use.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="loop-else"&gt;
&lt;h2&gt;loop/else&lt;/h2&gt;
&lt;p&gt;The easiest to explain is
&lt;tt class="docutils literal"&gt;while/else&lt;/tt&gt;:
it works the same as &lt;tt class="docutils literal"&gt;if/else&lt;/tt&gt;,
and runs when the condition is false.&lt;/p&gt;
&lt;p&gt;However,
it does
&lt;em&gt;not&lt;/em&gt;
run if the loop was broken out of using
&lt;tt class="docutils literal"&gt;break&lt;/tt&gt;
or an exception:
it serves as something that runs on normal loop termination.&lt;/p&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;for/else&lt;/tt&gt; functions in the same way:
it runs on normal loop termination,
and not if the loop was broken out of using a break.&lt;/p&gt;
&lt;p&gt;For example, searching for an odd element in a list:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
for x in numbers:
    if x % 2 == 1:
        print(&amp;quot;Found&amp;quot;, x)
        break
else:
    print(&amp;quot;No odd found&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;This is a powerful way to avoid sentinel values.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="try-except-else"&gt;
&lt;h2&gt;try/except/else&lt;/h2&gt;
&lt;p&gt;When writing code that might raise an exception,
we want to be able to catch it --
but we want to avoid catching unanticipated exceptions.
This means we want to protect as little code with
&lt;tt class="docutils literal"&gt;try&lt;/tt&gt; as possible,
but still have some code that runs only in the normal path.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
try:
    before, after = things
except ValueError:
    part1 = things[0]
    part2 = 0
    after = 0
else:
    part1, part2 = before
&lt;/pre&gt;
&lt;p&gt;This means that if
&lt;tt class="docutils literal"&gt;things&lt;/tt&gt;
does not have two items,
this is a valid case we can recover from.
However,
if it does have two items,
the first one must also have two items.
If this is not the case,
this snippet will raise &lt;tt class="docutils literal"&gt;ValueError&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Forks and Threats</title><link href="https://orbifold.xyz/forks-and-threats.html" rel="alternate"></link><published>2020-02-19T20:00:00-08:00</published><updated>2020-02-19T20:00:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2020-02-19:/forks-and-threats.html</id><summary type="html">&lt;p&gt;What is a threat?
From a game-theoretical perspective,
a threat is an attempt to get a better result by saying:
&amp;quot;if you do not give me this result,
I will do something that is bad &lt;em&gt;for both of us&lt;/em&gt;&amp;quot;.
Note that it has to be bad for both sides:
if …&lt;/p&gt;</summary><content type="html">&lt;p&gt;What is a threat?
From a game-theoretical perspective,
a threat is an attempt to get a better result by saying:
&amp;quot;if you do not give me this result,
I will do something that is bad &lt;em&gt;for both of us&lt;/em&gt;&amp;quot;.
Note that it has to be bad for both sides:
if it is
&lt;em&gt;good&lt;/em&gt;
for the threatening side,
they would do it anyway.
While if it is
&lt;em&gt;good&lt;/em&gt;
for the threatened side,
it is not a threat.&lt;/p&gt;
&lt;p&gt;Threats rely on
&lt;em&gt;credibility&lt;/em&gt; and &lt;em&gt;reputation&lt;/em&gt;:
the threatening side has to be believed for the threat to be useful.
One way to gain that reputation is to follow up on threats,
and have that be a matter of public record.
This means that the threatening side needs to take into account
that they might have to act on the threat,
thereby doing something
&lt;em&gt;against their own interests&lt;/em&gt;.
This leads to the concept of a
&amp;quot;credible&amp;quot;
or
&amp;quot;proportionate&amp;quot;
threat.&lt;/p&gt;
&lt;p&gt;For most of our analysis,
we will use the example of a teacher union striking.
Similar analysis can be applied to nuclear war,
or other cases.
People mostly have positive feelings for teachers,
and when teacher unions negotiate,
they want to take advantage of those feelings.
However,
the one thing that leads people to be annoyed with teachers
is a strike:
this causes large amounts of unplanned scheduling crisis in people's lives.&lt;/p&gt;
&lt;p&gt;In our example,
a teacher union striking over,
say,
a minor salary raise disagreement is not
credible:
the potential harm is small,
while the strike will significantly harm the teachers'
image.&lt;/p&gt;
&lt;p&gt;However,
strikes are,
to a first approximation,
the only tool teacher unions have in their arsenal.
Again,
take the case of a minor salary raise.
Threatening with a strike is so disproportional
that there is no credibility.
We turn to one of the fundamental insights of game theory:
rational actors treat
&lt;em&gt;utility&lt;/em&gt;
as
&lt;em&gt;linear&lt;/em&gt;
in probability.
So,
while starting a strike that is twice as long is
&lt;em&gt;not&lt;/em&gt;
twice as bad,
increasing the probability of starting a strike
from
&lt;em&gt;0&lt;/em&gt;
to
&lt;em&gt;1&lt;/em&gt;
is twice as bad
(exactly!)
as increasing the probability from
&lt;em&gt;0&lt;/em&gt;
to
&lt;em&gt;0.5&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;(If you are a Bayesian who does not believe in 0 and 1 as probabilities,
note that the argument works with approximations too:
increasing the probability from a small &lt;em&gt;e&lt;/em&gt; to &lt;em&gt;0.5&lt;/em&gt; is approximately
twice as bad as increasing it from &lt;em&gt;e&lt;/em&gt; to &lt;em&gt;1-e&lt;/em&gt;.)&lt;/p&gt;
&lt;p&gt;All one side has is a strike.
Assume the disutility of a strike to that side is
-1,000,000.
Assume the utility of winning the salary negotiation is 1.
They can threaten that if their position is not accepted,
they will generate a random number,
and if it is below &lt;em&gt;1/1,000,000&lt;/em&gt;,
they will start the strike.
Now the threat is
&lt;em&gt;credible&lt;/em&gt;.
But to be gain that reputation,
this number has to be generated in public,
in an uncertain way:
otherwise,
no reputation is gained for following up on threats.&lt;/p&gt;
&lt;p&gt;In practice,
usually the randomness is generated by
&amp;quot;inflaming the base&amp;quot;.
The person in charge will give impassioned speeches on how important
this negotiation is.
With some probability,
their base will pressure them to start the strike,
without them being able to resist it.&lt;/p&gt;
&lt;p&gt;Specifically,
note that often a strike is determined by a direct vote of the members,
not the union leaders.
This means that union leaders can credibly say,
&amp;quot;please do not vote for the strike, we are against it&amp;quot;.
With some probability,
that depends on how much they inflamed the base,
the membership will ignore the request.
The more impassioned the speech,
the higher the probability.
By limiting their direct control over the decision to strike,
union leaders gain the ability to threaten probabilistically.&lt;/p&gt;
&lt;p&gt;Nuclear war and union strikes are both well-studied topics in
applied game theory.
The explanation above is a standard part of many text books:
in my case,
I summarized the explanation
from
&lt;a class="reference external" href="https://www.macmillanlearning.com/college/us/product/Games-Strategies-and-Decision-Making/p/1429239964"&gt;Games of Strategy&lt;/a&gt;, pg. 487.&lt;/p&gt;
&lt;p&gt;What is not well studied are the dynamics of open source projects.
There,
we have a set of owners who can directly influence such decisions
as which patches land,
and when versions are released.
More people will offer patches,
or ask for a release to happen.
The only credible threat they have is to fork the project
if they do not like how it is managed.
But forking is often a disproportinate threat:
a patch not landing often just means an ugly work-around in user code.
There is a cost,
but the cost of maintaining a fork is much greater.&lt;/p&gt;
&lt;p&gt;But similar to a union strike,
or launching a nuclear war,
we can consider a
&amp;quot;probabilistic fork&amp;quot;.
Rant on twitter,
or appropriate mailing lists.
Link to the discussion,
especially to places which make the owners not in the best light.
Someone might decide to
&amp;quot;rage-fork&amp;quot;.
More rants,
or more extreme rants,
increase the probability.
A fork has to be possible in the first place:
this is why the best way to evaluate whether something is open source
is to consider
&amp;quot;how possible is a fork&amp;quot;.&lt;/p&gt;
&lt;p&gt;This is why the
&lt;em&gt;possibility&lt;/em&gt;
of a fork changes the dynamics of a project,
even if forks are rare:
because the main thing that happens are
&amp;quot;low-probability maybe-forks&amp;quot;.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Meditations on the Zen of Python</title><link href="https://orbifold.xyz/zen-of-python.html" rel="alternate"></link><published>2019-12-30T22:30:00-08:00</published><updated>2019-12-30T22:30:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2019-12-30:/zen-of-python.html</id><summary type="html">&lt;p&gt;(This is based on the series published in opensource.com as
9 articles:
&lt;a class="reference external" href="https://opensource.com/article/19/12/zen-python-beauty-clarity"&gt;1&lt;/a&gt;, &lt;a class="reference external" href="https://opensource.com/article/19/12/zen-python-simplicity-complexity"&gt;2&lt;/a&gt;, &lt;a class="reference external" href="https://opensource.com/article/19/12/zen-python-flat-sparse"&gt;3&lt;/a&gt;, &lt;a class="reference external" href="https://opensource.com/article/19/12/zen-python-trade-offs"&gt;4&lt;/a&gt;, &lt;a class="reference external" href="https://opensource.com/article/19/12/zen-python-errors"&gt;5&lt;/a&gt;, &lt;a class="reference external" href="https://opensource.com/article/19/12/zen-python-consistency"&gt;6&lt;/a&gt;, &lt;a class="reference external" href="https://opensource.com/article/19/12/zen-python-timeliness"&gt;7&lt;/a&gt;, &lt;a class="reference external" href="https://opensource.com/article/19/12/zen-python-implementation"&gt;8&lt;/a&gt;, &lt;a class="reference external" href="https://opensource.com/article/19/12/zen-python-namespaces"&gt;9&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Python contributor Tim Peters introduced us to the
&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0020/"&gt;Zen of Python&lt;/a&gt;
in 1999.
Twenty years later,
its 19 guiding principles continue to be relevant within the community.&lt;/p&gt;
&lt;p&gt;The …&lt;/p&gt;</summary><content type="html">&lt;p&gt;(This is based on the series published in opensource.com as
9 articles:
&lt;a class="reference external" href="https://opensource.com/article/19/12/zen-python-beauty-clarity"&gt;1&lt;/a&gt;, &lt;a class="reference external" href="https://opensource.com/article/19/12/zen-python-simplicity-complexity"&gt;2&lt;/a&gt;, &lt;a class="reference external" href="https://opensource.com/article/19/12/zen-python-flat-sparse"&gt;3&lt;/a&gt;, &lt;a class="reference external" href="https://opensource.com/article/19/12/zen-python-trade-offs"&gt;4&lt;/a&gt;, &lt;a class="reference external" href="https://opensource.com/article/19/12/zen-python-errors"&gt;5&lt;/a&gt;, &lt;a class="reference external" href="https://opensource.com/article/19/12/zen-python-consistency"&gt;6&lt;/a&gt;, &lt;a class="reference external" href="https://opensource.com/article/19/12/zen-python-timeliness"&gt;7&lt;/a&gt;, &lt;a class="reference external" href="https://opensource.com/article/19/12/zen-python-implementation"&gt;8&lt;/a&gt;, &lt;a class="reference external" href="https://opensource.com/article/19/12/zen-python-namespaces"&gt;9&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Python contributor Tim Peters introduced us to the
&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0020/"&gt;Zen of Python&lt;/a&gt;
in 1999.
Twenty years later,
its 19 guiding principles continue to be relevant within the community.&lt;/p&gt;
&lt;p&gt;The Zen of Python is not
&amp;quot;the rules of Python&amp;quot;
or
&amp;quot;guidelines of Python&amp;quot;.
It is full of contradiction and allusion.
It is not intended to be
&lt;em&gt;followed&lt;/em&gt;:
it is intended to be meditated upon.&lt;/p&gt;
&lt;p&gt;In this spirit,
I offer this series of meditations on the Zen of Python.&lt;/p&gt;
&lt;div class="section" id="beautiful-is-better-than-ugly"&gt;
&lt;h2&gt;Beautiful is better than ugly.&lt;/h2&gt;
&lt;p&gt;It was in
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs"&gt;Structure and Interpretation of Computer Programs&lt;/a&gt;
(SICP)
that the point was made:
&amp;quot;Programs must be written for people to read and
only incidentally for machines to execute.&amp;quot;
Machines do not care about beauty,
but people do.&lt;/p&gt;
&lt;p&gt;A beautiful program is one that is enjoyable to read.
This means first that it is consistent.
Tools like
&lt;a class="reference external" href="https://opensource.com/article/19/5/python-black"&gt;Black&lt;/a&gt;,
&lt;a class="reference external" href="https://opensource.com/article/19/5/python-flake8"&gt;flake8&lt;/a&gt;, and
&lt;a class="reference external" href="https://opensource.com/article/19/10/python-pylint-introduction"&gt;Pylint&lt;/a&gt; are great for making sure things are reasonable on a surface layer.&lt;/p&gt;
&lt;p&gt;But even more important,
only humans can judge what humans find beautiful.
Code reviews and a collaborative approach to writing code
are the only realistic way to build beautiful code.
Listening to other people is an important skill in software development.&lt;/p&gt;
&lt;p&gt;Finally,
all the tools and processes are moot if the will is not there.
Without an appreciation for the importance of beauty,
there will never be an emphasis on writing beautiful code.&lt;/p&gt;
&lt;p&gt;This is why this is the first principle:
it is a way of making &amp;quot;beauty&amp;quot; a value in the Python community.
It immediately answers:
&amp;quot;Do we really care about beauty?&amp;quot;
We do.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="explicit-is-better-than-implicit"&gt;
&lt;h2&gt;Explicit is better than implicit.&lt;/h2&gt;
&lt;p&gt;We humans celebrate light and fear the dark.
Light helps us make sense of vague images.
In the same way,
programming with more explicitness helps us make sense of abstract ideas.
It is often tempting to make things implicit.&lt;/p&gt;
&lt;p&gt;&amp;quot;Why is
&lt;tt class="docutils literal"&gt;self&lt;/tt&gt;
explicitly there as the first parameter of methods?&amp;quot;&lt;/p&gt;
&lt;p&gt;There are many technical explanations,
but all of them are wrong.
It is almost a Python programmer's rite of passage to write a metaclass
that makes explicitly listing self unnecessary.
(If you have never done this before, do so;
it makes a great metaclass learning exercise!)&lt;/p&gt;
&lt;p&gt;The reason self is explicit is not because the Python core developers
did not want to make a metaclass like that the &amp;quot;default&amp;quot; metaclass.
The reason it is explicit is because there is one less special case to teach:
the first argument is explicit.&lt;/p&gt;
&lt;p&gt;Even when Python does allow non-explicit things,
such as context variables,
we must always ask:
Are we sure we need them?
Could we not just pass arguments explicitly?
Sometimes,
for many reasons,
this is not feasible.
But prioritizing explicitness means,
at least,
asking the question and estimating the effort.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="simple-is-better-than-complex"&gt;
&lt;h2&gt;Simple is better than complex.&lt;/h2&gt;
&lt;p&gt;When it is possible to choose at all,
choose the simple solution.
Python is rarely in the business of disallowing things.
This means it is possible,
and even straightforward,
to design baroque programs to solve straightforward problems.&lt;/p&gt;
&lt;p&gt;It is worthwhile to remember at each point that simplicity is
one of the easiest things to lose and the hardest to regain when writing code.&lt;/p&gt;
&lt;p&gt;This can mean choosing to write something as a function,
rather than introducing an extraneous class.
This can mean avoiding a robust third-party library in favor of writing a
two-line function that is perfect for the immediate use-case.
Most often,
it means avoiding predicting the future in favor of solving the problem at hand.&lt;/p&gt;
&lt;p&gt;It is much easier to change the program later,
especially if simplicity and beauty were among its guiding principles,
than to load the code down with all possible future variations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="complex-is-better-than-complicated"&gt;
&lt;h2&gt;Complex is better than complicated.&lt;/h2&gt;
&lt;p&gt;This is possibly the most misunderstood principle because
understanding the precise meanings of the words is crucial.
Something is &lt;em&gt;complex&lt;/em&gt; when it is composed of multiple parts.
Something is &lt;em&gt;complicated&lt;/em&gt; when it has a lot of different,
often hard to predict,
behaviors.&lt;/p&gt;
&lt;p&gt;When solving a hard problem,
it is often the case that no simple solution will do.
In that case,
the most Pythonic strategy is to go
&amp;quot;bottom-up.&amp;quot;
Build simple tools and combine them to solve the problem.&lt;/p&gt;
&lt;p&gt;This is where techniques like object composition shine.
Instead of having a complicated inheritance hierarchy,
have objects that forward some method calls to a separate object.
Each of those can be tested and developed separately and then finally
put together.&lt;/p&gt;
&lt;p&gt;Another example of
&amp;quot;building up&amp;quot;
is using
&lt;a class="reference external" href="https://opensource.com/article/19/5/python-singledispatch"&gt;singledispatch&lt;/a&gt;,
so that instead of one complicated object,
we have a simple,
mostly behavior-less object and separate behaviors.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="flat-is-better-than-nested"&gt;
&lt;h2&gt;Flat is better than nested.&lt;/h2&gt;
&lt;p&gt;Nowhere is the pressure to be
&amp;quot;flat&amp;quot;
more obvious than in Python's strong insistence on indentation.
Other languages will often introduce an implementation that
&amp;quot;cheats&amp;quot;
on the nested structure by reducing indentation requirements.
To appreciate this point, let's take a look at JavaScript.&lt;/p&gt;
&lt;p&gt;JavaScript is natively async,
which means that programmers write code in JavaScript using a lot of callbacks.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
a(function(resultsFromA) {
  b(resultsFromA, function(resultsfromB) {
    c(resultsFromC, function(resultsFromC) {
      console.log(resultsFromC)
   }
  }
}
&lt;/pre&gt;
&lt;p&gt;Ignoring the code,
observe the pattern and the way indentation leads to a right-most point.
This distinctive
&amp;quot;arrow&amp;quot;
shape is tough on the eye to quickly walk through the code,
so it's seen as undesirable and even nicknamed
&amp;quot;callback hell.&amp;quot;
However,
in JavaScript,
it is possible to
&amp;quot;cheat&amp;quot;
and not have indentation reflect nesting.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
a(function(resultsFromA) {
b(resultsFromA,
  function(resultsfromB) {
c(resultsFromC,
  function(resultsFromC) {
    console.log(resultsFromC)
}}}
&lt;/pre&gt;
&lt;p&gt;Python affords no such options to cheat:
every nesting level in the program must be reflected in the indentation level.
So deep nesting in Python looks deeply nested.
That means
&amp;quot;callback hell&amp;quot;
was a worse problem in Python than in JavaScript:
nesting callbacks mean indenting with no options to
&amp;quot;cheat&amp;quot;
with braces.&lt;/p&gt;
&lt;p&gt;This challenge,
in combination with the Zen principle,
has led to an elegant solution by a library I worked on.
In the Twisted framework,
we came up with the deferred abstraction,
which would later inspire the popular JavaScript promise abstraction.
In this way,
Python's unwavering commitment to clear code forces
Python developers to discover new, powerful abstractions.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
future_value = future_result()
future_value.addCallback(a)
future_value.addCallback(b)
future_value.addCallback(c)
&lt;/pre&gt;
&lt;p&gt;(This might look familiar to modern JavaScript programmers:
Promises were heavily influenced by Twisted's deferreds.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="sparse-is-better-than-dense"&gt;
&lt;h2&gt;Sparse is better than dense.&lt;/h2&gt;
&lt;p&gt;The easiest way to make something less dense is to introduce nesting.
This habit is why the principle of sparseness follows the previous one:
after we have reduced nesting as much as possible,
we are often left with dense code or data structures.
Density,
in this sense,
is jamming too much information into a small amount of code,
making it difficult to decipher when something goes wrong.&lt;/p&gt;
&lt;p&gt;Reducing that denseness requires creative thinking,
and there are no simple solutions.
The Zen of Python does not offer simple solutions.
All it offers are ways to find what can be improved in the code,
without always giving guidance for &amp;quot;how.&amp;quot;&lt;/p&gt;
&lt;p&gt;Take a walk.
Take a shower.
Smell the flowers.
Sit in a lotus position and think hard,
until finally,
inspiration strikes.
When you are finally enlightened,
it is time to write the code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="readability-counts"&gt;
&lt;h2&gt;Readability counts.&lt;/h2&gt;
&lt;p&gt;In some sense,
this middle principle is indeed the center of the entire Zen of Python.
The Zen is not about writing efficient programs.
It is not even about writing robust programs,
for the most part.
It is about writing programs that other people can read.&lt;/p&gt;
&lt;p&gt;Reading code,
by its nature,
happens after the code has been added to the system.
Often,
it happens long after.
Neglecting readability is the easiest choice since it does not hurt right now.
Whatever the reason for adding new code --
a painful bug or a highly requested feature --
it does hurt.
Right now.&lt;/p&gt;
&lt;p&gt;In the face of immense pressure to throw readability to the side and just
&amp;quot;solve the problem,&amp;quot;
the Zen of Python reminds us:
readability counts.
Writing the code so it can be read is a form of
compassion for yourself and others.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="special-cases-aren-t-special-enough-to-break-the-rules"&gt;
&lt;h2&gt;Special cases aren't special enough to break the rules.&lt;/h2&gt;
&lt;p&gt;There is always an excuse.
This bug is particularly painful;
let's not worry about simplicity.
This feature is particularly urgent;
let's not worry about beauty.
The domain rules covering this case are particularly hairy;
let's not worry about nesting levels.&lt;/p&gt;
&lt;p&gt;Once we allow special pleading,
the dam wall breaks,
and there are no more principles;
things devolve into a Mad Max dystopia with every programmer for themselves,
trying to find the best excuses.&lt;/p&gt;
&lt;p&gt;Discipline requires commitment.
It is only when things are hard,
when there is a strong temptation,
that a software developer is tested.
There is always a valid excuse to break the rules,
and that's why the rules must be kept the rules.
Discipline is the art of saying no to exceptions.
No amount of explanation can change that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="although-practicality-beats-purity"&gt;
&lt;h2&gt;Although, practicality beats purity.&lt;/h2&gt;
&lt;p&gt;&amp;quot;If you think only of hitting, springing, striking, or touching the enemy, you will not be able actually to cut him.&amp;quot;,
Miyamoto Musashi,
The Book of Water&lt;/p&gt;
&lt;p&gt;Ultimately, software development is a practical discipline.
Its goal is to solve real problems,
faced by real people.
Practicality beats purity:
above all else,
we must solve the problem.
If we think only about readability,
simplicity,
or beauty,
we will not be able to actually solve the problem.&lt;/p&gt;
&lt;p&gt;As Musashi suggested,
the primary goal of every code change should be to solve a problem.
The problem must be foremost in our minds.
If we waver from it and think only of the Zen of Python,
we have failed the Zen of Python.
This is another one of those contradictions inherent in the Zen of Python.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="errors-should-never-pass-silently"&gt;
&lt;h2&gt;Errors should never pass silently...&lt;/h2&gt;
&lt;p&gt;Before the Zen of Python was a twinkle in Tim Peters' eye,
before Wikipedia became informally known as &amp;quot;wiki,&amp;quot;
the first WikiWiki site,
&lt;a class="reference external" href="https://wiki.c2.com/"&gt;C2&lt;/a&gt;,
existed as a trove of programming guidelines.
These are principles that mostly came out of a Smalltalk programming community. Smalltalk's ideas influenced many object-oriented languages,
Python included.&lt;/p&gt;
&lt;p&gt;The C2 wiki defines the Samurai Principle:
&amp;quot;return victorious, or not at all.&amp;quot;
In Pythonic terms,
it encourages eschewing sentinel values,
such as returning
&lt;tt class="docutils literal"&gt;None&lt;/tt&gt; or
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;-1&lt;/span&gt;&lt;/tt&gt; to indicate an inability to complete the task,
in favor of raising exceptions.
A &lt;tt class="docutils literal"&gt;None&lt;/tt&gt; is silent:
it looks like a value and can be put in a variable and passed around.
Sometimes,
it is even a valid return value.&lt;/p&gt;
&lt;p&gt;The principle here is that if a function cannot accomplish its contract,
it should
&amp;quot;fail loudly&amp;quot;:
raise an exception.
The raised exception will never look like a possible value.
It will skip past the
&lt;tt class="docutils literal"&gt;returned_value = call_to_function(parameter)&lt;/tt&gt;
line and go up the stack,
potentially crashing the program.&lt;/p&gt;
&lt;p&gt;A crash is straightforward to debug:
there is a stack trace indicating the problem as well as the call stack.
The failure might mean that a necessary condition for the program was not met,
and human intervention is needed.
It might mean that the program's logic is faulty.
In either case,
the loud failure is better than a hidden,
&amp;quot;missing&amp;quot; value,
infecting the program's valid data with
&lt;tt class="docutils literal"&gt;None&lt;/tt&gt;,
until it is used somewhere and an error message says
&amp;quot;&lt;tt class="docutils literal"&gt;None does not have method split&lt;/tt&gt;,&amp;quot;
which you probably already knew.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="unless-explicitly-silenced"&gt;
&lt;h2&gt;Unless explicitly silenced.&lt;/h2&gt;
&lt;p&gt;Exceptions sometimes need to be explicitly caught.
We might anticipate some of the lines in a file are misformatted and
want to handle those in a special way,
maybe by putting them in a
&amp;quot;lines to be looked at by a human&amp;quot;
file,
instead of crashing the entire program.&lt;/p&gt;
&lt;p&gt;Python allows us to catch exceptions with &lt;tt class="docutils literal"&gt;except&lt;/tt&gt;.
This means errors can be explicitly silenced.
This explicitness means that the &lt;tt class="docutils literal"&gt;except&lt;/tt&gt; line is visible in code reviews.
It makes sense to question why this is the right place to silence,
and potentially recover from,
the exception.
It makes sense to ask if we are catching too many exceptions or too few.&lt;/p&gt;
&lt;p&gt;Because this is all explicit,
it is possible for someone to read the code and understand
which exceptional conditions are recoverable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="in-the-face-of-ambiguity-refuse-the-temptation-to-guess"&gt;
&lt;h2&gt;In the face of ambiguity, refuse the temptation to guess.&lt;/h2&gt;
&lt;p&gt;What should the result of
&lt;tt class="docutils literal"&gt;1 + &amp;quot;1&amp;quot;&lt;/tt&gt; be?
Both
&lt;tt class="docutils literal"&gt;&amp;quot;11&amp;quot;&lt;/tt&gt;
and
&lt;tt class="docutils literal"&gt;2&lt;/tt&gt;
would be valid guesses.
This expression is ambiguous:
there is no single thing it can do that would not be a surprise to at
least some people.&lt;/p&gt;
&lt;p&gt;Some languages choose to guess.
In JavaScript,
the result is
&lt;tt class="docutils literal"&gt;&amp;quot;11&amp;quot;&lt;/tt&gt;.
In Perl,
the result is
&lt;tt class="docutils literal"&gt;2&lt;/tt&gt;.
In C, naturally, the result is the empty string.
In the face of ambiguity, JavaScript, Perl, and C all guess.&lt;/p&gt;
&lt;p&gt;In Python,
this raises a
&lt;tt class="docutils literal"&gt;TypeError&lt;/tt&gt;:
an error that is not silent.
It is atypical to catch
&lt;tt class="docutils literal"&gt;TypeError&lt;/tt&gt;:
it will usually terminate the program or at least the current task
(for example,
in most web frameworks,
it will terminate the handling of the current request).&lt;/p&gt;
&lt;p&gt;Python refuses to guess what
&lt;tt class="docutils literal"&gt;1 + &amp;quot;1&amp;quot;&lt;/tt&gt;
means.
The programmer is forced to write code with clear intention:
either
&lt;tt class="docutils literal"&gt;1 + &lt;span class="pre"&gt;int(&amp;quot;1&amp;quot;)&lt;/span&gt;&lt;/tt&gt;,
which would be
&lt;tt class="docutils literal"&gt;2&lt;/tt&gt;
or
&lt;tt class="docutils literal"&gt;str(1) + &amp;quot;1&amp;quot;&lt;/tt&gt;,
which would be
&lt;tt class="docutils literal"&gt;&amp;quot;11&amp;quot;&lt;/tt&gt;; or
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;&amp;quot;1&amp;quot;[1:]&lt;/span&gt;&lt;/tt&gt;,
which would be an empty string.
By refusing to guess,
Python makes programs more predictable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="there-should-be-one-and-preferably-only-one-obvious-way-to-do-it"&gt;
&lt;h2&gt;There should be one -- and preferably only one -- obvious way to do it.&lt;/h2&gt;
&lt;p&gt;Prediction also goes the other way.
Given a task,
can you predict the code that will be written to achieve it?
It is impossible,
of course,
to predict perfectly.
Programming,
after all,
is a creative task.&lt;/p&gt;
&lt;p&gt;However,
there is no reason to intentionally provide multiple,
redundant ways to achieve the same thing.
There is a sense in which some solutions are
&amp;quot;better&amp;quot;
or
&amp;quot;more Pythonic.&amp;quot;&lt;/p&gt;
&lt;p&gt;Part of the appreciation for the Pythonic aesthetic is that it is OK to have
healthy debates about which solution is better.
It is even OK to disagree and keep programming.
It is even OK to agree to disagree for the sake of harmony.
But beneath it all,
there has to be a feeling that,
eventually,
the right solution will come to light.
There must be the hope that eventually we can live in true harmony by
agreeing on the best way to achieve a goal.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="although-that-way-may-not-be-obvious-at-first-unless-you-re-dutch"&gt;
&lt;h2&gt;Although that way may not be obvious at first (unless you're Dutch).&lt;/h2&gt;
&lt;p&gt;This is an important caveat:
It is often not obvious,
at first,
what is the best way to achieve a task.
Ideas are evolving.
Python is evolving.
The best way to read a file block-by-block is,
probably,
to wait until Python 3.8 and use the walrus operator.&lt;/p&gt;
&lt;p&gt;This common task,
reading a file block-by-block,
did not have a
&amp;quot;single best way to do it&amp;quot;
for almost 30 years of Python's existence.&lt;/p&gt;
&lt;p&gt;When I started using Python in 1998 with Python 1.5.2,
there was no single best way to read a file line-by-line.
For many years,
the best way to know if a dictionary had a key was to use
&lt;tt class="docutils literal"&gt;.haskey&lt;/tt&gt;
until the
&lt;tt class="docutils literal"&gt;in&lt;/tt&gt;
operator became the best way.&lt;/p&gt;
&lt;p&gt;It is only by appreciating that sometimes,
finding the one
(and only one)
way of achieving a goal can take 30 years of trying out alternatives
that Python can keep aiming to find those ways.
This view of history,
where 30 years is an acceptable time for something to take,
often feels foreign to people in the United States,
when the country has existed for just over 200 years.&lt;/p&gt;
&lt;p&gt;The Dutch,
whether it's Python creator Guido van Rossum or
famous computer scientist Edsger W. Dijkstra,
have a different worldview according to this part of the Zen of Python.
A certain European appreciation for time is essential.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="now-is-better-than-never"&gt;
&lt;h2&gt;Now is better than never.&lt;/h2&gt;
&lt;p&gt;There is always the temptation to delay things until they are perfect.
They will never be perfect,
though.
When they look &amp;quot;ready&amp;quot; enough,
that is when it is time to take the plunge and put them out there.
Ultimately,
a change always happens at
&lt;em&gt;some&lt;/em&gt;
now:
the only thing that delaying does is move it to a future person's
&amp;quot;now.&amp;quot;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="although-never-is-often-better-than-right-now"&gt;
&lt;h2&gt;Although never is often better than right now.&lt;/h2&gt;
&lt;p&gt;This,
however,
does not mean things should be rushed.
Decide the criteria for release in terms of testing,
documentation,
user feedback,
and so on.
&amp;quot;Right now,&amp;quot;
as in before the change is ready,
is not a good time.&lt;/p&gt;
&lt;p&gt;This is a good lesson not just for popular languages like Python,
but also for your personal little open source project.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="if-the-implementation-is-hard-to-explain-it-s-a-bad-idea"&gt;
&lt;h2&gt;If the implementation is hard to explain, it's a bad idea.&lt;/h2&gt;
&lt;p&gt;The most important thing about programming languages is predictability.
Sometimes we explain the semantics of a certain construct in terms of abstract
programming models,
which do not correspond exactly to the implementation.
However,
the best of all explanations just explains the implementation.&lt;/p&gt;
&lt;p&gt;If the implementation is hard to explain,
it means the avenue is impossible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="if-the-implementation-is-easy-to-explain-it-may-be-a-good-idea"&gt;
&lt;h2&gt;If the implementation is easy to explain, it may be a good idea.&lt;/h2&gt;
&lt;p&gt;Just because something is easy does not mean it is worthwhile.
However,
once it is explained,
it is much easier to judge whether it is a good idea.&lt;/p&gt;
&lt;p&gt;This is why the second half of this principle intentionally equivocates:
nothing is certain to be a good idea,
but it always allows people to have that discussion.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="namespaces-in-python"&gt;
&lt;h2&gt;Namespaces in Python&lt;/h2&gt;
&lt;p&gt;Python uses namespaces for everything.
Though simple,
they are sparse data structures --
which is often the best way to achieve a goal.&lt;/p&gt;
&lt;p&gt;Modules are namespaces.
This means that correctly predicting module semantics often just requires
familiarity with how Python namespaces work.
Classes are namespaces.
Objects are namespaces.
Functions have access to their local namespace,
their parent namespace,
and the global namespace.&lt;/p&gt;
&lt;p&gt;The simple model,
where the
&lt;tt class="docutils literal"&gt;.&lt;/tt&gt; operator accesses an object,
which in turn will usually,
but not always,
do some sort of dictionary lookup,
makes Python hard to optimize,
but easy to explain.&lt;/p&gt;
&lt;p&gt;Indeed,
some third-party modules take this guideline and run with it.
For example, the
&lt;a class="reference external" href="https://pypi.org/project/variants/"&gt;variants&lt;/a&gt; package turns functions into namespaces of
&amp;quot;related functionality.&amp;quot;
It is a good example of how the Zen of Python can inspire new abstractions.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Precise Unit Tests with PyHamcrest</title><link href="https://orbifold.xyz/pyhamcrest.html" rel="alternate"></link><published>2019-12-17T21:00:00-08:00</published><updated>2019-12-17T21:00:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2019-12-17:/pyhamcrest.html</id><summary type="html">&lt;p&gt;(This is based on my article on &lt;a class="reference external" href="https://opensource.com/article/18/8/robust-unit-tests-hamcrest"&gt;opensource.com&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Unit test suites help maintain high-quality products by signaling problems
early in the development process.
An effective unit test catches bugs before the code has left the
developer machine,
or at least in a continuous integration environment on a dedicated branch …&lt;/p&gt;</summary><content type="html">&lt;p&gt;(This is based on my article on &lt;a class="reference external" href="https://opensource.com/article/18/8/robust-unit-tests-hamcrest"&gt;opensource.com&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Unit test suites help maintain high-quality products by signaling problems
early in the development process.
An effective unit test catches bugs before the code has left the
developer machine,
or at least in a continuous integration environment on a dedicated branch.
This marks the difference between good and bad unit tests:
good tests increase developer productivity by catching bugs early
and making testing faster.
Bad tests decrease developer productivity.&lt;/p&gt;
&lt;p&gt;Productivity decreases when testing incidental features.
The test fails when the code changes,
even if it is still correct.
This happens because the output is different,
but in a way that is not part of the function's contract.&lt;/p&gt;
&lt;p&gt;A good unit test,
therefore,
is one that helps enforce the contract to which the function is committed.&lt;/p&gt;
&lt;p&gt;If a good unit test breaks,
the contract is violated and should be either explicitly amended
(by changing the documentation and tests),
or fixed
(by fixing the code and leaving the tests as is).&lt;/p&gt;
&lt;p&gt;A good unit test is also
&lt;em&gt;strict&lt;/em&gt;.
It does its best to ensure the output is valid.
This helps it catch more bugs.&lt;/p&gt;
&lt;p&gt;While limiting tests to enforce only the public contract is a complicated
skill to learn, there are tools that can help.&lt;/p&gt;
&lt;p&gt;One of these tools is &lt;a class="reference external" href="http://hamcrest.org/"&gt;Hamcrest&lt;/a&gt;,
a framework for writing assertions.
Originally invented for Java-based unit tests,
today the Hamcrest framework supports several languages,
including &lt;a class="reference external" href="https://pyhamcrest.readthedocs.io/en/release-1.8/"&gt;Python&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hamcrest is designed to make test assertions easier to write and more precise.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def add(a, b):
    return a + b

from hamcrest import assert_that, equal_to

def test_add():
    assert_that(add(2, 2), equal_to(4))
&lt;/pre&gt;
&lt;p&gt;This is a simple assertion,
for simple functionality.
What if we wanted to assert something more complicated?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def test_set_removal():
    my_set = {1, 2, 3, 4}
    my_set.remove(3)
    assert_that(my_set, contains_inanyorder([1, 2, 4]))
    assert_that(my_set, is_not(has_item(3)))
&lt;/pre&gt;
&lt;p&gt;Note that we can succinctly assert that the result has 1, 2, and 4 in any order since sets do not guarantee order.&lt;/p&gt;
&lt;p&gt;We also easily negate assertions with &lt;tt class="docutils literal"&gt;is_not&lt;/tt&gt;.
This helps us write precise assertions,
which allow us to limit ourselves to enforcing public contracts of functions.&lt;/p&gt;
&lt;p&gt;Sometimes,
however,
none of the built-in functionality is precisely what we need.
In those cases,
Hamcrest allows us to write our own matchers.&lt;/p&gt;
&lt;p&gt;Imagine the following function:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def scale_one(a, b):
    scale = random.randint(0, 5)
    pick = random.choice([a,b])
    return scale * pick
&lt;/pre&gt;
&lt;p&gt;We can confidently assert that the result divides into at least one of the
inputs evenly.&lt;/p&gt;
&lt;p&gt;A matcher inherits from
&lt;tt class="docutils literal"&gt;hamcrest.core.base_matcher.BaseMatcher&lt;/tt&gt;,
and overrides two methods:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class DivisibleBy(hamcrest.core.base_matcher.BaseMatcher):

    def __init__(self, factor):
        self.factor = factor

    def _matches(self, item):
        return (item % self.factor) == 0

    def describe_to(self, description):
        description.append_text('number divisible by')
        description.append_text(repr(self.factor))
&lt;/pre&gt;
&lt;p&gt;Writing high-quality
&lt;tt class="docutils literal"&gt;describe_to&lt;/tt&gt;
methods is important,
since this is part of the message that will show up if the test fails.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def divisible_by(num):
    return DivisibleBy(num)
&lt;/pre&gt;
&lt;p&gt;By convention,
we wrap matchers in a function.
Sometimes this gives us a chance to further process the inputs,
but in this case, no further processing is needed.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def test_scale():
    result = scale_one(3, 7)
    assert_that(result,
                any_of(divisible_by(3),
                       divisible_by(7)))
&lt;/pre&gt;
&lt;p&gt;Note that we combined our
&lt;tt class="docutils literal"&gt;divisible_by&lt;/tt&gt;
matcher with the built-in
&lt;tt class="docutils literal"&gt;any_of&lt;/tt&gt;
matcher to ensure that we test only what the contract commits to.&lt;/p&gt;
&lt;p&gt;While editing the article,
I heard a rumor that the name &amp;quot;Hamcrest&amp;quot; was chosen as an anagram for &amp;quot;matches&amp;quot;. Hrm...&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; assert_that(&amp;quot;matches&amp;quot;, contains_inanyorder(*&amp;quot;hamcrest&amp;quot;)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
  File &amp;quot;/home/moshez/src/devops-python/build/devops/lib/python3.6/site-packages/hamcrest/core/assert_that.py&amp;quot;, line 43, in assert_that
    _assert_match(actual=arg1, matcher=arg2, reason=arg3)
  File &amp;quot;/home/moshez/src/devops-python/build/devops/lib/python3.6/site-packages/hamcrest/core/assert_that.py&amp;quot;, line 57, in _assert_match
    raise AssertionError(description)
AssertionError:
Expected: a sequence over ['h', 'a', 'm', 'c', 'r', 'e', 's', 't'] in any order
      but: no item matches: 'r' in ['m', 'a', 't', 'c', 'h', 'e', 's']
&lt;/pre&gt;
&lt;p&gt;Researching more,
I found the source of the rumor:
it is an anagram for &amp;quot;matchers&amp;quot;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; assert_that(&amp;quot;matchers&amp;quot;, contains_inanyorder(*&amp;quot;hamcrest&amp;quot;))
&amp;gt;&amp;gt;&amp;gt;
&lt;/pre&gt;
&lt;p&gt;If you are not yet writing unit tests for your Python code,
now is a good time to start.
If you are writing unit tests for your Python code,
using Hamcrest will allow you to make your assertion precise—neither more nor
less than what you intend to test.
This will lead to fewer false negatives when modifying code and less time spent modifying tests for working code.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Raise Better Exceptions in Python</title><link href="https://orbifold.xyz/raising-exceptions.html" rel="alternate"></link><published>2019-11-17T22:00:00-08:00</published><updated>2019-11-17T22:00:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2019-11-17:/raising-exceptions.html</id><summary type="html">&lt;p&gt;There is a lot of Python code in the wild which does something like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
raise ValueError(&amp;quot;Could not fraz the buzz:&amp;quot;
                 f&amp;quot;{foo} is less than {quux}&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;This is,
in general,
a bad idea.
It does not matter if the exception is fairly generic,
like
&lt;cite&gt;ValueError&lt;/cite&gt;
or specific
like
&lt;cite&gt;CustomFormatParsingException …&lt;/cite&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;There is a lot of Python code in the wild which does something like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
raise ValueError(&amp;quot;Could not fraz the buzz:&amp;quot;
                 f&amp;quot;{foo} is less than {quux}&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;This is,
in general,
a bad idea.
It does not matter if the exception is fairly generic,
like
&lt;cite&gt;ValueError&lt;/cite&gt;
or specific
like
&lt;cite&gt;CustomFormatParsingException&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;Exceptions are not program panics.
Program panics are things which should
&amp;quot;never happen&amp;quot;,
and usually abort either the entire program,
or at least an execution thread.&lt;/p&gt;
&lt;p&gt;While exceptions sometimes &lt;em&gt;do&lt;/em&gt; terminate the program,
or the execution thread,
with a traceback,
they are different in that they can be caught.&lt;/p&gt;
&lt;p&gt;The code that catches the exception will sometimes have a way to recover:
for example, maybe it’s not that important for the application to
&lt;tt class="docutils literal"&gt;fraz&lt;/tt&gt;
the
&lt;tt class="docutils literal"&gt;buzz&lt;/tt&gt;
if
&lt;tt class="docutils literal"&gt;foo&lt;/tt&gt;
is
&lt;tt class="docutils literal"&gt;0&lt;/tt&gt;.
In that case, the code would look like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
try:
    some_function()
except ValueError as exc:
    if ???
&lt;/pre&gt;
&lt;p&gt;Oh, right.
We do not have direct access to &lt;tt class="docutils literal"&gt;foo&lt;/tt&gt;.
If we formatted better,
using &lt;tt class="docutils literal"&gt;repr&lt;/tt&gt;,
at least we could tell the difference between
&lt;tt class="docutils literal"&gt;0&lt;/tt&gt;
and
&lt;tt class="docutils literal"&gt;&amp;quot;0&amp;quot;&lt;/tt&gt;:
but we still would have to start parsing the representation out of the string.&lt;/p&gt;
&lt;p&gt;Because of this,
in general,
it is better to raise exceptions like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
raise ValueError(&amp;quot;Could not fraz the buzz: foo is too small&amp;quot;, foo, quux)
&lt;/pre&gt;
&lt;p&gt;Note that all the exceptions defined in core Python
already allow any number of arguments.
Those arguments are available as &lt;cite&gt;exc.args&lt;/cite&gt;,
if
&lt;cite&gt;exc&lt;/cite&gt;
is the exception object.
If you do end up defining your custom exceptions,
the easiest thing is to avoid overriding the
&lt;cite&gt;__init__&lt;/cite&gt;:
this keeps this behavior.&lt;/p&gt;
&lt;p&gt;Raising exceptions this way gives
exception handling a lot of power:
it can introspect &lt;tt class="docutils literal"&gt;foo&lt;/tt&gt;,
introspect
&lt;tt class="docutils literal"&gt;quux&lt;/tt&gt;
and introspect the string.
If by some reason the exception class is raised and
we want to verify the reason,
checking string equality,
while not ideal,
is still better than trying to match string parts or
regular expression matching.&lt;/p&gt;
&lt;p&gt;When the exception is presented to the user interface,
in that case, it will not look as nice.
Exceptions,
in general,
should reach the UI only in extreme circumstances.
In those cases,
having something that has as much information is
useful for root cause analysis.&lt;/p&gt;
&lt;p&gt;This is an update of an
&lt;a class="reference external" href="https://moshez.wordpress.com/2016/12/10/on-raising-exceptions-in-python/"&gt;older blog post&lt;/a&gt;.
Thanks to &lt;a class="reference external" href="https://twitter.com/MRice88"&gt;Mark Rice&lt;/a&gt; and &lt;a class="reference external" href="https://bennuttall.com/"&gt;Ben Nuttall&lt;/a&gt;
for their improvement suggestions.
All mistakes that are left are my responsibility.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>An introduction to zope.interface</title><link href="https://orbifold.xyz/zope-interface.html" rel="alternate"></link><published>2019-10-17T20:00:00-07:00</published><updated>2019-10-17T20:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2019-10-17:/zope-interface.html</id><summary type="html">&lt;p&gt;This has previously been published on
&lt;a class="reference external" href="https://opensource.com/article/19/9/zopeinterface-python-package"&gt;opensource.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Zen_of_Python"&gt;Zen of Python&lt;/a&gt;
is loose enough and contradicts itself enough that you can prove anything from
it.
Let's meditate upon one of its most famous principles:
&amp;quot;Explicit is better than implicit.&amp;quot;&lt;/p&gt;
&lt;p&gt;One thing that traditionally has been implicit in Python is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This has previously been published on
&lt;a class="reference external" href="https://opensource.com/article/19/9/zopeinterface-python-package"&gt;opensource.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Zen_of_Python"&gt;Zen of Python&lt;/a&gt;
is loose enough and contradicts itself enough that you can prove anything from
it.
Let's meditate upon one of its most famous principles:
&amp;quot;Explicit is better than implicit.&amp;quot;&lt;/p&gt;
&lt;p&gt;One thing that traditionally has been implicit in Python is the
expected interface.
Functions have been documented to expect a
&amp;quot;file-like object&amp;quot;
or a
&amp;quot;sequence.&amp;quot;
But what is a file-like object?
Does it support
&lt;tt class="docutils literal"&gt;.writelines&lt;/tt&gt;?
What about
&lt;tt class="docutils literal"&gt;.seek&lt;/tt&gt;?
What is a &amp;quot;sequence&amp;quot;?
Does it support step-slicing,
such as &lt;tt class="docutils literal"&gt;a[1:10:2]&lt;/tt&gt;?&lt;/p&gt;
&lt;p&gt;Originally,
Python's answer was the so-called
&amp;quot;duck-typing,&amp;quot;
taken from the phrase
&amp;quot;if it walks like a duck and quacks like a duck,
it's probably a duck.&amp;quot;
In other words,
&amp;quot;try it and see,&amp;quot;
which is possibly the most implicit you could possibly get.&lt;/p&gt;
&lt;p&gt;In order to make those things explicit,
you need a way to express expected interfaces.
One of the first big systems written in Python was the Zope web framework,
and it needed those things desperately to make it obvious what rendering code,
for example,
expected from a
&amp;quot;user-like object.&amp;quot;&lt;/p&gt;
&lt;p&gt;Enter
&lt;tt class="docutils literal"&gt;zope.interface&lt;/tt&gt;,
which was part of Zope but published as a separate Python package.
The
&lt;tt class="docutils literal"&gt;zope.interface&lt;/tt&gt;
package helps declare what interfaces exist,
which objects provide them, and how to query for that information.&lt;/p&gt;
&lt;p&gt;Imagine writing a simple 2D game that needs various things to support a
&amp;quot;sprite&amp;quot;
interface;
e.g.,
indicate a bounding box,
but also indicate when the object intersects with a box.
Unlike some other languages,
in Python,
attribute access as part of the public interface is a common practice,
instead of implementing getters and setters.
The bounding box should be an attribute,
not a method.&lt;/p&gt;
&lt;p&gt;A method that renders the list of sprites might look like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def render_sprites(render_surface, sprites):
    &amp;quot;&amp;quot;&amp;quot;
    sprites should be a list of objects complying with the Sprite interface:
    * An attribute &amp;quot;bounding_box&amp;quot;, containing the bounding box.
    * A method called &amp;quot;intersects&amp;quot;, that accepts a box and returns
      True or False
    &amp;quot;&amp;quot;&amp;quot;
    pass # some code that would actually render
&lt;/pre&gt;
&lt;p&gt;The game will have many functions that deal with sprites.
In each of them,
you would have to specify the expected contract in a docstring.&lt;/p&gt;
&lt;p&gt;Additionally,
some functions might expect a more sophisticated sprite object,
maybe one that has a Z-order.
We would have to keep track of which methods expect a &lt;tt class="docutils literal"&gt;Sprite&lt;/tt&gt; object,
and which expect a &lt;tt class="docutils literal"&gt;SpriteWithZ&lt;/tt&gt; object.&lt;/p&gt;
&lt;p&gt;Wouldn't it be nice to be able to make what a sprite is explicit and obvious
so that methods could declare
&amp;quot;I need a sprite&amp;quot;
and have that interface strictly defined?
Enter &lt;tt class="docutils literal"&gt;zope.interface&lt;/tt&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from zope import interface

class ISprite(interface.Interface):

    bounding_box = interface.Attribute(
        &amp;quot;The bounding box&amp;quot;
    )

    def intersects(box):
        &amp;quot;Does this intersect with a box&amp;quot;
&lt;/pre&gt;
&lt;p&gt;This code looks a bit strange at first glance.
The methods do not include a self,
which is a common practice,
and it has an &lt;tt class="docutils literal"&gt;Attribute&lt;/tt&gt; thing.
This is the way to declare interfaces in &lt;tt class="docutils literal"&gt;zope.interface&lt;/tt&gt;.
It looks strange because most people are not used to strictly declaring
interfaces.&lt;/p&gt;
&lt;p&gt;The reason for this practice is that the interface shows how the method
will be called,
not how it is defined.
Because interfaces are not superclasses,
they can be used to declare data attributes.&lt;/p&gt;
&lt;p&gt;One possible implementation of the interface can be with a circular sprite:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;#64;implementer(ISprite)
&amp;#64;attr.s(auto_attribs=True)
class CircleSprite:
    x: float
    y: float
    radius: float

    &amp;#64;property
    def bounding_box(self):
        return (
            self.x - self.radius,
            self.y - self.radius,
            self.x + self.radius,
            self.y + self.radius,
        )

    def intersects(self, box):
        # A box intersects a circle if and only if
        # at least one corner is inside the circle.
        top_left, bottom_right = box[:2], box[2:]
        for choose_x_from (top_left, bottom_right):
            for choose_y_from (top_left, bottom_right):
                x = choose_x_from[0]
                y = choose_y_from[1]
                if (((x - self.x) ** 2 + (y - self.y) ** 2) &amp;lt;=
                    self.radius ** 2):
                     return True
        return False
&lt;/pre&gt;
&lt;p&gt;This explicitly declares that the
&lt;tt class="docutils literal"&gt;CircleSprite&lt;/tt&gt;
class implements the interface.
It even enables us to verify that the class implements it properly:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from zope.interface import verify

def test_implementation():
    sprite = CircleSprite(x=0, y=0, radius=1)
    verify.verifyObject(ISprite, sprite)
&lt;/pre&gt;
&lt;p&gt;This is something that can be run by &lt;tt class="docutils literal"&gt;pytest&lt;/tt&gt;,
&lt;tt class="docutils literal"&gt;nose&lt;/tt&gt;,
or another test runner,
and it will verify that the sprite created complies with the interface.
The test is often partial:
it will not test anything only mentioned in the documentation,
and it will not even test that the methods can be called without exceptions!
However,
it does check that the right methods and attributes exist.
This is a nice addition to the unit test suite and
--
at a minimum
--
prevents simple misspellings from passing the tests.&lt;/p&gt;
&lt;p&gt;If you have some implicit interfaces in your code,
why not document them clearly with &lt;tt class="docutils literal"&gt;zope.interface&lt;/tt&gt;?&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Adding Methods Retroactively</title><link href="https://orbifold.xyz/singledispatch.html" rel="alternate"></link><published>2019-09-16T18:00:00-07:00</published><updated>2019-09-16T18:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2019-09-16:/singledispatch.html</id><summary type="html">&lt;p&gt;The following post was originally published on
&lt;a class="reference external" href="https://opensource.com/article/19/5/python-singledispatch"&gt;OpenSource.com&lt;/a&gt;
as part of a series on seven libraries that help solve common problems.&lt;/p&gt;
&lt;p&gt;Imagine you have a &amp;quot;shapes&amp;quot; library.
We have a &lt;code&gt;Circle&lt;/code&gt; class,
a &lt;code&gt;Square&lt;/code&gt; class,
etc.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;Circle&lt;/code&gt; has a &lt;code&gt;radius&lt;/code&gt;,
a &lt;code&gt;Square&lt;/code&gt; has a &lt;code&gt;side&lt;/code&gt;,
and maybe &lt;code&gt;Rectangle …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;The following post was originally published on
&lt;a class="reference external" href="https://opensource.com/article/19/5/python-singledispatch"&gt;OpenSource.com&lt;/a&gt;
as part of a series on seven libraries that help solve common problems.&lt;/p&gt;
&lt;p&gt;Imagine you have a &amp;quot;shapes&amp;quot; library.
We have a &lt;code&gt;Circle&lt;/code&gt; class,
a &lt;code&gt;Square&lt;/code&gt; class,
etc.&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;Circle&lt;/code&gt; has a &lt;code&gt;radius&lt;/code&gt;,
a &lt;code&gt;Square&lt;/code&gt; has a &lt;code&gt;side&lt;/code&gt;,
and maybe &lt;code&gt;Rectangle&lt;/code&gt; has &lt;code&gt;height&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt;.
The library already exists:
we do not want to change it.&lt;/p&gt;
&lt;p&gt;However,
we do want to add an &lt;code&gt;area&lt;/code&gt; calculation.
If this was our library,
we would just add an &lt;code&gt;area&lt;/code&gt; method,
so that we can call &lt;code&gt;shape.area()&lt;/code&gt;,
and not worry about what the shape is.&lt;/p&gt;
&lt;p&gt;While it is possible to reach into a class and add a method,
this is a bad idea:
nobody expects their class to grow new methods,
and things might break in weird ways.&lt;/p&gt;
&lt;p&gt;Instead,
the &lt;code&gt;singledispatch&lt;/code&gt; function in &lt;code&gt;functools&lt;/code&gt; can come to our rescue:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;#64;singledispatch
def get_area(shape):
    raise NotImplementedError(&amp;quot;cannot calculate area for unknown shape&amp;quot;,
                              shape)
&lt;/pre&gt;
&lt;p&gt;The &amp;quot;base&amp;quot; implementation for the &lt;code&gt;get_area&lt;/code&gt; function
just fails.
This makes sure that if we get a new shape,
we will cleanly fail instead of returning a nonsense result.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;#64;get_area.register(Square)
def _get_area_square(shape):
    return shape.side ** 2
&amp;#64;get_area.register(Circle)
def _get_area_circle(shape):
    return math.pi * (shape.radius ** 2)
&lt;/pre&gt;
&lt;p&gt;One nice thing about doing things this way is that if
someone else writes a &lt;em&gt;new&lt;/em&gt; shape that is intended to play well with our
code,
they can implement the &lt;code&gt;get_area&lt;/code&gt; themselves:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from area_calculator import get_area

&amp;#64;attr.s(auto_attribs=True, frozen=True)
class Ellipse:
    horizontal_axis: float
    vertical_axis: float

&amp;#64;get_area.register(Ellipse)
def _get_area_ellipse(shape):
    return math.pi * shape.horizontal_axis * shape.vertical_axis
&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;Calling&lt;/em&gt;
&lt;code&gt;get_area&lt;/code&gt;
is straightforward:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
print(get_area(shape))
&lt;/pre&gt;
&lt;p&gt;This means we can change a function that has a long
&lt;code&gt;if isintance()/elif isinstance()&lt;/code&gt;
chain
to work this way,
without changing the interface.
The next time you are tempted to check &lt;code&gt;if isinstance&lt;/code&gt;,
try using &lt;code&gt;singledispatch&lt;/code&gt;!&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Designing Interfaces</title><link href="https://orbifold.xyz/designing-interfaces.html" rel="alternate"></link><published>2019-08-07T22:20:00-07:00</published><updated>2019-08-07T22:20:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2019-08-07:/designing-interfaces.html</id><summary type="html">&lt;p&gt;One of the items of feedback I got from the article about
&lt;a class="reference external" href="https://orbifold.xyz/interfaces-are-forever.html"&gt;interface immutability&lt;/a&gt;
is that it did not give any
&lt;em&gt;concrete&lt;/em&gt;
feedback for how to design interfaces.
Given that they are forever,
it would be good to have some sort of guidance.&lt;/p&gt;
&lt;p&gt;The first item is that you want …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the items of feedback I got from the article about
&lt;a class="reference external" href="https://orbifold.xyz/interfaces-are-forever.html"&gt;interface immutability&lt;/a&gt;
is that it did not give any
&lt;em&gt;concrete&lt;/em&gt;
feedback for how to design interfaces.
Given that they are forever,
it would be good to have some sort of guidance.&lt;/p&gt;
&lt;p&gt;The first item is that you want
&lt;em&gt;something that uses the implementation&lt;/em&gt;,
as well as
&lt;em&gt;several distinct&lt;/em&gt;
implementations.
However,
this item is
&lt;em&gt;too&lt;/em&gt;
obvious:
in almost all cases I have seen in the wild of a
&lt;em&gt;bad&lt;/em&gt;
interface,
this guideline was followed.&lt;/p&gt;
&lt;p&gt;It was also followed in all cases of a
&lt;em&gt;good&lt;/em&gt;
interface.&lt;/p&gt;
&lt;p&gt;I think this guideline is covered well enough that by the time
anyone designs a real interface,
they understand that.
Why am I mentioning this guideline at all,
then?&lt;/p&gt;
&lt;p&gt;Because I think it is important for the
&lt;em&gt;context&lt;/em&gt;
of the guideline that I
&lt;em&gt;do&lt;/em&gt;
think actually distinguishes good interfaces from bad interfaces.
It is almost identical to the non-criterion above!&lt;/p&gt;
&lt;p&gt;The real guideline is:
&lt;em&gt;something that uses the implementation&lt;/em&gt;,
as well as
&lt;em&gt;several distinct&lt;/em&gt;
implementations
that
&lt;em&gt;do not share a superclass&lt;/em&gt;
(other than &lt;cite&gt;object&lt;/cite&gt; or whatever is in the top of the hierarchy).&lt;/p&gt;
&lt;p&gt;This simple addition,
preventing the implementations from sharing a superclass,
is surprisingly powerful.
It means each implementation has to implement the
&amp;quot;boring&amp;quot;
parts by hand.
This will immediately cause pressure to avoid
&amp;quot;boring&amp;quot;
parts,
and instead put them in a wrapper,
or in the interface
&lt;em&gt;user&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Otherwise,
the most common failure mode is that
the implementations are all basic variants
on what is mostly the
&amp;quot;big superclass&amp;quot;.&lt;/p&gt;
&lt;p&gt;In my experience,
just the constraint on not having a
&amp;quot;helper superclass&amp;quot;
puts appropriate pressure on interfaces to be good.&lt;/p&gt;
&lt;p&gt;(Thanks to Tom Most for his encouragement to write this,
and the feedback on an earlier draft.
Any mistakes that remain are my responsibility.)&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Interfaces are forever</title><link href="https://orbifold.xyz/interfaces-are-forever.html" rel="alternate"></link><published>2019-07-12T22:00:00-07:00</published><updated>2019-07-12T22:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2019-07-12:/interfaces-are-forever.html</id><summary type="html">&lt;p&gt;(The following talks about &lt;tt class="docutils literal"&gt;zope.interface&lt;/tt&gt; interfaces,
but applies equally well to Java interfaces,
Go interfaces,
and probably other similar constructs.)&lt;/p&gt;
&lt;p&gt;When we write a function,
we can sometimes change it in backwards-compatible ways.
For example,
we can loosen the type of a variable.
We can restrict the type of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;(The following talks about &lt;tt class="docutils literal"&gt;zope.interface&lt;/tt&gt; interfaces,
but applies equally well to Java interfaces,
Go interfaces,
and probably other similar constructs.)&lt;/p&gt;
&lt;p&gt;When we write a function,
we can sometimes change it in backwards-compatible ways.
For example,
we can loosen the type of a variable.
We can restrict the type of the return value.
We can add an optional argument.&lt;/p&gt;
&lt;p&gt;We can even have a backwards compatible path to make an argument required.
We add an optional argument,
and encourage people to change it.
Then, in the next version,
we make the default value be one that causes a warning.
In a version after that,
we make the value required.
At each point,
someone could write a library that worked with
&lt;em&gt;at least&lt;/em&gt;
two consecutive versions.&lt;/p&gt;
&lt;p&gt;In a similar way,
we can have a path to remove an argument.
First make it optional.
Then warn when it is passed in.
Finally,
remove it and make it an error to pass it in.&lt;/p&gt;
&lt;p&gt;As long as we do not intend to support inheritance,
making backwards compatible changes to classes also works.
For example,
to remove a method we first have a version that warns when you call it,
and then remove it in a succeeding version.&lt;/p&gt;
&lt;p&gt;However,
what changes can we make to an &lt;em&gt;interface&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;Assume we have an interface like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from zope.interface import Interface, implements

class IFancyFormat(Interface):

    def fancify_int(value: int) -&amp;gt; str:
        pass
&lt;/pre&gt;
&lt;p&gt;It is a perfectly reasonable,
if thin,
interface.
Implementing it seems like fun:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;#64;implements(IFancyFormat)
&amp;#64;attr.s(auto_attribs=True)
class FancySuffixer:
    suffix: str

    def fancify_int(self, value: int) -&amp;gt; str:
        return str(value) + self.suffix
&lt;/pre&gt;
&lt;p&gt;Using it also seems like fun:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def dashify_fancy_five(fancifier: IFancyFormat) -&amp;gt; str:
    return f&amp;quot;---{fancifier.fancify_int(5)}---&amp;quot;
&lt;/pre&gt;
&lt;p&gt;These are very different kinds of fun,
though!
Probably the kind of fun that appeals to different people.
The first implementation is in the &lt;tt class="docutils literal"&gt;superfancy&lt;/tt&gt; open-source library.
The second one is in the &lt;tt class="docutils literal"&gt;dash_five&lt;/tt&gt; open-source library.
Such is the beauty of open source:
it takes all kinds of people.&lt;/p&gt;
&lt;p&gt;We cannot add a method to &lt;tt class="docutils literal"&gt;IFancyFormat&lt;/tt&gt;:
the &lt;tt class="docutils literal"&gt;superfancy&lt;/tt&gt; library has a unit test that uses
&lt;tt class="docutils literal"&gt;verifyImplements&lt;/tt&gt;,
which will fail if we add a method.
We cannot &lt;em&gt;remove&lt;/em&gt; the method &lt;tt class="docutils literal"&gt;fancify_int&lt;/tt&gt;,
since this will break &lt;tt class="docutils literal"&gt;dash_five&lt;/tt&gt;:
the &lt;tt class="docutils literal"&gt;mypy&lt;/tt&gt; check will fail,
since &lt;tt class="docutils literal"&gt;IFancifySuffixer&lt;/tt&gt; will not have that method.&lt;/p&gt;
&lt;p&gt;Similarly,
we cannot make the parameter optional without breaking
&lt;tt class="docutils literal"&gt;superfancy&lt;/tt&gt;,
or loosen the return type without breaking &lt;tt class="docutils literal"&gt;dash_five&lt;/tt&gt;.
Once we have published &lt;tt class="docutils literal"&gt;IFancyFormat&lt;/tt&gt; as an API,
it cannot change.&lt;/p&gt;
&lt;p&gt;The only way to recover from a bad interface is to create a
&lt;em&gt;new&lt;/em&gt;
interface,
&lt;tt class="docutils literal"&gt;IAwesomeFancyFormat&lt;/tt&gt;.
Then write conversion functions from and to &lt;tt class="docutils literal"&gt;IFancyFormat&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;IAwesomeFancyFormat&lt;/tt&gt;.
Then deprecate using the &lt;tt class="docutils literal"&gt;IFancyFormat&lt;/tt&gt; interface.
Finally,
we can remove the interface.
Then we can alias &lt;tt class="docutils literal"&gt;IFancyFormat == IAwesomeFancyFormat&lt;/tt&gt;,
and eventually,
maybe even deprecate the name &lt;tt class="docutils literal"&gt;IAwesomeFancyFormat&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;When publishing interfaces,
one must be careful:
to a first approximation,
they are forever.&lt;/p&gt;
&lt;p&gt;(Thanks to Glyph Lefkowitz for his helpful suggestions.
Any mistakes or issues that are left are my responsibility.)&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Analyzing the Stack Overflow Survey</title><link href="https://orbifold.xyz/python-analysis.html" rel="alternate"></link><published>2019-05-27T22:20:00-07:00</published><updated>2019-05-27T22:20:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2019-05-27:/python-analysis.html</id><summary type="html">&lt;p&gt;The &lt;a class="reference external" href="https://drive.google.com/file/d/1QOmVDpd8hcVYqqUXDXf68UMDWQZP0wQV/view"&gt;Stack Overflow Survey Results for
2019&lt;/a&gt;
are in! There is some official analysis, that mentioned some things that
mattered to me, and some that did not. I decided to dig into the data
and see if I can find some things that would potentially interest my
readership.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv …&lt;/span&gt;&lt;/pre&gt;</summary><content type="html">&lt;p&gt;The &lt;a class="reference external" href="https://drive.google.com/file/d/1QOmVDpd8hcVYqqUXDXf68UMDWQZP0wQV/view"&gt;Stack Overflow Survey Results for
2019&lt;/a&gt;
are in! There is some official analysis, that mentioned some things that
mattered to me, and some that did not. I decided to dig into the data
and see if I can find some things that would potentially interest my
readership.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;itertools&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;survey_results_public.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fpin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fpin&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;responses&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
88883
&lt;/pre&gt;
&lt;p&gt;Wow, almost 90K respondents! This is the sweet spots of &amp;quot;enough to make
meaningful generalizations&amp;quot; while being able to analyze with rudimentary
tools, not big-data-ware.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;pythonistas&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;responses&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;'Python'&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'LanguageWorkedWith'&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pythonistas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
0.41001091322300104
&lt;/pre&gt;
&lt;p&gt;About 40% of the respondents use Python in some capacity. That is pretty
cool! This is one of the things where I wonder if there is bias in the
source data. Are people who use Stack Overflow, or respond to surveys
for SO, more likely to be the kind of person who uses Python? Or less?&lt;/p&gt;
&lt;p&gt;In any case, I am excited! This means my favorite language, for all its
issues, is doing well. This is also a good reminder that we need to
&lt;a class="reference external" href="https://twitter.com/hawkieowl/status/1132026149716893696"&gt;think about the consequences of our
decisions&lt;/a&gt;
on a big swath of developers we will never ever meet.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;opensource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'OpenSourcer'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pythonistas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;opensource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
[('Never', 11310),
 ('Less than once per year', 10374),
 ('Less than once a month but more than once per year', 9572),
 ('Once a month or more often', 5187)]
&lt;/pre&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;opensource&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'Once a month or more often'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pythonistas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
0.1423318607139917
&lt;/pre&gt;
&lt;p&gt;Python is open source. Almost all important libraries (Django, Pandas,
PyTorch, requests) are open source. Many important tools (Jupyter) are
open source. The number of people who contribute to them with &lt;em&gt;any kind&lt;/em&gt;
of regular cadence is less than 15%.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;general_opensource&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'OpenSourcer'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="nb"&gt;sorted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;general_opensource&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;reverse&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
[('Never', 32295),
 ('Less than once per year', 24972),
 ('Less than once a month but more than once per year', 20561),
 ('Once a month or more often', 11055)]
&lt;/pre&gt;
&lt;p&gt;The Python community does compare well to the general populace, though!&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;devtype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_iterable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DevType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pythonistas&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;devtype&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'DevOps specialist'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
0.052282213696657406
&lt;/pre&gt;
&lt;p&gt;About 5% of &lt;em&gt;total respondents&lt;/em&gt; are my peers: using Python for DevOps.
That is pretty exciting! My interest in that is not merely theoretical,
my upcoming &lt;a class="reference external" href="https://www.apress.com/us/book/9781484244326"&gt;book&lt;/a&gt;
targets that crowd.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;general_devtype&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;collections&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;itertools&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;chain&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_iterable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DevType&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;general_devtype&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'DevOps specialist'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;devtype&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'DevOps specialist'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pythonistas&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
(0.09970410539698255, 0.12751420025793705)
&lt;/pre&gt;
&lt;p&gt;In general, DevOps specialists are 10% of respondents.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;devtype&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'DevOps specialist'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;general_devtype&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'DevOps specialist'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
0.524373730534868
&lt;/pre&gt;
&lt;p&gt;Over 50% of DevOps specialists use Python!&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;safe_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ValueError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt;

&lt;/span&gt;&lt;span class="n"&gt;intermediate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;pythonistas&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;safe_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'YearsCode'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;My next hush-hush (for now!) project is going to be targeting
intermediate Python developers. I wish I could slice by &amp;quot;number of years
writing &lt;em&gt;in Python&lt;/em&gt;, but this is the best I could do. (I treat &amp;quot;NA&amp;quot;
responses as &amp;quot;not intermediate&amp;quot;. This is OK, since I prefer to
underestimate rather than overestimate.)&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;intermediate&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
0.11346376697456206
&lt;/pre&gt;
&lt;p&gt;11%! Not bad.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;general_intermediate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;sum&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;responses&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;safe_int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'YearsCode'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;intermediate&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pythonistas&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;general_intermediate&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;responses&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
(0.27673352907279863, 0.2671264471271222)
&lt;/pre&gt;
&lt;p&gt;Seems like using Python does not change much the chances of someone
being intermediate.&lt;/p&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;40% of respondents use Python. Python is kind of a big deal.&lt;/li&gt;
&lt;li&gt;5% of respondents use &lt;em&gt;Python&lt;/em&gt; for &lt;em&gt;DevOps&lt;/em&gt;. This is a lot! DevOps as
a profession is less than 10 years old.&lt;/li&gt;
&lt;li&gt;11% of respondents are &lt;em&gt;intermediate Python&lt;/em&gt; users. My &lt;a class="reference external" href="https://gumroad.com/l/BVOGd"&gt;previous
book&lt;/a&gt; targets this crowd.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(Thanks to Robert Collins and Matthew Broberg for their comments on an
earlier draft. Any remaining issues are purely my responsibility.)&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Inbox Zero</title><link href="https://orbifold.xyz/inbox-zero.html" rel="alternate"></link><published>2019-05-15T21:45:00-07:00</published><updated>2019-05-15T21:45:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2019-05-15:/inbox-zero.html</id><summary type="html">&lt;p&gt;I am the parent of two young kids.
It is easy to sink into random stuff,
and not follow up on goals.
Strict time management and prioritization means
I get to work on open source projects,
write programming books
and update my blog with a decent cadence.
Since a lot …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am the parent of two young kids.
It is easy to sink into random stuff,
and not follow up on goals.
Strict time management and prioritization means
I get to work on open source projects,
write programming books
and update my blog with a decent cadence.
Since a lot of people were asking me how to do it,
I wanted to share my methodology.
The following is descriptive,
not prescriptive.&lt;/p&gt;
&lt;p&gt;One thing I am proud of is that the initial draft for the
post was written a year ago.
I have done my edits for clarity,
but found that my description of the process,
for the most part,
has remained the same.
This made me confident that it is time to publish:
this process has existed in its current form
for at least a year,
and I believe almost two years.
This is not some fad diet for me:
this process has proved its worth.&lt;/p&gt;
&lt;p&gt;Glyph has already &lt;a class="reference external" href="https://glyph.twistedmatrix.com/2016/04/email-isnt-the-problem.html"&gt;written&lt;/a&gt; at length about how a full Inbox
is a sign of misprioritized tasks.
Saying &amp;quot;no&amp;quot; is one example
(in other words, prioritizing away).
But when saying &amp;quot;yes&amp;quot;,
it is a good idea to know when it can be done,
when should you give up,
and potentially apologize,
and when should you give a heads-up
that it is being delayed.&lt;/p&gt;
&lt;p&gt;His description,
being more high-level,
&lt;em&gt;is&lt;/em&gt;
prescriptive.
The follow-up is the process I use,
shaped by those general ideas.&lt;/p&gt;
&lt;p&gt;The &lt;em&gt;tool&lt;/em&gt; I use is TODOist.
The first time I tried it,
I decided it lacked some necessary features.
I still feel this way --
about the &lt;em&gt;free&lt;/em&gt; version.
The free version is completely unusable.
The &lt;a class="reference external" href="https://todoist.com/Premium"&gt;premium&lt;/a&gt; version
is perfectly usable.&lt;/p&gt;
&lt;p&gt;The salient features of TODOist,
that the rest of the explanation depends on,
are:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Android integration. I use Android on my phone,
and depend on good phone support.
TODOist has a widget which lets me add a task without
waiting for an app-launch.
It integrates with Google Assistant --
it is possible to configure all &amp;quot;Note to self&amp;quot;
to be new task creations.
Finally, it integrates with the &amp;quot;Share&amp;quot; menu,
so sharing things can create tasks.&lt;/li&gt;
&lt;li&gt;E-mail integration:
a customized e-mail address which opens a task for each e-mail&lt;/li&gt;
&lt;li&gt;Browser plugin: add a task without opening the site,
as well as &amp;quot;Add website as task&amp;quot; for current page.&lt;/li&gt;
&lt;li&gt;A task can have arbitrary attachments.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="section" id="e-mail-scan-process"&gt;
&lt;h2&gt;E-mail scan process&lt;/h2&gt;
&lt;p&gt;I read e-mail &amp;quot;when I get around to it&amp;quot;.
Usually several times a day.
I do have notifications enabled on my phone,
so I can easily see if the e-mail is urgent.
Otherwise, I just ignore the notification.&lt;/p&gt;
&lt;p&gt;When I do go through my e-mail,
I follow the rules:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;If it's obvious there is no task, archive&lt;/li&gt;
&lt;li&gt;If it's something short, obvious and I have the time, do it and archive.
However, if I find in the middle that I am wrong about it being short
and obvious, I abort.
Usually it is obvious if an e-mail will require a lengthy research
project.
The most common way of being wrong is when,
while responding,
I find myself getting too emotional.
I have trained myself to consider this as a trigger for aborting.&lt;/li&gt;
&lt;li&gt;Otherwise, I &amp;quot;Forward&amp;quot; and send it to the TODOist auto-task e-mail --
and then immediately archive.
The forwarded message,
having literally all the words in the original,
is enough information to search for the original in my archive.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="browser"&gt;
&lt;h2&gt;Browser&lt;/h2&gt;
&lt;p&gt;The only &amp;quot;permanently&amp;quot; open tabs in a browser should be &amp;quot;communication&amp;quot; tabs:
FB messenger, whatsapp, slack, etc.
If any other tab feels like it would be bad to close,
create task from it.
I verify that each tab is OK to close,
or needs a task + close,
by closing all non-communication tabs if the tabs become too
small to read the titles (Chrome)
or the tabs need scrolling (Firefox).&lt;/p&gt;
&lt;p&gt;My usual research task takes several tabs
(Python documentation,
StackOverflow,
GitHub pull requests,
tickets and more),
so tab accumulation happens naturally,
thus triggering the garbage collection process.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="reviewing-tasks"&gt;
&lt;h2&gt;Reviewing tasks&lt;/h2&gt;
&lt;div class="section" id="clean-triage"&gt;
&lt;h3&gt;Clean triage&lt;/h3&gt;
&lt;p&gt;This is a daily task,
to go to the filter &amp;quot;triage&amp;quot; and clean it out.
The filter is defined as
&amp;quot;not marked 'time permitting' and does not have a due date&amp;quot;.
Since tasks come in without marking or due date,
this is a filter for tasks that come in.
The task is &amp;quot;done&amp;quot; when the filter is empty.
Any task that actually needs to get done will get Scheduled
with a due date.
Note that this due date is not a real &amp;quot;due&amp;quot;:
it is when I plan to do it.
This will get determined based on the task,
on my available time,
and when other tasks got scheduled.&lt;/p&gt;
&lt;p&gt;Otherwise,
the task is marked &amp;quot;time permitting&amp;quot;.
This means,
in real terms,
that I will probably never get around to it.
This is fine --
and it feels nicer than archiving or deleting the task.
It allows me to be less FOMO
when doing the triage.&lt;/p&gt;
&lt;p&gt;Occasionally,
an external trigger will rescue a task from the
&amp;quot;time permitting&amp;quot;
graveyard.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="rebalance"&gt;
&lt;h3&gt;Rebalance&lt;/h3&gt;
&lt;p&gt;Rebalance means that I do not want to have an empty day,
followed by an avalanche day:
I'll be as carefree as the grasshopper that day,
watch TV and frolic,
and then drown in tasks the next.&lt;/p&gt;
&lt;p&gt;I look ahead, and if I see a day with less than 5-6 tasks,
I will move some tasks forward to get done sooner.
I do not worry about the opposite.
If there are too many tasks one day,
they'll naturally get postponed.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="non-meta-tasks"&gt;
&lt;h2&gt;Non-meta Tasks&lt;/h2&gt;
&lt;p&gt;I treat the due date as an &amp;quot;ETA&amp;quot;.
I try to do all tasks due a given day
on that day.
If there is an objective deadline,
e.g. a CFP that closes on a date,
that deadline will be in human readable form on the task.&lt;/p&gt;
&lt;p&gt;If I am too tired,
or cannot handle more load,
I start rescheduling &amp;quot;today&amp;quot; tasks.
This process will take into considersation the &amp;quot;objective&amp;quot;
deadlines,
if any.
It will also take into account the subjective value of the task to me.&lt;/p&gt;
&lt;p&gt;Any task that gets postponed &amp;quot;too many times&amp;quot;
gets moved to &amp;quot;time permitting&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="dependencies"&gt;
&lt;h2&gt;Dependencies&lt;/h2&gt;
&lt;p&gt;Humans are social creatures.
Some tasks,
I cannot do alone.
For example,
when publishing a blog post,
I like to have some trusted people review it.
This means that I need their feedback.&lt;/p&gt;
&lt;p&gt;When I need something from someone,
that's a task.
The task is to use that thing.
The due date is the date to poke them
about the delivery of the thing.
Because I try to build in a buffer,
it allows me to be nice about it.
I am endlessly patient,
with e-mails asking
&amp;quot;let me know how it is going&amp;quot;.&lt;/p&gt;
&lt;p&gt;Some people are also busy.
If someone tells me
&amp;quot;I'll give it to you in a week&amp;quot;,
I make a task to ask them about it in a week.
If they deliver,
they will never know:
the task gets done when I get what I need.
If not,
I'll mention,
gently,
&amp;quot;hey,
it's been a week,
wondering if there's an update.&amp;quot;&lt;/p&gt;
&lt;p&gt;Some people,
for good or bad reasons,
do not deliver.
Then &lt;em&gt;I&lt;/em&gt; have the task of deciding what to do about it.
Sometime I'll ask someone else for help.
Sometime I'll do it myself.
Sometime I'll drop it.
Whatever it is,
it was my
&lt;em&gt;explicit&lt;/em&gt;
decision.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="spoon-management"&gt;
&lt;h2&gt;Spoon Management&lt;/h2&gt;
&lt;p&gt;If there are too many tasks,
and I feel overwhelmed,
I will start postponing any non-urgent tasks.
Sometimes,
this means I will postpone everything.
If I lack the spoons,
I lack the spoons.
I do not feel guilt about it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;Inbox Zero is possible.
Not only that.
Inbox Zero,
I have found,
is &lt;em&gt;easy&lt;/em&gt;.
Doing everything I want to do is
&lt;em&gt;not&lt;/em&gt;
easy.
But the meta-process:
deciding what I want to do,
deciding what I am going to say &amp;quot;no&amp;quot;
or
flake on,
that is easy.&lt;/p&gt;
&lt;p&gt;This leads to less anxiety.
I do what I can,
and decide that this is enough.
I am kind to myself.
Be kind to yourself.
Go Inbox Zero.&lt;/p&gt;
&lt;p&gt;(Thanks to Shae Erisson for his feedback.
Any issues that remain are my responsibility.)&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Publishing a Book with Sphinx</title><link href="https://orbifold.xyz/book-with-sphinx.html" rel="alternate"></link><published>2019-04-08T00:00:00-07:00</published><updated>2019-04-08T00:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2019-04-08:/book-with-sphinx.html</id><summary type="html">&lt;p&gt;A while ago,
I decided I wanted to self-publish a book on improving
your Python skills.
It was supposed to be short,
sweet,
and fairly inexpensive.&lt;/p&gt;
&lt;p&gt;The journey was a &lt;a class="reference external" href="https://gum.co/BVOGd"&gt;success&lt;/a&gt;,
but had some interesting twists along the way.&lt;/p&gt;
&lt;p&gt;From the beginning,
I knew what technology I wanted to write …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A while ago,
I decided I wanted to self-publish a book on improving
your Python skills.
It was supposed to be short,
sweet,
and fairly inexpensive.&lt;/p&gt;
&lt;p&gt;The journey was a &lt;a class="reference external" href="https://gum.co/BVOGd"&gt;success&lt;/a&gt;,
but had some interesting twists along the way.&lt;/p&gt;
&lt;p&gt;From the beginning,
I knew what technology I wanted to write the book with:
&lt;a class="reference external" href="https://www.sphinx-doc.org/en/master/"&gt;Sphinx&lt;/a&gt;.
This was because I knew that I can use Sphinx to create something reasonable:
I have previously ported my
&amp;quot;Calculus 101&amp;quot; book
to Sphinx,
and I have written other small things in it.
Sphinx uses ReStructuredText,
which I am most familiar with.&lt;/p&gt;
&lt;p&gt;I decided I wanted to publish as PDF
(for self-printers or others who find it convenient),
as browser-ready HTML directory,
and as an ePub.&lt;/p&gt;
&lt;p&gt;The tox environments I &lt;a class="reference external" href="https://github.com/moshez/book-skeleton/blob/master/tox.ini"&gt;created&lt;/a&gt; are:
&lt;code&gt;epub&lt;/code&gt; builds the &lt;em&gt;ePub&lt;/em&gt;,
&lt;code&gt;html&lt;/code&gt; builds the browser-ready HTML,
and &lt;code&gt;pdf&lt;/code&gt; builds the PDF.&lt;/p&gt;
&lt;p&gt;Initially,
the &lt;code&gt;epub&lt;/code&gt; environment created a &amp;quot;singlehtml&amp;quot;,
and I used &lt;a class="reference external" href="https://calibre-ebook.com/"&gt;Calibre&lt;/a&gt; command-line utility to transform it into an ePub.
This made for a &lt;em&gt;prettier&lt;/em&gt; ePub than the one sphinx creates:
it had a much nicer cover,
which is what most book reading applications use as an icon.
However, that rendered poorly on Books.app (AKA iBooks).&lt;/p&gt;
&lt;p&gt;One of the projects I still plan to tackle is how to improve the look
of the rendered ePub,
and add a custom cover image.&lt;/p&gt;
&lt;p&gt;Finally,
a &lt;a class="reference external" href="https://github.com/moshez/book-skeleton/blob/master/generate-artifact"&gt;script&lt;/a&gt;
runs all the relevant tox environments,
and then packs everything into a zip file.
This is the zip file I upload to &lt;a class="reference external" href="https://gumroad.com/"&gt;Gumroad&lt;/a&gt;,
so that people can buy it.&lt;/p&gt;
&lt;p&gt;I have tried to use other sellers,
but Gumroad was the one with the easiest store creation.
In order to test my store,
even before the book was ready,
I created a simple &amp;quot;Python cheat-sheet&amp;quot; poster,
and put it on my store.&lt;/p&gt;
&lt;p&gt;I then asked friends to buy it,
as well as trying to do it myself.
After it all worked,
I refunded all the test-run purchases, of course!&lt;/p&gt;
&lt;p&gt;Refunding on Gumroad is a pleasant process,
which means that if people buy the book,
and are unhappy with it,
I am happy to refund their money.&lt;/p&gt;
&lt;p&gt;(Thanks to Glyph Lefkowitz for his feedback on an earlier draft.
All mistakes that remain are my responsibility.)&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>A Local LRU Cache</title><link href="https://orbifold.xyz/local-lru.html" rel="alternate"></link><published>2019-03-29T21:30:00-07:00</published><updated>2019-03-29T21:30:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2019-03-29:/local-lru.html</id><summary type="html">&lt;p&gt;&amp;quot;It is a truth universally acknowledged,
that a shared state in possession of mutability,
must be in want of a bug.&amp;quot;
--
with apologies to Jane Austen&lt;/p&gt;
&lt;p&gt;As Ms. Austen,
and
&lt;a class="reference external" href="https://henrikeichenhardt.blogspot.com/2013/06/why-shared-mutable-state-is-root-of-all.html"&gt;Henrik Eichenhardt&lt;/a&gt;,
taught us,
shared mutable state is
the root of all evil.&lt;/p&gt;
&lt;p&gt;Yet,
the official documentation of &lt;a class="reference external" href="https://docs.python.org/3/library/functools.html#functools.lru_cache"&gt;functools&lt;/a&gt;
tells …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&amp;quot;It is a truth universally acknowledged,
that a shared state in possession of mutability,
must be in want of a bug.&amp;quot;
--
with apologies to Jane Austen&lt;/p&gt;
&lt;p&gt;As Ms. Austen,
and
&lt;a class="reference external" href="https://henrikeichenhardt.blogspot.com/2013/06/why-shared-mutable-state-is-root-of-all.html"&gt;Henrik Eichenhardt&lt;/a&gt;,
taught us,
shared mutable state is
the root of all evil.&lt;/p&gt;
&lt;p&gt;Yet,
the official documentation of &lt;a class="reference external" href="https://docs.python.org/3/library/functools.html#functools.lru_cache"&gt;functools&lt;/a&gt;
tells us to write code like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;#64;lru_cache(maxsize=32)
def get_pep(num):
    'Retrieve text of a Python Enhancement Proposal'
    resource = 'http://www.python.org/dev/peps/pep-%04d/' % num
    try:
        with urllib.request.urlopen(resource) as s:
            return s.read()
    except urllib.error.HTTPError:
        return 'Not Found'
&lt;/pre&gt;
&lt;p&gt;(This code is copied from the official documentation,
verbatim.)&lt;/p&gt;
&lt;p&gt;The decorator,
&lt;code&gt;&amp;#64;lru_cache(maxsize=32)&lt;/code&gt;,
is now...
module-global mutable state.
It doesn't get any more &lt;em&gt;shared&lt;/em&gt;,
in Python,
than module-global:
every import of the module will share the object!&lt;/p&gt;
&lt;p&gt;We try and pretend like there is no
&amp;quot;semantic&amp;quot;
difference:
the cache is
&amp;quot;merely&amp;quot;
an optimization.
However,
very quickly things start falling apart:
after all,
why would the documentation even tell us how to get back the original function
(answer: &lt;code&gt;.__wrapped__&lt;/code&gt;)
if the cache is so benign?&lt;/p&gt;
&lt;p&gt;No,
decorating the function with &lt;code&gt;lru_cache&lt;/code&gt;
is anything but benign!
For one,
because it is shared-thread mutable state,
we have introduced some thread locking,
with all the resulting complexity,
and occasional surprising performance issues.&lt;/p&gt;
&lt;p&gt;Another example of non-benign-ness is that,
in the &lt;code&gt;get_pep&lt;/code&gt; example,
sometimes a transient error,
such as a &lt;code&gt;504&lt;/code&gt;,
will linger on,
making all subsequent requests &amp;quot;fail&amp;quot;,
until a cache eviction
(because an unrelated code path went through several PEPs)
causes a retry.
These are exactly the kind of bugs which lead to warnings
against shared mutable state!&lt;/p&gt;
&lt;p&gt;If we want to cache,
let us own it explicitly in the using code,
and not have a global implementation dictate it.
Fortunately,
there is a way to
&lt;em&gt;properly&lt;/em&gt;
use the LRU cache.&lt;/p&gt;
&lt;p&gt;First,
remove the decorator from the implementation:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def get_pep(num):
    'Retrieve text of a Python Enhancement Proposal'
    # Same code as an in official example
&lt;/pre&gt;
&lt;p&gt;Then, in the &lt;em&gt;using code&lt;/em&gt;,
build a cache:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def analyze_peps():
    cached_get_pep = lru_cache(maxsize=32)(get_pep)
    all_peps, pep_by_type = analyze_index(cached_get_pep(0))
    words1 = get_words_in_peps(cached_get_pep, all_peps)
    words2 = get_words_in_informational(cached_get_pep,
                                        pep_by_type[&amp;quot;Informational&amp;quot;])
    do_something(words1, words2)
&lt;/pre&gt;
&lt;p&gt;Notice that in this example,
the lifetime of the cache is relatively clear:
we create it in the beginning of the function,
passed it to called functions,
and then it goes out of scope and is deleted.
(Barring one of those functions sneakily keeping a reference,
which would be a bad implementation,
and visible when reviewing it.)&lt;/p&gt;
&lt;p&gt;This means we do not have to worry about cached failures if the function
is retried.
If we retry &lt;code&gt;analyze_peps&lt;/code&gt;,
we know that it will retry retrieving any PEPs,
even if those failed before.&lt;/p&gt;
&lt;p&gt;If we wanted the cache to persist between invocations of the function,
the right solution would be to move it one level up:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def analyze_peps(cached_get_peps):
    # ...
&lt;/pre&gt;
&lt;p&gt;Then it is the caller's responsibility to maintain the cache:
once again,
we avoid shared mutable state by making the state management
be explicit.&lt;/p&gt;
&lt;p&gt;In this example,
based on the official &lt;cite&gt;lru_cache&lt;/cite&gt; documentation,
we used a network-based function to show some of the issues with a global cache.
Often,
&lt;cite&gt;lru_cache&lt;/cite&gt; is used for performance reasons.
However,
even there,
it is easy to create issues:
for example,
one function using non-common inputs to the LRU-cached functions
can cause massive cache evictions,
with surprising performance impacts!&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;lru_cache&lt;/code&gt; implementation is great:
but using it as a decorator means making the cache global,
with all the bad effects.
Using it locally is a good use of a great implementation.&lt;/p&gt;
&lt;p&gt;(Thanks to
Adi Stav,
Steve Holden,
and James Abel
for their feedback
on early drafts.
Any issues that remain
are my responsibility.)&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Don't Make It Callable</title><link href="https://orbifold.xyz/not-callable.html" rel="alternate"></link><published>2019-02-13T22:30:00-08:00</published><updated>2019-02-13T22:30:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2019-02-13:/not-callable.html</id><summary type="html">&lt;p&gt;There is a lot of code that overloads the
&lt;code&gt;__call__&lt;/code&gt;
method.
This is the method that
&amp;quot;calling&amp;quot;
an object activates:
&lt;code&gt;something(x, y, z)&lt;/code&gt;
will call
&lt;code&gt;something.__call__(x, y, z)&lt;/code&gt;
if
&lt;code&gt;something&lt;/code&gt;
is a member of a Python-defined class.&lt;/p&gt;
&lt;p&gt;At first,
like every operator overload,
this seems like a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There is a lot of code that overloads the
&lt;code&gt;__call__&lt;/code&gt;
method.
This is the method that
&amp;quot;calling&amp;quot;
an object activates:
&lt;code&gt;something(x, y, z)&lt;/code&gt;
will call
&lt;code&gt;something.__call__(x, y, z)&lt;/code&gt;
if
&lt;code&gt;something&lt;/code&gt;
is a member of a Python-defined class.&lt;/p&gt;
&lt;p&gt;At first,
like every operator overload,
this seems like a nifty idea.
And then,
like most operator overload cases,
we need to ask:
why?
Why is this better than a named method?&lt;/p&gt;
&lt;p&gt;The first use-case is easily done better with a named method,
and more readably:
accepting callbacks.
Let's say that the function
&lt;code&gt;interesting_files&lt;/code&gt;
will call the passed-in callback with names of interesting files.&lt;/p&gt;
&lt;p&gt;We can,
of course,
use
&lt;code&gt;__call__&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class PrefixMatcher:

    def __init__(self, prefix):
        self.prefix = prefix
        self.matches = []

    def __call__(self, name):
        if name.startswith(self.prefix):
            self.matches.append(name)

    def random_match(self):
        return random.choice(self.matches)

matcher = PrefixMatcher(&amp;quot;prefix&amp;quot;)
interesting_files(matcher)
print(matcher.random_match())
&lt;/pre&gt;
&lt;p&gt;But it is more readable,
and obvious,
if we...don't:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class PrefixMatcher:

    def __init__(self, prefix):
        self.prefix = prefix
        self.matches = []

    def get_name(self, name):
        if name.startswith(self.prefix):
            self.matches.append(name)

    def random_match(self):
        return random.choice(self.matches)

matcher = PrefixMatcher(&amp;quot;prefix&amp;quot;)
interesting_files(matcher.get_name)
print(matcher.random_match())
&lt;/pre&gt;
&lt;p&gt;We can pass the
&lt;code&gt;matcher.get_name&lt;/code&gt;
method,
&lt;em&gt;which is already callable&lt;/em&gt;
directly to
&lt;code&gt;interesting_files&lt;/code&gt;:
there is no need to make &lt;code&gt;PrefixMatcher&lt;/code&gt;
callable
by overloading
&lt;code&gt;__call__&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If something really
&lt;em&gt;is&lt;/em&gt;
nothing more than a function call with some extra arguments,
then either a closure or a partial would be appropriate.&lt;/p&gt;
&lt;p&gt;In the example above,
the
&lt;code&gt;random_match&lt;/code&gt;
method was added to make sure that the class
&lt;code&gt;PrefixMatcher&lt;/code&gt;
is justified.
If this was not there,
either of these implementations would be more appropriate:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def prefix_matcher(prefix):
    matches = []
    def callback(name):
        if name.startswith(prefix):
            matches.append(name)
    return callback, matches

matcher, matches = prefix_matcher(&amp;quot;prefix&amp;quot;)
interesting_files(matcher)
print(random.choice(matches))
&lt;/pre&gt;
&lt;p&gt;This uses the function
&lt;em&gt;closure&lt;/em&gt;
to capture some variables and return a function.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def prefix_matcher(prefix, matches, name):
    if name.startswith(prefix):
        matches.append(name)

matches = []
matcher = functools.partial(prefix_matcher, &amp;quot;prefix&amp;quot;, matches)
interesting_files(matcher)
print(random.choice(matches))
&lt;/pre&gt;
&lt;p&gt;This uses the &lt;code&gt;funcotools.partial&lt;/code&gt; functions
to construct a function that has some of the arguments
&amp;quot;prepared&amp;quot;.&lt;/p&gt;
&lt;p&gt;There is one important use case for &lt;code&gt;__call__&lt;/code&gt;,
but it is specialized:
it is a powerful tool when constructing a
Python-based &lt;a class="reference external" href="https://orbifold.xyz/python-dsl.html"&gt;DSL&lt;/a&gt;.
Indeed,
this is exactly the time when we want to trade away
&amp;quot;doing exactly when the operator always does&amp;quot;
in favor of
&amp;quot;succint syntax dedicated to the task at hand.&amp;quot;&lt;/p&gt;
&lt;p&gt;A good example of such a DSL is &lt;a class="reference external" href="https://github.com/twisted/nevow/blob/master/nevow/stan.py"&gt;stan&lt;/a&gt;,
where the &lt;code&gt;__call__&lt;/code&gt; function is used to
construct XML tags with attributes:
&lt;code&gt;div(style=&amp;quot;color: blue&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In almost every other case,
avoid the temptation to make your objects callable.
They are not functions,
and should not be pretending.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Staying Safe with Open Source</title><link href="https://orbifold.xyz/open-source-safety.html" rel="alternate"></link><published>2019-01-24T21:00:00-08:00</published><updated>2019-01-24T21:00:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2019-01-24:/open-source-safety.html</id><summary type="html">&lt;p&gt;A couple of months ago,
a successful attack against the Node ecosystem
resulted in stealing an undisclosed amount
of bitcoins from
&lt;a class="reference external" href="https://blog.bitpay.com/npm-package-vulnerability-copay/"&gt;CoPay wallets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The technical flow of the attack is well-summarized
by the &lt;a class="reference external" href="https://blog.npmjs.org/post/180565383195/details-about-the-event-stream-incident"&gt;NPM blog post&lt;/a&gt;.
Quick summary:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;cite&gt;nodemon&lt;/cite&gt;, a popular way to run Node applications, depends on &lt;cite&gt;event-stream&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;The …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;A couple of months ago,
a successful attack against the Node ecosystem
resulted in stealing an undisclosed amount
of bitcoins from
&lt;a class="reference external" href="https://blog.bitpay.com/npm-package-vulnerability-copay/"&gt;CoPay wallets&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The technical flow of the attack is well-summarized
by the &lt;a class="reference external" href="https://blog.npmjs.org/post/180565383195/details-about-the-event-stream-incident"&gt;NPM blog post&lt;/a&gt;.
Quick summary:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;cite&gt;nodemon&lt;/cite&gt;, a popular way to run Node applications, depends on &lt;cite&gt;event-stream&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;The &lt;cite&gt;event-stream&lt;/cite&gt; maintainer has not had time to maintain it.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;right9control&lt;/cite&gt; asked &lt;cite&gt;event-stream&lt;/cite&gt; maintainer for commit privileges to help maintain it.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;right9control&lt;/cite&gt; added a dependency on a new library, &lt;cite&gt;flatmap-stream&lt;/cite&gt;.&lt;/li&gt;
&lt;li&gt;&lt;cite&gt;flatmap-stream&lt;/cite&gt; contained malicious code to steal wallets.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="section" id="obfuscation"&gt;
&lt;h2&gt;Obfuscation&lt;/h2&gt;
&lt;p&gt;A &lt;em&gt;number&lt;/em&gt; of methods were done to disguise the attack.&lt;/p&gt;
&lt;p&gt;The dependency was an added in a minor version,
and a new version was immediately released.
This meant that most projects,
which pin to minor,
would get the updates,
while it stayed invisible on the main GitHub landing page,
or the main npm landing page.&lt;/p&gt;
&lt;p&gt;The malicious code was only in the minified version of the library
that was uploaded to &lt;code&gt;npm.org&lt;/code&gt;.
The non-minified source code on both GitHub and &lt;code&gt;npm.org&lt;/code&gt;,
as well as the minified code on GitHub,
did not contain the malicious code.&lt;/p&gt;
&lt;p&gt;The malicious code was encrypted with a key that used the
description of &lt;em&gt;other&lt;/em&gt; packages in the dependency tree.
That made it impossible to understand the attack
without guessing which package decrypts it.&lt;/p&gt;
&lt;p&gt;The combination of all those methods meant that the
problem remained undetected for &lt;em&gt;two months&lt;/em&gt;.
It was only luck that detected it:
the decryption code was using a &lt;a class="reference external" href="https://github.com/remy/nodemon/issues/1442"&gt;deprecated function&lt;/a&gt;,
and investigating the deprecation message led to the issue
being figured out.&lt;/p&gt;
&lt;p&gt;This bears thinking about:
if the code had been written &lt;em&gt;slightly better&lt;/em&gt;,
the problem would have &lt;em&gt;still&lt;/em&gt; be happening now,
and nobody would be the wiser.
We should not discount the possibility that &lt;em&gt;currently&lt;/em&gt;,
someone who followed the same playbook
but managed to use AES correctly is still attacking
some package,
and we have no idea.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="solutions-and-non-solutions"&gt;
&lt;h2&gt;Solutions and Non-Solutions&lt;/h2&gt;
&lt;p&gt;I want to discuss some non-solutions in trying to understand
how this problem came about.&lt;/p&gt;
&lt;div class="section" id="better-vetting-of-maintainers"&gt;
&lt;h3&gt;Better Vetting of Maintainers&lt;/h3&gt;
&lt;p&gt;It is true,
the person who made this commit had an
obviously-auto-generated username
(&lt;code&gt;&amp;lt;word&amp;gt;-&amp;lt;digit&amp;gt;-&amp;lt;word&amp;gt;&lt;/code&gt;)
and made few contributions before getting control.
But short of meeting people in person,
I do not think this would work.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Attackers adapt&lt;/em&gt;.
Ask for better usernames,
they will generate
&amp;quot;&amp;lt;firstname&amp;gt;-&amp;lt;lastname&amp;gt;&amp;quot;
names.
Are you going to disallow my GitHub username,
&lt;code&gt;moshez&lt;/code&gt;?
Ask for more contributions,
you will get some trivial-code-that's-uploaded-to-npm,
autogenerated a bit to disguise it.
Ask for longer commit history,
they'll send fixes to trivial issues.&lt;/p&gt;
&lt;p&gt;Remember that this is a &lt;em&gt;distributed&lt;/em&gt; problem,
with each lead maintainer having to come up with a vetting procedure.
Otherwise,
you get usernames through the vetting process,
and then you use those to spam maintainers,
who now are &lt;em&gt;sure&lt;/em&gt; they can trust those &amp;quot;vetted&amp;quot;.&lt;/p&gt;
&lt;p&gt;In short,
this is one of the classical defenses
that fails to take into considerations that attackers adapt.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="any-solution-that-depends-on-javascript-specific-things"&gt;
&lt;h3&gt;Any Solution That Depends on JavaScript-specific Things&lt;/h3&gt;
&lt;p&gt;This attack could easily have been executed against
PyPI
or
RubyGems.
Any solution that relies on JavaScript's ability to
have a &lt;a class="reference external" href="https://medium.com/agoric/pola-would-have-prevented-the-event-stream-incident-45653ecbda99"&gt;least-access&lt;/a&gt;-based solution only helps
make sure that these attacks go elsewhere.&lt;/p&gt;
&lt;p&gt;It's not &lt;em&gt;bad&lt;/em&gt; to do it.
It just does not solve the root cause.&lt;/p&gt;
&lt;p&gt;This also means that &amp;quot;stop relying on minified code&amp;quot;
is a non-solution in the world where we encourage
Python engineers
to
&lt;a class="reference external" href="https://hynek.me/articles/sharing-your-labor-of-love-pypi-quick-and-dirty/"&gt;upload wheels&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="any-solution-that-depends-on-audit-code"&gt;
&lt;h3&gt;Any Solution That Depends on &amp;quot;Audit Code&amp;quot;&lt;/h3&gt;
&lt;p&gt;A typical medium-sized JavaScript client app depends on
some 2000 packages.
Auditing each one,
on each update,
would make using third-packages untenable.
This means that start-ups playing fast and loose with
these rules would gain an advantage over those who do not.
Few companies can afford that pay that much for security.&lt;/p&gt;
&lt;p&gt;Hell,
we &lt;a class="reference external" href="https://hackernoon.com/im-harvesting-credit-card-numbers-and-passwords-from-your-site-here-s-how-9a8cb347c5b5"&gt;knew this was a possibility&lt;/a&gt;
a few months before the &lt;em&gt;attack was initiated&lt;/em&gt;
and still nobody did code auditing.
Starting now would mostly mean availability bias,
which means it would be over as soon as another
couple of months go by without a documented attack.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="partial-solution-open-source-sustainability"&gt;
&lt;h3&gt;Partial Solution -- Open Source Sustainability&lt;/h3&gt;
&lt;p&gt;If we &lt;a class="reference external" href="https://www.quansight.com/open-source-partnerships"&gt;could&lt;/a&gt; &lt;a class="reference external" href="https://tidelift.com/"&gt;just&lt;/a&gt; &lt;a class="reference external" href="https://twitter.com/jacobian/status/1086389182157733889"&gt;pay&lt;/a&gt; maintainers,
they would be slightly more comfortable maintaining
packages and less desperate for help.
This means that it would become &lt;em&gt;inherently&lt;/em&gt;
slightly harder to quickly become a new maintainer.&lt;/p&gt;
&lt;p&gt;However,
it is worthwhile to consider that this still would not
solve the subtler &amp;quot;adding a new dependency&amp;quot;
attack described earlier:
just making a &amp;quot;good&amp;quot; library and getting other libraries
to depend on it.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;I do not know how to prevent the &amp;quot;next&amp;quot; attack.
&lt;a class="reference external" href="https://www.hillelwayne.com/post/stamping-on-eventstream/"&gt;Hillel&lt;/a&gt; makes the point that a lot of &amp;quot;root causes&amp;quot;
will only prevent almost-exact repeats,
while failing to address trivial variations.
Remember that &lt;em&gt;one trivial variation&lt;/em&gt;,
avoiding deprecation warnings,
would have made this attack much more successful.&lt;/p&gt;
&lt;p&gt;I am concerned that,
as an industry,
we are not discussing this attack a mere
&lt;em&gt;two months&lt;/em&gt;
after discovery and mitigation.
We are vulnerable.
We will be attacked again.
We need to be prepared.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Checking in JSON</title><link href="https://orbifold.xyz/check-in-json.html" rel="alternate"></link><published>2019-01-08T22:00:00-08:00</published><updated>2019-01-08T22:00:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2019-01-08:/check-in-json.html</id><summary type="html">&lt;p&gt;JSON is a useful format.
It might not be &lt;em&gt;ideal&lt;/em&gt; for hand-editing,
but it does have the benefit that it
&lt;em&gt;can&lt;/em&gt;
be hand-edited,
&lt;em&gt;and&lt;/em&gt;
it is easy enough to manipulate programmatically.&lt;/p&gt;
&lt;p&gt;For this reason,
it is likely that at some point or another,
checking in a JSON file into your …&lt;/p&gt;</summary><content type="html">&lt;p&gt;JSON is a useful format.
It might not be &lt;em&gt;ideal&lt;/em&gt; for hand-editing,
but it does have the benefit that it
&lt;em&gt;can&lt;/em&gt;
be hand-edited,
&lt;em&gt;and&lt;/em&gt;
it is easy enough to manipulate programmatically.&lt;/p&gt;
&lt;p&gt;For this reason,
it is likely that at some point or another,
checking in a JSON file into your repository will seem like a good idea.
Perhaps it is even beyond your control:
some existing technology uses JSON as a configuration file,
and the easiest thing is to go with it.&lt;/p&gt;
&lt;p&gt;It is useful to still keep the benefit of programmatic manipulation.
For example,
if the JSON file encodes a list of numbers,
and we want to add &lt;code&gt;1&lt;/code&gt; to every even number,
we can do:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
with open(&amp;quot;myfile.json&amp;quot;) as fp:
    content = json.load(fp)
content = [x + (2 % i) for i, x in enumerate(content)]
with open(&amp;quot;myfile.json&amp;quot;, &amp;quot;w&amp;quot;) as fp:
    json.dumps(fp, content)
&lt;/pre&gt;
&lt;p&gt;However,
this does cause a problem:
presumably,
before,
the list was formatted in a visually-pleasing way.
Having dumped it,
now the diff is unreadable --
and hard to audit visually.&lt;/p&gt;
&lt;p&gt;One solution is to enforce
&lt;em&gt;consistent&lt;/em&gt;
formatting.&lt;/p&gt;
&lt;p&gt;For example,
using &lt;code&gt;pytest&lt;/code&gt;,
we can write the following test:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def test_formatting():
    with open(&amp;quot;myfile.json&amp;quot;) as fp:
        raw = fp.read()
    content = json.loads(raw)
    redumped = json.dumps(content, indent=4) + &amp;quot;\n&amp;quot;
    assert raw == redumped
&lt;/pre&gt;
&lt;p&gt;Assuming we gate merges to the main branches on passing tests,
it is impossible to check in something that breaks the formatting.
Automated programs merely need to remember to give the right options
to &lt;code&gt;json.dumps&lt;/code&gt;.
However,
what happens when humans make mistakes?&lt;/p&gt;
&lt;p&gt;It turns out that Python already has a command-line tool to reformat:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ python -m json.tool myfile.json &amp;gt; myfile.json.formatted
$ mv myfile.json.formatted myfile.json
&lt;/pre&gt;
&lt;p&gt;A nice test failure will remind the programmer of this
trick,
so that it is easy to do and check in.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Office Hours</title><link href="https://orbifold.xyz/office-hours.html" rel="alternate"></link><published>2018-12-08T21:30:00-08:00</published><updated>2018-12-08T21:30:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2018-12-08:/office-hours.html</id><summary type="html">&lt;p&gt;If you want to speak to me,
1-on-1,
about anything,
I want to be able to help.
I am a busy person.
I have commitments.
But I will make the time to talk to you.&lt;/p&gt;
&lt;div class="section" id="why"&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I want to help.&lt;/li&gt;
&lt;li&gt;I think I'll enjoy it. I like talking to people …&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;If you want to speak to me,
1-on-1,
about anything,
I want to be able to help.
I am a busy person.
I have commitments.
But I will make the time to talk to you.&lt;/p&gt;
&lt;div class="section" id="why"&gt;
&lt;h2&gt;Why?&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;I want to help.&lt;/li&gt;
&lt;li&gt;I think I'll enjoy it. I like talking to people.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="what"&gt;
&lt;h2&gt;What?&lt;/h2&gt;
&lt;p&gt;I can offer opinions and experience
on programming in general,
Python,
UNIX,
the software industry
and other topics.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-did-you-come-up-with-the-idea"&gt;
&lt;h2&gt;How did you come up with the idea?&lt;/h2&gt;
&lt;p&gt;I am indebted to &lt;a class="reference external" href="https://robertheaton.com/2018/10/22/slash-office-hours/"&gt;Robert Heaton&lt;/a&gt;
for the idea and encouragement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="should-i"&gt;
&lt;h2&gt;Should I...?&lt;/h2&gt;
&lt;p&gt;Sure!
Especially if you have few connections in the industry,
and have questions,
I can talk to you.
I am a fluent speaker of English and Hebrew,
so you do need to be able to converse in one of those...&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="mailto:moshez&amp;#64;zadka.club"&gt;E-mail me&lt;/a&gt;!&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Common Mistakes about Generational Garbage Collection</title><link href="https://orbifold.xyz/garbage.html" rel="alternate"></link><published>2018-11-28T19:00:00-08:00</published><updated>2018-11-28T19:00:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2018-11-28:/garbage.html</id><summary type="html">&lt;p&gt;(Thanks to Nelson Elhage and Saivickna Raveendran
for their feedback on earlier drafts.
All mistakes that remain are mine.)&lt;/p&gt;
&lt;p&gt;When talking about garbage collection,
the notion of &amp;quot;generational collection&amp;quot; comes up.
The usual motivation given for generational garbage collection
is that
&amp;quot;most objects die young&amp;quot;.
Therefore,
we put the objects …&lt;/p&gt;</summary><content type="html">&lt;p&gt;(Thanks to Nelson Elhage and Saivickna Raveendran
for their feedback on earlier drafts.
All mistakes that remain are mine.)&lt;/p&gt;
&lt;p&gt;When talking about garbage collection,
the notion of &amp;quot;generational collection&amp;quot; comes up.
The usual motivation given for generational garbage collection
is that
&amp;quot;most objects die young&amp;quot;.
Therefore,
we put the objects that survive a collection cycle
(and therefore have proven some resistance)
in a separate generation
that we scan less often.&lt;/p&gt;
&lt;p&gt;This is an optimization if the probability of an object that
has survived a cycle to be garbage by the time the &lt;em&gt;next&lt;/em&gt;
collection cycle has come around is &lt;em&gt;lower&lt;/em&gt;
than the probability of a newly allocated object to be garbage.&lt;/p&gt;
&lt;p&gt;In a foundational paper
&lt;a class="reference external" href="https://dl.acm.org/citation.cfm?id=152747"&gt;Infant mortality and generational garbage collection&lt;/a&gt;,
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Henry_Baker_(computer_scientist)"&gt;Dr. Baker&lt;/a&gt;
laid out an argument deceptive in its simplicity.&lt;/p&gt;
&lt;p&gt;Dr. Baker asks the question:
&amp;quot;Can we model a process where most objects become garbage fast,
but generational garbage collection would not improve things?&amp;quot;.
His answer is: of course.
This is exactly the probability distribution of radioactive decay.&lt;/p&gt;
&lt;p&gt;If we have a &amp;quot;fast decaying element&amp;quot;,
say with a half-life of one second,
than 50% of the element's atoms decay in one second.
However,
keeping the atoms that &amp;quot;survived a generation&amp;quot;
apart from newly created atoms is unhelpful:
all remaining atoms decay with probability of 50%.&lt;/p&gt;
&lt;p&gt;We can bring the probability for &amp;quot;young garbage&amp;quot;
as high up as we want:
a half-life of half a second,
a quarter second,
or a microsecond.
However,
that is not going to make generational garbage collection any better
than a straightforward mark-and-sweep.&lt;/p&gt;
&lt;p&gt;The Poisson distribution,
which models radioactive decay,
has the property that
&lt;code&gt;P(will die in one second)&lt;/code&gt; might be high,
but
&lt;code&gt;P(will die in one second|survived an hour)&lt;/code&gt;
is &lt;em&gt;exactly the same&lt;/em&gt;:
the past does not give us information about the future.
This is called
the &amp;quot;no memory property&amp;quot;
of Poisson distribution.&lt;/p&gt;
&lt;p&gt;When talking about generational garbage collection,
and especially if we are making theoretical arguments about its helpfulness,
we need to make arguments about the &lt;em&gt;distribution&lt;/em&gt;,
not about the &lt;em&gt;averages&lt;/em&gt;.
In other words,
we need to make an argument that &lt;em&gt;some kinds of objects&lt;/em&gt;
hang around for a long time,
while others tend to die quickly.&lt;/p&gt;
&lt;p&gt;One way to model it
is
&amp;quot;objects are bimodal&amp;quot;:
if we model objects as belonging to a mix of two Gaussian distributions,
one with a small average
and one with a big average,
then the motivation for generational collection is clear:
if we tune it right,
most objects that survive the first cycle
belong to the other distribution,
and will survive for a few more cycles.&lt;/p&gt;
&lt;p&gt;To summarize:
please choose your words carefully.
&amp;quot;Young objects are more likely to die&amp;quot;
is an accurate motivation,
&amp;quot;Most objects die young&amp;quot;
is not.
This goes doubly if you &lt;em&gt;do&lt;/em&gt; understand the subtlety:
do not assume the people you are talking with have
an accurate model of how garbage works.&lt;/p&gt;
&lt;p&gt;As an aside,
some languages decided that generational collection is more trouble than it
is worth because the objects
that &amp;quot;die young&amp;quot;
go through a different allocation style.
For example,
Go has garbage collection,
but it tries to allocate objects on the stack if it can guarantee
at compile-time they do not &amp;quot;escape&amp;quot;.
Because of that,
the &amp;quot;first generation&amp;quot;
is collected at stack popping time.&lt;/p&gt;
&lt;p&gt;CPython has generational garbage collection,
but it also has a &amp;quot;zeroth generation&amp;quot; of sorts:
when functions return,
all local variables get a &amp;quot;decref&amp;quot;:
a decrease in reference count.
Those for whom that results in a 0 reference counts,
which is often quite a few,
get collected immediately.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>The Conference That Was Almost Called "Pythaluma"</title><link href="https://orbifold.xyz/nbpy-2018.html" rel="alternate"></link><published>2018-11-07T00:00:00-08:00</published><updated>2018-11-07T00:00:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2018-11-07:/nbpy-2018.html</id><summary type="html">&lt;p&gt;As my friend &lt;a class="reference external" href="https://www.thursdaybram.com/"&gt;Thursday&lt;/a&gt;
said in &lt;a class="reference external" href="https://2018.northbaypython.org/schedule/presentation/15/"&gt;her excellent talk&lt;/a&gt;
(sadly, not up as of this time)
naming things is important.
Avoiding in-jokes is,
in general,
a good idea.&lt;/p&gt;
&lt;p&gt;It is with mixed feelings,
therefore,
that my pun-loving heart reacted to Chris's
disclosure that the most common suggestion
was to call …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As my friend &lt;a class="reference external" href="https://www.thursdaybram.com/"&gt;Thursday&lt;/a&gt;
said in &lt;a class="reference external" href="https://2018.northbaypython.org/schedule/presentation/15/"&gt;her excellent talk&lt;/a&gt;
(sadly, not up as of this time)
naming things is important.
Avoiding in-jokes is,
in general,
a good idea.&lt;/p&gt;
&lt;p&gt;It is with mixed feelings,
therefore,
that my pun-loving heart reacted to Chris's
disclosure that the most common suggestion
was to call the conference &amp;quot;Pythaluma&amp;quot;.
However,
he decided to go with the straightforward legible name,
&amp;quot;North Bay Python&amp;quot;.&lt;/p&gt;
&lt;p&gt;North of the city by the bay,
lies the quiet yet chic city of Petaluma,
where North Bay Python takes place.
In a gold-rush-city turned
sleepy wine country,
a historical cinema turned
live show venu
hosted Python enthusiasts
in a single-track conference.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://mariatta.ca/"&gt;Mariatta&lt;/a&gt; opened
the conference with her gut-wrenching
talk about being a core Python developer.
&amp;quot;Open source sustainability&amp;quot; might be abstract words,
but it is easy to forget that for a language
that's somewhere between the first
and fifth most important
(depending on a metric)
there are less than a hundred people supporting its core --
and if they stop, the world breaks.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://twitter.com/r0ml?lang=en"&gt;R0ml&lt;/a&gt; opened the second day
of the conference talking about how:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Servers are unethical.&lt;/li&gt;
&lt;li&gt;Python is the new COBOL.&lt;/li&gt;
&lt;li&gt;I put a lot of pressure on him &lt;a class="reference external" href="https://www.youtube.com/watch?v=h5fmhYc4U-Y&amp;amp;feature=youtu.be&amp;amp;t=1156"&gt;before his talk&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Talks are still being uploaded to the
&lt;a class="reference external" href="https://www.youtube.com/channel/UCLc1vUexbRTlRBJcUG9U6ug"&gt;YouTube channel&lt;/a&gt;,
and I have already had our engineering team at work
watch &lt;a class="reference external" href="https://codeandtea.com/"&gt;Hayley's&lt;/a&gt; &lt;a class="reference external" href="https://www.youtube.com/watch?v=1Jp6h66Yh2M"&gt;post-mortem of Jurassic Park&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you missed all of it,
I have two pieces of advice:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Watch the videos. Maybe even &lt;a class="reference external" href="https://www.youtube.com/watch?v=nfeExDL7B1c&amp;amp;feature=youtu.be"&gt;mine&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://2018.northbaypython.org/"&gt;Sign up&lt;/a&gt; to the mailing list so you will not miss next year's.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you went there,
I hope you told me hi.
Either way,
please say hi next year!&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Why No Dry Run?</title><link href="https://orbifold.xyz/no-dry-run.html" rel="alternate"></link><published>2018-10-06T00:00:00-07:00</published><updated>2018-10-06T00:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2018-10-06:/no-dry-run.html</id><summary type="html">&lt;p&gt;(Thanks to &lt;a class="reference external" href="https://twitter.com/mistermocha"&gt;Brian&lt;/a&gt; for his feedback.
All mistakes and omissions  that remain are mine.)&lt;/p&gt;
&lt;p&gt;Some commands have a &lt;code&gt;--dry-run&lt;/code&gt; option,
which simulates running the command but without taking effect.
Sometimes the option exists for speed reasons:
just pretending to do something is faster than doing it.
However,
more often this …&lt;/p&gt;</summary><content type="html">&lt;p&gt;(Thanks to &lt;a class="reference external" href="https://twitter.com/mistermocha"&gt;Brian&lt;/a&gt; for his feedback.
All mistakes and omissions  that remain are mine.)&lt;/p&gt;
&lt;p&gt;Some commands have a &lt;code&gt;--dry-run&lt;/code&gt; option,
which simulates running the command but without taking effect.
Sometimes the option exists for speed reasons:
just pretending to do something is faster than doing it.
However,
more often this is because doing it can cause big,
possibly detrimental,
effects,
and it is nice to be able to see what would happen
before running the script.&lt;/p&gt;
&lt;p&gt;For example,
&lt;code&gt;ansible-playbook&lt;/code&gt; has the &lt;code&gt;--check&lt;/code&gt; option,
which will not actually have any effect:
it will just report what &lt;code&gt;ansible&lt;/code&gt; would have done.
This is useful when editing a playbook
or changing the configuration.&lt;/p&gt;
&lt;p&gt;However,
this is the worst possible default.
If we have already decided that our command can cause much harm,
and one way to mitigate the harm is to run it in a &amp;quot;dry run&amp;quot;
mode and have a human check that this makes sense,
why is &amp;quot;cause damage&amp;quot; the default?&lt;/p&gt;
&lt;p&gt;As someone in SRE/DevOps jobs,
many of the utilities I run can cause great harm without care.
They are built to destroy whole environments in one go,
or to upgrade several services,
or to clean out unneeded data.
Running it against the wrong database,
or against the wrong environment,
can wreak all kinds of havoc:
from disabling a whole team for a day
to actual financial harm to the company.&lt;/p&gt;
&lt;p&gt;For this reason,
the default of every tool I write is to run in dry run mode,
and when wanting to actually have effect,
explicitly specify &lt;code&gt;--no-dry-run&lt;/code&gt;.
This means that my finger accidentally slipping on the enter key
just causes something to appear on my screen.
After I am satisfied with the command,
I up-arrow and add
&lt;code&gt;--no-dry-run&lt;/code&gt; to the end.&lt;/p&gt;
&lt;p&gt;I now do it as a matter of course,
even for cases where the stakes are lower.
For example,
the utility that publishes this blog has a &lt;code&gt;--no-dry-run&lt;/code&gt;
that publishes the blog.
When run without arguments,
it renders the blog locally so I can check it for errors.&lt;/p&gt;
&lt;p&gt;So I really have no excuses...
When I write a tool for serious production system,
I always implement a &lt;code&gt;--no-dry-run&lt;/code&gt; option,
and have dry runs by default.
What about you?&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Managing Dependencies</title><link href="https://orbifold.xyz/dependencies.html" rel="alternate"></link><published>2018-09-02T20:00:00-07:00</published><updated>2018-09-02T20:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2018-09-02:/dependencies.html</id><summary type="html">&lt;p&gt;(Thanks to &lt;a class="reference external" href="https://twitter.com/MRice88"&gt;Mark Rice&lt;/a&gt; for his helpful suggestions.
Any mistakes or omissions that remain are my responsibility.)&lt;/p&gt;
&lt;p&gt;Some Python projects are designed to be libraries,
consumed by other projects.
These are most of the things people consider &amp;quot;Python projects&amp;quot;:
for example, Twisted, Flask, and most other open source tools.
However …&lt;/p&gt;</summary><content type="html">&lt;p&gt;(Thanks to &lt;a class="reference external" href="https://twitter.com/MRice88"&gt;Mark Rice&lt;/a&gt; for his helpful suggestions.
Any mistakes or omissions that remain are my responsibility.)&lt;/p&gt;
&lt;p&gt;Some Python projects are designed to be libraries,
consumed by other projects.
These are most of the things people consider &amp;quot;Python projects&amp;quot;:
for example, Twisted, Flask, and most other open source tools.
However,
things like &lt;a class="reference external" href="https://github.com/mu-editor/mu"&gt;mu&lt;/a&gt;
are sometimes installed as an end-user artifact.
More commonly,
many web services are written as deployable Python applications.
A good example is the issue tracking project
&lt;a class="reference external" href="https://trac.edgewall.org/"&gt;trac&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Projects that are deployed must be deployed with their dependencies,
and with the dependencies of those dependencies,
and so forth.
Moreover,
at deployment time,
a &lt;em&gt;specific&lt;/em&gt; version must be deployed.
If a project declares a dependency of &lt;code&gt;flask&amp;gt;=1.0.1&lt;/code&gt;,
for example,
something needs to decide whether to deploy &lt;code&gt;flask 1.0.1&lt;/code&gt;
or &lt;code&gt;flask 1.0.2&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For clarity,
in this text,
we will refer to the &lt;em&gt;declared&lt;/em&gt; compatibility statements
in something like &lt;code&gt;setup.py&lt;/code&gt;
(e.g., &lt;code&gt;flask&amp;gt;=1.0.1&lt;/code&gt;)
as &amp;quot;intent&amp;quot; dependencies,
since they document programmer intent.
The &lt;em&gt;specific&lt;/em&gt; dependencies that are eventually deployed
will be referred as the &amp;quot;expressed&amp;quot; dependencies,
since they are expressed in the actual deployed artifact
(for example, a Docker image).&lt;/p&gt;
&lt;p&gt;Usually, &amp;quot;intent&amp;quot; dependencies are defined in &lt;code&gt;setup.py&lt;/code&gt;.
This does not &lt;em&gt;have&lt;/em&gt; to be the case,
but it almost always is:
since there is usually some &amp;quot;glue&amp;quot; code at the top,
keeping everything together,
it makes sense to treat it as a library --
albeit,
one that sometimes is not uploaded to any package index.&lt;/p&gt;
&lt;p&gt;When producing the deployed artifact,
we need to decide on how to generate the expressed dependencies.
There are two competing forces.
One is the desire to be current:
using the latest version of Django means getting all the latest bug fixes,
and means getting fixes to future bugs will require moving less versions.
The other is the desire to avoid changes:
when deploying a small bug fix,
changing all library versions to the
newest ones might introduce a lot of change.&lt;/p&gt;
&lt;p&gt;For this reason,
most projects will check in the &amp;quot;artifact&amp;quot;
(often called &lt;code&gt;requirements.txt&lt;/code&gt;)
into source control,
produce actual deployed versions from that,
and some procedure to update it.&lt;/p&gt;
&lt;p&gt;A similar story can be told about the development dependencies,
often defined as &lt;a class="reference external" href="https://setuptools.readthedocs.io/en/latest/setuptools.html#declaring-extras-optional-features-with-their-own-dependencies"&gt;extra&lt;/a&gt; &lt;code&gt;[dev]&lt;/code&gt; dependencies in
&lt;code&gt;setup.py&lt;/code&gt;,
and resulting in a file &lt;code&gt;dev-requirements.txt&lt;/code&gt; that
is checked into source control.
The pressures are a little different,
and indeed,
sometimes nobody bothers to check in &lt;code&gt;dev-requirements.txt&lt;/code&gt;
even when checking in &lt;code&gt;requirements.txt&lt;/code&gt;,
but the basic dynamic is similar.&lt;/p&gt;
&lt;p&gt;The worst procedure is probably &amp;quot;when someone remembers to&amp;quot;.
This is not usually anyone's top priority,
and most developers are busy with their regular day-to-day task.
When an upgrade is &lt;em&gt;necessary&lt;/em&gt; for some reason --
for example, a bug fix is available,
this can mean a lot of disruption.
Often this disruption manifests in that just upgrading one library
does not work.
It now depends on newer libraries,
so the entire dependency graph has to be updated,
all at once.
All intermediate &amp;quot;deprecation warnings&amp;quot; that might have been there
for several months have been skipped over,
and developers are suddenly faced with several breaking upgrades,
all at once.
The size of the change only grows with time,
and becomes less and less surmountable,
making it less and less likely that it will be done,
until it ends in a case of complete bitrot.&lt;/p&gt;
&lt;p&gt;Sadly,
however,
&amp;quot;when someone remembers to&amp;quot;
is the &lt;em&gt;default&lt;/em&gt; procedure in the absence of any explicit procedure.&lt;/p&gt;
&lt;p&gt;Some organizations,
having suffered through the disadvantages of &amp;quot;when someone remembers to&amp;quot;,
decide to go to the other extreme:
avoiding to check in the &lt;code&gt;requirements.txt&lt;/code&gt; completely,
and generating it on every artifact build.
However,
this means causing a lot of unnecessary churn.
It is impossible to fix a small bug without making sure that the
code is compatible with the latest versions of all libraries.&lt;/p&gt;
&lt;p&gt;A better way to approach the problem is to have an explicit process
of recalculating the expressed dependencies from the intent dependencies.
One approach is to manufacture,
with some cadence,
code change requests that update the &lt;code&gt;requirements.txt&lt;/code&gt;.
This means they are resolved like all code changes:
review, running automated tests, and
whatever other local processes are implemented.&lt;/p&gt;
&lt;p&gt;Another is to do those on a calendar based event.
This can be anything from a  manually-strongly-encouraged
&amp;quot;update Monday&amp;quot;,
where on Monday morning,
one of a developer tasks is to generate a &lt;code&gt;requirements.txt&lt;/code&gt;
updates for all projects they are responsible for,
to including it as part of a time-based release process:
for example,
generating it on a cadence that aligns with agile &amp;quot;sprints&amp;quot;,
as part of the release of the code changes in a particular sprints.&lt;/p&gt;
&lt;p&gt;When updating &lt;em&gt;does&lt;/em&gt; reveal an incompatibility
it needs to be resolved.
One way is to update the local code:
this certainly is the best thing to do when the problem is that the library
changed an API or changed an internal implementation detail that was being
used accidentally (...or intentionally).
However,
sometimes the new version has a bug in it that needs to be fixed.
In that case,
the &lt;em&gt;intent&lt;/em&gt; is now to avoid that version.
It is best to express the intent exactly as that:
&lt;code&gt;!=&amp;lt;bad version&amp;gt;&lt;/code&gt;.
This means when an even newer version is released,
hopefully fixing the bug,
it will be used.
If a new version is released without the bug fix,
we add another &lt;code&gt;!=&lt;/code&gt; clause.
This is painful,
and intentionally so.
Either we need to get the bug fixed in the library,
stop using the library,
or fork it.
Since we are falling further and further behind the latest version,
this is introducing risk into our code,
and the increasing &lt;code&gt;!=&lt;/code&gt; clauses will indicate this pain:
and encourage us to resolve it.&lt;/p&gt;
&lt;p&gt;The most important thing is to choose a &lt;em&gt;specific&lt;/em&gt; process for updating
the expressed dependencies,
clearly document it
and consistently follow it.
As long as such a process is chosen, documented and followed,
it is possible to avoid the bitrot issue.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Tests Should Fail</title><link href="https://orbifold.xyz/tests-fail.html" rel="alternate"></link><published>2018-08-02T22:30:00-07:00</published><updated>2018-08-02T22:30:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2018-08-02:/tests-fail.html</id><summary type="html">&lt;p&gt;(Thanks to &lt;a class="reference external" href="https://faingezicht.com/"&gt;Avy Faingezicht&lt;/a&gt; and &lt;a class="reference external" href="https://caremad.io/"&gt;Donald Stufft&lt;/a&gt;
for giving me encouragement and feedback.
All mistakes that remain are mine.)&lt;/p&gt;
&lt;p&gt;&amp;quot;eyes have they, but they see not&amp;quot; -- Psalms, 135:16&lt;/p&gt;
&lt;p&gt;Eyes are expensive to maintain.
They require protection from the elements,
constant lubrication,
behavioral adaptations to protect them and more.
However …&lt;/p&gt;</summary><content type="html">&lt;p&gt;(Thanks to &lt;a class="reference external" href="https://faingezicht.com/"&gt;Avy Faingezicht&lt;/a&gt; and &lt;a class="reference external" href="https://caremad.io/"&gt;Donald Stufft&lt;/a&gt;
for giving me encouragement and feedback.
All mistakes that remain are mine.)&lt;/p&gt;
&lt;p&gt;&amp;quot;eyes have they, but they see not&amp;quot; -- Psalms, 135:16&lt;/p&gt;
&lt;p&gt;Eyes are expensive to maintain.
They require protection from the elements,
constant lubrication,
behavioral adaptations to protect them and more.
However,
they give us a benefit.
They allow us to see:
to detect &lt;em&gt;differences&lt;/em&gt; in the environment.
Eyes register different signals when looking at an unripe fruit
and when looking at a ripe fruit.
This allows us to eat the ripe fruit,
and wait for the unripe fruit to ripen:
to behave differently,
in a way that ultimately furthers our goals
(eat yummy fruits).&lt;/p&gt;
&lt;p&gt;If our eyes did not get different signals
that influenced our behavior,
they would not be cost effective.
Evolution is a harsh mistress,
and the eyes would be quickly gone if the signals from them were not valuable.&lt;/p&gt;
&lt;p&gt;Writing tests is expensive.
It takes time to write them,
time to review them,
time to modify them as code evolves.
A test that never fails is like an eye that cannot see:
it always sends the same signal, &amp;quot;eat that fruit!&amp;quot;.
In order to be valuable,
a test must be able to fail,
and that failure must modify our behavior.&lt;/p&gt;
&lt;p&gt;The only way to be sure that a test can fail
is to see it fail.
Test-driven-development does it by writing tests that fail
before modifying the code.
But even when not using TDD,
making sure that tests fail is important.
Before checking in,
&lt;em&gt;break your code&lt;/em&gt;.
Best of all is to break the code in a way that would be realistic
for a maintenance programmer to do.
Then run the tests.
See them fail.
Check it in to the branch,
and watch CI fail.
Make sure that this CI failure is clearly communicated:
something big must be red,
and merging should be impossible,
or at least require using a clearly visible &amp;quot;override switch&amp;quot;.&lt;/p&gt;
&lt;p&gt;If there is no code modification that makes the test fail,
of if such code modification is weird or unrealistic,
it is not a good test.
If a test failure does not halt the CI with a visible message,
it is not a good CI.
These are false gods,
with eyes that do not see,
and mouths that do not speak.&lt;/p&gt;
&lt;p&gt;Real tests have failures.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Thank you, Guido</title><link href="https://orbifold.xyz/thank-you-guido.html" rel="alternate"></link><published>2018-08-02T21:30:00-07:00</published><updated>2018-08-02T21:30:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2018-08-02:/thank-you-guido.html</id><summary type="html">&lt;p&gt;When I was in my early 20s,
I was OK at programming,
but I definitely didn't like it.
Then,
one evening,
I read the Python tutorial.
That evening changed my mind.
I woke up the next morning,
like Neo in the matrix,
and knew Python.&lt;/p&gt;
&lt;p&gt;I was doing statistics at …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I was in my early 20s,
I was OK at programming,
but I definitely didn't like it.
Then,
one evening,
I read the Python tutorial.
That evening changed my mind.
I woke up the next morning,
like Neo in the matrix,
and knew Python.&lt;/p&gt;
&lt;p&gt;I was doing statistics at the time.
Python,
with Numeric,
was a powerful tool.
It definitely could do things that SPSS
could only dream about.
Suddenly,
something has happened that never happened before --
I started to enjoy programming.&lt;/p&gt;
&lt;p&gt;I had to spend six years in the desert of programming
in languages that were not Python,
before my work place, and soon afterwards the world,
realized what an amazing tool Python is.
I have not had to struggle to find a Python position since.&lt;/p&gt;
&lt;p&gt;I started with Python 1.4.
I have grew up with Python.
Now I am...no longer in my 20s,
and Python version 3.7 was recently released.&lt;/p&gt;
&lt;p&gt;I owe much of my career,
many of my friends,
and much of my hobby time to that one evening,
sitting down and reading the Python tutorial --
and to the man who made the language and wrote the first version
of that tutorial,
Guido van Rossum.&lt;/p&gt;
&lt;p&gt;Python,
like all open source projects,
like, indeed, all software projects,
is not a one man show.
A whole team,
with changing personnel,
works on core Python
and its ecosystem.
But it was all started by Guido.&lt;/p&gt;
&lt;p&gt;As Guido is stepping down to take a less active role in Python's future,
I want to offer my eternal gratitude.
For my amazing career,
for my friends,
for my hobby.
Thank you, Guido van Rossum.
Your contribution to humanity,
and to this one human in particular,
is hard to overestimate.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Composition-oriented programming</title><link href="https://orbifold.xyz/composition.html" rel="alternate"></link><published>2018-07-01T22:00:00-07:00</published><updated>2018-07-01T22:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2018-07-01:/composition.html</id><summary type="html">&lt;p&gt;A common way to expose an API in Python is &lt;em&gt;as inheritance&lt;/em&gt;.
Though many projects do that,
there is a better way.&lt;/p&gt;
&lt;p&gt;But first, let's see.
How popular is inheritance-as-an-API, anyway?&lt;/p&gt;
&lt;p&gt;Let's go to the &lt;a class="reference external" href="https://twistedmatrix.com/trac/"&gt;Twisted&lt;/a&gt; website.
Right at the center of the screen,
at prime real-estate,
we see:&lt;/p&gt;
&lt;p&gt;What's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A common way to expose an API in Python is &lt;em&gt;as inheritance&lt;/em&gt;.
Though many projects do that,
there is a better way.&lt;/p&gt;
&lt;p&gt;But first, let's see.
How popular is inheritance-as-an-API, anyway?&lt;/p&gt;
&lt;p&gt;Let's go to the &lt;a class="reference external" href="https://twistedmatrix.com/trac/"&gt;Twisted&lt;/a&gt; website.
Right at the center of the screen,
at prime real-estate,
we see:&lt;/p&gt;
&lt;p&gt;What's there? The following is abridged:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class Echo(protocol.Protocol):
    def dataReceived(self, data):
        self.transport.write(data)
class EchoFactory(protocol.Factory):
    def buildProtocol(self, addr):
        return Echo()
&lt;/pre&gt;
&lt;p&gt;(This is part of an example on building an echo-server protocol.)&lt;/p&gt;
&lt;p&gt;If you are wondering who came up with this amazing API,
it is the same person who is writing the words you are reading.
&lt;em&gt;I&lt;/em&gt; certainly thought it was an amazing API!&lt;/p&gt;
&lt;p&gt;Look at how many smart people agreed with me.&lt;/p&gt;
&lt;p&gt;Django takes a page of tutorial to get there,
but &lt;a class="reference external" href="https://docs.djangoproject.com/en/2.0/intro/tutorial02/"&gt;sure enough&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')
class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)
&lt;/pre&gt;
&lt;p&gt;Jupyter's &lt;a class="reference external" href="https://github.com/jupyter/echo_kernel/blob/master/echo_kernel/kernel.py"&gt;echo kernel&lt;/a&gt; starts:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class EchoKernel(Kernel):
    implementation = 'Echo'
    implementation_version = '1.0'
    language = 'no-op'
&lt;/pre&gt;
&lt;p&gt;Everyone is doing it.
A project I have been a developer on for ~16 years.
The most popular Python web library,
responsible for who-knows-how-many requests per second in Instagram.
A project that won the ACM award (and well deserved, at that).&lt;/p&gt;
&lt;p&gt;However, popularity is not everything.
This is not a good idea.&lt;/p&gt;
&lt;p&gt;When exposing class inheritance as a public interface,
that means committing to a level of backwards compatibility that is
unheard of.
Even adding private methods or attributes becomes dangerous.&lt;/p&gt;
&lt;p&gt;Let's give a toy example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class Writer:

    _write = lambda x: None

    def set_output(self, output):
        self._write = output.write

    def write(self, message):
        formatted = self.format(message)
        self._write(message)

    def format(self, message):
        raise NotImplementedError(&amp;quot;format&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;This is a simple writer,
that,
while initially sending everything down a black hole,
can be set to write the output to a file-like object.
It needs to format the messages,
so the proper usage is to subclass
and override &lt;code&gt;format&lt;/code&gt;
(while taking care
not to define methods called &lt;code&gt;set_output&lt;/code&gt; or &lt;code&gt;_write&lt;/code&gt;.)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class BufferWriter(MultiWriter):

    _buffer = False

    def format(self, message):
        if self._buffer:
            return 'Buffer: ' + message
        else:
            return 'Message: ' + message

    def switch_buffer(self):
        self._buffer = not self._buffer
&lt;/pre&gt;
&lt;p&gt;The simplest formatting would return the message as is.
However, this formatter is slightly less trivial --
it prefixes the message with the word &lt;code&gt;Buffer&lt;/code&gt;
or &lt;code&gt;Message&lt;/code&gt;,
depending on an internal variable that can be switched.&lt;/p&gt;
&lt;p&gt;Now we can do things like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; bp = BufferWriter()
&amp;gt;&amp;gt;&amp;gt; bp.set_output(sys.stdout)
&amp;gt;&amp;gt;&amp;gt; bp.write(&amp;quot;hello&amp;quot;)
Message: hello
&amp;gt;&amp;gt;&amp;gt; bp.switch_buffer()
&amp;gt;&amp;gt;&amp;gt; bp.write(&amp;quot;hello&amp;quot;)
Buffer: hello
&lt;/pre&gt;
&lt;p&gt;This looks good, so far.
Of course, things are never so simple in real life.
The writer library,
naturally,
gets thousands of stars on GitHub.
It becomes popular.
There's a development community,
complete with a discord channel and a mailing list.
So naturally,
important features get added.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class Writer:

    _buffer = &amp;quot;&amp;quot;

    _write = lambda x: None

    def set_output(self, output):
        self._write = output.write

    def write(self, message):
        self._buffer += self.format(message)
        if len(self._buffer) &amp;gt; 10:
            self._write(self._buffer)
            self._buffer = &amp;quot;&amp;quot;

    def format(self, message):
        raise NotImplementedError(&amp;quot;format&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;Turns out people needed to buffer some of the shorter messages.
This was a crucial performance improvement,
that all users were clamoring for,
so version &lt;code&gt;2018.6.1&lt;/code&gt; is highly anticipated.&lt;/p&gt;
&lt;p&gt;It breaks,
though,
the &lt;code&gt;BufferWriter&lt;/code&gt;.
The symptoms are weird:
&lt;code&gt;TypeError&lt;/code&gt; s and other such fun.
All because both the superclass and the subclass are competing to access
&lt;code&gt;self._buffer&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;With enough care,
these problems can be avoided.
A library which exposes classes for inheritance must add all
new private methods or attributes as &lt;code&gt;__&lt;/code&gt; and,
naturally,
never ever add any public methods or attributes.
Sadly,
nobody does that.&lt;/p&gt;
&lt;p&gt;So what's the alternative?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from zope import interface

class IFormatter(interface.Interface):

    def format(message):
        &amp;quot;&amp;quot;&amp;quot;show stuff&amp;quot;&amp;quot;&amp;quot;
&lt;/pre&gt;
&lt;p&gt;We define an abstract interface.
This interface &lt;a class="footnote-reference" href="#footnote-1" id="footnote-reference-1"&gt;[1]&lt;/a&gt; has only one method --
&lt;code&gt;format&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;#64;attr.s
class Writer:

    _buffer = &amp;quot;&amp;quot;

    _write = lambda x: None

    _formatter = attr.ib()

    def set_output(self, output):
        self._write = output.write

    def write(self, message):
        self._buffer += self._formatter.format(message)
        if len(self._buffer) &amp;gt; 10:
            self._write(self._buffer)
            self._buffer = &amp;quot;&amp;quot;
&lt;/pre&gt;
&lt;p&gt;We use the &lt;code&gt;attrs&lt;/code&gt; library [#]
to define our main functionality:
a class that wraps other objects,
which we expect to be &lt;code&gt;IFormatter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We can automatically verify,
by instead having the &lt;code&gt;_formatter&lt;/code&gt; line say:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
_formatter = attr.ib(validator=lambda instance, attribute, value:
                               verify.verifyObject(IFormatter, value))
&lt;/pre&gt;
&lt;p&gt;Note that this separates the concerns:
the &amp;quot;fake method&amp;quot; &lt;code&gt;format&lt;/code&gt;
has moved to a &amp;quot;fake class&amp;quot; (an interface).&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;#64;interface.implementer(IFormatter)
class BufferFormatter:

    _buffer = False

    def format(self, message):
        if self._buffer:
            return 'All Channels: ' + message
        else:
            return 'Limited Channels: ' + message

    def switch_buffer(self):
        self._buffer = not self._buffer
&lt;/pre&gt;
&lt;p&gt;Note that now,
if we only have the &lt;code&gt;Writer&lt;/code&gt; object,
there is no way to switch prefixes.
Correctly switching prefixes means keeping access to the original object.&lt;/p&gt;
&lt;p&gt;If there is a need to &amp;quot;call back&amp;quot; to the original methods,
the original object can be passed in to the wrapped object.
One advantage is that,
being a distinct object,
it is obvious one should only call into public methods
and only access public variables.&lt;/p&gt;
&lt;p&gt;Passing ourselves to a method is,
in general,
not an ideal practice.
What we really should do,
is to pass specific methods or variables directly into the method.
But this is funny:
when using inheritance,
we &lt;em&gt;always&lt;/em&gt; effectively pass ourselves to every method.
So even this refactoring is a net improvement.
When the biggest criticism of a refactoring is
&amp;quot;this could now be improved even more&amp;quot;,
it usually means it is a good idea.&lt;/p&gt;
&lt;p&gt;Credits:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Thanks to Tom Goren for his feedback --
the original version was more aggressive.&lt;/li&gt;
&lt;li&gt;Thanks to Glyph Lefkowitz for pushing me to make the example better.&lt;/li&gt;
&lt;li&gt;Thanks to Augie Fackler and Nathaniel Manista for much of the inspiration.&lt;/li&gt;
&lt;/ul&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-1" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="#footnote-reference-1"&gt;[1]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;The &lt;code&gt;zope.interface&lt;/code&gt; library is a little like the
&lt;code&gt;abc&lt;/code&gt; libary:
both give tools to clarify what methods we expect.
However, the &lt;code&gt;abc.ABC&lt;/code&gt; like inheritance a little &lt;em&gt;too&lt;/em&gt; much.
&lt;a class="reference external" href="https://glyph.twistedmatrix.com/2009/02/explaining-why-interfaces-are-great.html"&gt;Glyph&lt;/a&gt; has a good explanation about the advantages.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class="docutils footnote" frame="void" id="footnote-2" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label" /&gt;&lt;col /&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;[2]&lt;/td&gt;&lt;td&gt;&lt;code&gt;attrs&lt;/code&gt; makes defining Python classes much less boiler-platey.
There's &lt;a class="reference external" href="https://glyph.twistedmatrix.com/2016/08/attrs.html"&gt;another Glyph post&lt;/a&gt; explaining why it is so good.&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</content><category term="misc"></category></entry><entry><title>Avoiding Private Methods</title><link href="https://orbifold.xyz/private-methods.html" rel="alternate"></link><published>2018-06-01T21:30:00-07:00</published><updated>2018-06-01T21:30:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2018-06-01:/private-methods.html</id><summary type="html">&lt;p&gt;Assume &lt;code&gt;MyClass._dangerous(self)&lt;/code&gt; is a private method.
We could have implemented the same functionality without a private
method as follows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Define a class &lt;code&gt;InnerClass&lt;/code&gt; with the same &lt;code&gt;__init__&lt;/code&gt;
as &lt;code&gt;MyClass&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Define &lt;code&gt;InnerClass.dangerous(self)&lt;/code&gt; with the same logic
of &lt;code&gt;MyClass._dangerous&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make &lt;code&gt;MyClass&lt;/code&gt; into a wrapper class over &lt;code&gt;InnerClass …&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;Assume &lt;code&gt;MyClass._dangerous(self)&lt;/code&gt; is a private method.
We could have implemented the same functionality without a private
method as follows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Define a class &lt;code&gt;InnerClass&lt;/code&gt; with the same &lt;code&gt;__init__&lt;/code&gt;
as &lt;code&gt;MyClass&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Define &lt;code&gt;InnerClass.dangerous(self)&lt;/code&gt; with the same logic
of &lt;code&gt;MyClass._dangerous&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Make &lt;code&gt;MyClass&lt;/code&gt; into a wrapper class over &lt;code&gt;InnerClass&lt;/code&gt;,
where the wrapped attribute is private.&lt;/li&gt;
&lt;li&gt;Proxy all necessary work into &lt;code&gt;InnerClass&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This might seem onerous,
but consider that now, &lt;code&gt;dangerous&lt;/code&gt; is part of the public
interface of a class,
and would need to be explicitly documented as to assumptions and guarantees.
This documentation would have had to have been in comments around
&lt;code&gt;_dangerous&lt;/code&gt; anyway --
in order to clarify what its assumptions are,
and what invariants it is violating in &lt;code&gt;MyClass&lt;/code&gt; --
otherwise, maintaining the code that &lt;em&gt;calls&lt;/em&gt; &lt;code&gt;_dangerous&lt;/code&gt;
would be hard.&lt;/p&gt;
&lt;p&gt;Of course,
this documentation is almost certain to be missing.
The existence of &lt;code&gt;_dangerous&lt;/code&gt; itself
implies this was an almost mechanical refactoring
of similar code into a method,
with the excuse of &amp;quot;its private&amp;quot;
used to avoid considering the invariants and interface.&lt;/p&gt;
&lt;p&gt;Even if the documentation did exist,
now it is possible to unit-test that the documentation is correct.
Furthermore,
if we use &lt;a class="reference external" href="https://as.ynchrono.us/2014/12/asynchronous-object-initialization.html"&gt;best practices&lt;/a&gt; when we define &lt;code&gt;MyClass&lt;/code&gt; --
in other words,
avoid creating an &lt;code&gt;InnerClass&lt;/code&gt; object in the initializer,
and only creating it in an &lt;code&gt;MyClass.from_parameters&lt;/code&gt;,
we are also in a good position to unit test &lt;code&gt;MyClass&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This,
of course,
presented the worst case:
the code for &lt;code&gt;_dangerous&lt;/code&gt; touches absolutely every data member
of &lt;code&gt;MyClass&lt;/code&gt;.
In real life,
the worst case is not often encountered.
When we look at a private method &lt;em&gt;as&lt;/em&gt; a code smell,
and contemplate the best way to refactor it away,
it turns out that we often can find a coherent set of attributes
that really does make sense as &lt;code&gt;InnerClass&lt;/code&gt; on their own merits.&lt;/p&gt;
&lt;p&gt;Credit:
This is based on an
&lt;a class="reference external" href="https://glyph.twistedmatrix.com/2016/08/attrs.html#fn:1"&gt;off-handed comment&lt;/a&gt;
Glyph made in his blog post about attrs.
I am also grateful to him for reviewing a draft copy of this post,
and making many useful suggestions.
All mistakes in interpretation or explanation are mine alone.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>PyCon US 2018 Twisted Birds of Feather Open Space Summary</title><link href="https://orbifold.xyz/pycon-2018-twisted.html" rel="alternate"></link><published>2018-05-16T18:50:00-07:00</published><updated>2018-05-16T18:50:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2018-05-16:/pycon-2018-twisted.html</id><summary type="html">&lt;p&gt;We would like Twisted to support &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0555/"&gt;contextvars&lt;/a&gt; --
this would allow cross-async libraries,
like &lt;a class="reference external" href="https://github.com/ScatterHQ/eliot"&gt;eliot&lt;/a&gt; to do fancy things.&lt;/p&gt;
&lt;p&gt;Klein is almost ready to be used as-is.
Glyph has the &lt;a class="reference external" href="https://github.com/twisted/klein/tree/forms-and-sessions"&gt;good branch&lt;/a&gt; which adds&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CSRF protection&lt;/li&gt;
&lt;li&gt;Forms&lt;/li&gt;
&lt;li&gt;Sessions&lt;/li&gt;
&lt;li&gt;Authentication&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But it is too big,
and we need to break it to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We would like Twisted to support &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0555/"&gt;contextvars&lt;/a&gt; --
this would allow cross-async libraries,
like &lt;a class="reference external" href="https://github.com/ScatterHQ/eliot"&gt;eliot&lt;/a&gt; to do fancy things.&lt;/p&gt;
&lt;p&gt;Klein is almost ready to be used as-is.
Glyph has the &lt;a class="reference external" href="https://github.com/twisted/klein/tree/forms-and-sessions"&gt;good branch&lt;/a&gt; which adds&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;CSRF protection&lt;/li&gt;
&lt;li&gt;Forms&lt;/li&gt;
&lt;li&gt;Sessions&lt;/li&gt;
&lt;li&gt;Authentication&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;But it is too big,
and we need to break it to reviewable pieces to add it to master.&lt;/p&gt;
&lt;p&gt;The other option for a Twisted-native web framework is &lt;a class="reference external" href="http://cyclone.io/"&gt;Cyclone&lt;/a&gt;.
It is not under heavy development,
but this is mostly because it is done and reasonably stable:
Duo Security is using it in production.&lt;/p&gt;
&lt;p&gt;We are slowly improving the Request object by taking it out of
the built-in and reimplementing it externally.
Wilfredo is doing it in a &lt;a class="reference external" href="https://github.com/wsanchez/txrequest"&gt;side-project&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We talked a little about advanced use cases:
How do you use a reactor in a non-main thread?
The only marginally documented &lt;cite&gt;installSignalHandlers&lt;/cite&gt; argument
does that just fine.&lt;/p&gt;
&lt;!-- installSignalHandlers: https://twistedmatrix.com/documents/18.4.0/api/twisted.internet.base._SignalReactorMixin.html#run --&gt;
&lt;p&gt;If you want to spread processing between multiple processes,
&lt;a class="reference external" href="https://github.com/twisted/ampoule"&gt;Ampoule&lt;/a&gt; does that.
&lt;cite&gt;Help&lt;/cite&gt; is greatly appreciated.&lt;/p&gt;
&lt;p&gt;If you want to do weird things with resources,
Moshe &lt;cite&gt;did something on Twitch&lt;/cite&gt; this one time.&lt;/p&gt;
&lt;!-- did something on Twitch: https://www.youtube.com/watch?v=A5Y9e2ZW7c0 --&gt;
&lt;p&gt;We made sure everyone knows their help would be appreciated,
and &lt;a class="reference external" href="https://twistedmatrix.com/highscores/"&gt;gameified&lt;/a&gt;:
&lt;a class="reference external" href="https://twisted.reviews"&gt;Review tickets&lt;/a&gt;
and participate on the
&lt;a class="reference external" href="https://twistedmatrix.com/cgi-bin/mailman/listinfo/twisted-python"&gt;mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Remeber: the book &lt;a class="reference external" href="https://www.apress.com/us/book/9781484237410"&gt;Expert Twisted&lt;/a&gt; is available for pre-orders!&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>PyCon 2018 US Docker Birds of Feather Open Space Summary</title><link href="https://orbifold.xyz/pycon-2018-docker.html" rel="alternate"></link><published>2018-05-15T18:50:00-07:00</published><updated>2018-05-15T18:50:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2018-05-15:/pycon-2018-docker.html</id><summary type="html">&lt;p&gt;We started out the conversation with talking about
writing good Dockerfiles.
There is no list of &amp;quot;best practices&amp;quot; yet.
Hynek reiterated for us
&amp;quot;ship applications, not build environments&amp;quot;.
Moshe summarized it as &amp;quot;don't put gcc in the deployed image.&amp;quot;&lt;/p&gt;
&lt;p&gt;We discussed a little bit what we are trying to achieve …&lt;/p&gt;</summary><content type="html">&lt;p&gt;We started out the conversation with talking about
writing good Dockerfiles.
There is no list of &amp;quot;best practices&amp;quot; yet.
Hynek reiterated for us
&amp;quot;ship applications, not build environments&amp;quot;.
Moshe summarized it as &amp;quot;don't put gcc in the deployed image.&amp;quot;&lt;/p&gt;
&lt;p&gt;We discussed a little bit what we are trying to achieve
with better docker files.
Shared base?
Reproducible builds?&lt;/p&gt;
&lt;p&gt;We talked about some of the challenges for building Docker
on CI systems,
especially from inside containers.&lt;/p&gt;
&lt;p&gt;Docker on air-gapped machines is hard.
So many parts assume free access to the internet.&lt;/p&gt;
&lt;p&gt;We went on to discuss how to use multistage Dockerfiles.
One important bit is what &amp;quot;installable artifact&amp;quot; to move.
Some suggested wheels.
Moshe suggested &lt;a class="reference external" href="https://pex.readthedocs.io/en/stable/"&gt;Pex&lt;/a&gt;.
Hynek suggested copying a virtual environment,
and Moshe showed an &lt;a class="reference external" href="https://github.com/moshez/web-applications-a-to-z/blob/master/multistage.docker"&gt;example&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There was some discussion on making small images.
The consensus was that &lt;a class="reference external" href="https://alpinelinux.org/"&gt;Alpine&lt;/a&gt; is usually part of the answer.&lt;/p&gt;
&lt;p&gt;There was a lot of discussion on the trade-offs between updating too soon,
and too late.
Some of the techniques to control update times were mentioned:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Building everything from source&lt;/li&gt;
&lt;li&gt;Hashing various inputs into the image tag&lt;/li&gt;
&lt;li&gt;Using &lt;a class="reference external" href="https://www.redhat.com/en/technologies/management/satellite"&gt;Red Hat Satellite&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We talked about GPU containers,
for machine learning.
Apparently &lt;a class="reference external" href="https://github.com/NVIDIA/nvidia-docker"&gt;nvidia-docker&lt;/a&gt; is still nascent but works.&lt;/p&gt;
&lt;p&gt;We talked about how to keep your registry clean.
Unfortunately, the consensus is that you will need to build your own tooling.&lt;/p&gt;
&lt;p&gt;We discussed what registries people use.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://about.gitlab.com/2016/05/23/gitlab-container-registry/"&gt;GitLab Docker Registry&lt;/a&gt; got mixed reviews.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://aws.amazon.com/ecr/"&gt;ECR&lt;/a&gt; was a popular option.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.sonatype.com/nexus-repository-sonatype"&gt;Nexus&lt;/a&gt; was mentioned.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We touched lightly on performance.
Docker can use either &lt;a class="reference external" href="https://en.wikipedia.org/wiki/OverlayFS"&gt;overlayfs&lt;/a&gt; vs &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Device_mapper"&gt;devicemapper&lt;/a&gt;.
It's &lt;a class="reference external" href="https://batmat.net/2015/08/26/docker-storage-driver-dont-use-devicemapper/"&gt;complicated&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Would you run your DB in Docker?
Docker is just a packaging format.
You can run Postgres in Docker just fine,
and mount in the data directory.
However, usually people are asking about using Orchestration Frameworks
for that.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/"&gt;StatefulSets&lt;/a&gt; in K8s are sometimes useful for databases.&lt;/p&gt;
&lt;p&gt;If you are running your dev DB in Docker,
data is not important.
In that case,
consider using &lt;a class="reference external" href="https://www.flamingspork.com/projects/libeatmydata/"&gt;eatmydata&lt;/a&gt; to improve performance.&lt;/p&gt;
&lt;p&gt;We all agreed you should never use the system Python for your applications.
Then how do you get Python in your Docker image?&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Use the &lt;code&gt;python:&amp;lt;something&amp;gt;&lt;/code&gt; images on Docker Hub&lt;/li&gt;
&lt;li&gt;Compile it yourself&lt;/li&gt;
&lt;li&gt;Use PyEnv&lt;/li&gt;
&lt;li&gt;Use the &lt;a class="reference external" href="https://launchpad.net/~deadsnakes/+archive/ubuntu/ppa"&gt;deadsnakes&lt;/a&gt; PPA on Ubuntu&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Finally, we discussed the ultimate heresy:
running more than one process inside your container.
Or is it?
Moshe mentioned that anyone running &lt;a class="reference external" href="https://uwsgi-docs.readthedocs.io/en/latest/"&gt;uwsgi&lt;/a&gt; or &lt;a class="reference external" href="http://gunicorn.org/"&gt;gunicorn&lt;/a&gt;
is already running a process manager:
just one that happens to be part of the
WSGI &amp;quot;binary&amp;quot;.
We mentioned &lt;a class="reference external" href="http://supervisord.org/"&gt;supervisor&lt;/a&gt; and &lt;a class="reference external" href="http://ncolony.org/en/latest/"&gt;NColony&lt;/a&gt; for explicit process management.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Wheels</title><link href="https://orbifold.xyz/wheels.html" rel="alternate"></link><published>2018-05-02T08:00:00-07:00</published><updated>2018-05-02T08:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2018-05-02:/wheels.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;Announcment&lt;/strong&gt;: My book, &lt;a class="reference external" href="https://gumroad.com/l/BVOGd"&gt;from python import better&lt;/a&gt;, has been published.
This post is based on one of the chapters from it.&lt;/p&gt;
&lt;p&gt;When Python started out,
one of the oft-touted benefits was &amp;quot;batteries included!&amp;quot;.
Gone were the days of searching for which XML parsing library was the best --
just use the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;Announcment&lt;/strong&gt;: My book, &lt;a class="reference external" href="https://gumroad.com/l/BVOGd"&gt;from python import better&lt;/a&gt;, has been published.
This post is based on one of the chapters from it.&lt;/p&gt;
&lt;p&gt;When Python started out,
one of the oft-touted benefits was &amp;quot;batteries included!&amp;quot;.
Gone were the days of searching for which XML parsing library was the best --
just use the one built-in to the standard library.
However,
the standard library can only hold so much special purpose stuff.
Few now remember,
but it used to have &lt;a class="reference external" href="https://docs.python.org/2/library/al.html"&gt;SGI Audio&lt;/a&gt; specific functionality.&lt;/p&gt;
&lt;p&gt;These days,
one of the biggest benefits of Python is the extensive third-party
repository of stuff.
This is the Python Package Index (PyPI),
formerly known as the &amp;quot;Cheese Shop&amp;quot; after an obscure Monty Python skit.
Of course,
what else would be available from the Cheese shop than &lt;em&gt;wheels&lt;/em&gt; of cheese?
But a second pun was hiding behind the term &amp;quot;wheels&amp;quot;:
those are the things that need no reinvention!&lt;/p&gt;
&lt;p&gt;The new &lt;a class="reference external" href="https://mail.python.org/pipermail/distutils-sig/2018-April/032195.html"&gt;PyPI warehouse launched&lt;/a&gt;,
with new code hosting unbelievable amounts of content:
around 140,000 packages at times of this post
(unless I take too long in publishing it,
and then who knows how big PyPI will be!)&lt;/p&gt;
&lt;p&gt;Nobody can sift through 140K package descriptions,
of course.
A short-lived attempt to have &amp;quot;Stars&amp;quot; fell victim to allegations
of ballot stuffing and moderation,
and was quickly removed.
Searching on key words would be useful,
but searching without sorting rarely is --
and what would you sort &lt;em&gt;on&lt;/em&gt;?&lt;/p&gt;
&lt;p&gt;PyPI is not the place to find which libraries are useful.
It is the place to find objective truths:
which version is the latest,
when was it released,
what is a project's homepage,
etc.
Recommendations are best found elsewhere.&lt;/p&gt;
&lt;p&gt;The first place I like to start is with the &lt;a class="reference external" href="https://awesome-python.com"&gt;Awesome Python&lt;/a&gt; list.
However,
it is important to note that its contribution guidelines are just
&amp;quot;submit a link&amp;quot;
and there is &lt;em&gt;no&lt;/em&gt; official way to remove a library from the list.
Thus,
the &amp;quot;awesome&amp;quot; in the name means
&amp;quot;someone once thought it was awesome,
and cared enough to add it&amp;quot;.
The list should be treated as mild suggestions.
Before using a library,
check release history,
GitHub health,
code quality and other metrics you might care about.&lt;/p&gt;
&lt;p&gt;Another useful resource is &lt;a class="reference external" href="http://planetpython.org/"&gt;Planet Python&lt;/a&gt;.
It is a feed aggregator of various blogs.
Many of the blog posts will feature either
a recommendation of a particular library,
a release announcement,
or just discussion which involves using a third-party library.
Along side the written word is the live performance --
&lt;a class="reference external" href="http://pyvideo.org/"&gt;PyVideo&lt;/a&gt; links to more Python talks than you can shake a stick at,
aggregating talks from conferences around the world:
again,
many of the talks will feature discussion of a particular third-party library.&lt;/p&gt;
&lt;p&gt;Last,
but not least,
the live, interactive, version of PyVideo:
Python meetups and conferences.
Those are where I discovered some of my favorite libraries.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Web Development for the 21st Century</title><link href="https://orbifold.xyz/incremental.html" rel="alternate"></link><published>2018-04-02T21:30:00-07:00</published><updated>2018-04-02T21:30:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2018-04-02:/incremental.html</id><summary type="html">&lt;p&gt;(Thanks to Glyph Lefkowitz for some of the inspiration for this port,
and to Mahmoud Hashemi for helpful comments and suggestions.
All mistakes and issues that remain are mine alone.)&lt;/p&gt;
&lt;p&gt;The Python REPL has always been touted as one of Python's greatest
strengths. With Jupyter, Jupyter Lab in its latest …&lt;/p&gt;</summary><content type="html">&lt;p&gt;(Thanks to Glyph Lefkowitz for some of the inspiration for this port,
and to Mahmoud Hashemi for helpful comments and suggestions.
All mistakes and issues that remain are mine alone.)&lt;/p&gt;
&lt;p&gt;The Python REPL has always been touted as one of Python's greatest
strengths. With Jupyter, Jupyter Lab in its latest incarnation, the REPL
has been lifted into the 21st century. It has become the IDE of the future:
interactive, great history and logging -- and best of all,
you can use it right from your browser,
regardless of your platform!&lt;/p&gt;
&lt;p&gt;However, we still have 20th century practices for developing web
applications. Indeed, the only development is that instead of &amp;quot;CTRL-c,
up-arrow, return&amp;quot;, we now have &amp;quot;development servers&amp;quot; which are not
&amp;quot;production ready&amp;quot; support auto-reloading -- the equivalent of a robot
doing &amp;quot;CTRL-c, up-arrow, return&amp;quot;.&lt;/p&gt;
&lt;p&gt;Using the REPL to develop web applications is pure bliss. Just like
using it to develop more linear code: we write a function, test it
ad-hocly, see the results, and tweak.&lt;/p&gt;
&lt;p&gt;When we are sufficiently pleased, we can then edit the resulting
notebook file into a Python module -- which we import from the next
version of the notebook, in order to continue the incremental
development. Is such a thing possible?&lt;/p&gt;
&lt;p&gt;Let's start by initializing Twisted,
since this has to happen early on.&lt;/p&gt;
&lt;pre class="code python3 literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tornado.platform.twisted&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;reactor&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Whew! Can't forget that! Now with this out of the way, let's do the most
boring part of every Python program: the imports.&lt;/p&gt;
&lt;pre class="code python3 literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twisted.web&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;twisted.internet&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;defer&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;klein&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;treq&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Now, let's start Klein app. There are several steps involved here.&lt;/p&gt;
&lt;pre class="code python3 literal-block"&gt;
&lt;span class="n"&gt;root&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;klein&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;resource&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;We take the Klein &lt;tt class="docutils literal"&gt;resource&lt;/tt&gt; object...&lt;/p&gt;
&lt;pre class="code python3 literal-block"&gt;
&lt;span class="n"&gt;site&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Site&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;...make a wrapping site...&lt;/p&gt;
&lt;pre class="code python3 literal-block"&gt;
&lt;span class="n"&gt;ep&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;endpoints&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;serverFromString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reactor&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tcp:8000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;...create an endpoint...&lt;/p&gt;
&lt;pre class="code python3 literal-block"&gt;
&lt;span class="n"&gt;ep&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;listen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;Deferred at 0x7f54c5702080 current result: &amp;lt;&amp;lt;class 'twisted.internet.tcp.Port'&amp;gt; of &amp;lt;class 'twisted.web.server.Site'&amp;gt; on 8000&amp;gt;&amp;gt;
&lt;/pre&gt;
&lt;p&gt;and like &amp;quot;Harry met Sally&amp;quot;, eventually bring the two together for Klein
to respond on port 8000. We have not written any application code, so
Klein is currently &amp;quot;empty&amp;quot;.&lt;/p&gt;
&lt;p&gt;What does that mean?&lt;/p&gt;
&lt;pre class="code python3 literal-block"&gt;
&lt;span class="k"&gt;async&lt;/span&gt; &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test_slash&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;treq&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'http://localhost:8000'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;content&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;await&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This function uses Python 3's &lt;tt class="docutils literal"&gt;async&lt;/tt&gt;/&lt;tt class="docutils literal"&gt;await&lt;/tt&gt; features, to use
&lt;tt class="docutils literal"&gt;treq&lt;/tt&gt; (Twisted Requests) and return the result. We can use it as our
ad-hoc debugger (but we could also use a web browser -- this is
naturally hard to show in a post, though).&lt;/p&gt;
&lt;pre class="code python3 literal-block"&gt;
&lt;span class="n"&gt;defer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensureDeferred&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_slash&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addBoth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;Deferred at 0x7f54c5532630&amp;gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
b'&amp;lt;!DOCTYPE HTML PUBLIC &amp;quot;-//W3C//DTD HTML 3.2 Final//EN&amp;quot;&amp;gt;n&amp;lt;title&amp;gt;404 Not Found&amp;lt;/title&amp;gt;n&amp;lt;h1&amp;gt;Not Found&amp;lt;/h1&amp;gt;n&amp;lt;p&amp;gt;The requested URL was not found on the server.  If you entered the URL manually please check your spelling and try again.&amp;lt;/p&amp;gt;n'
&lt;/pre&gt;
&lt;p&gt;Ah, yeah. Even &lt;tt class="docutils literal"&gt;/&lt;/tt&gt; gives a 404 error -- we have literally defined
nothing. OK, this is easy to fix:&lt;/p&gt;
&lt;pre class="code python3 literal-block"&gt;
&lt;span class="nd"&gt;&amp;#64;klein&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;something_useful&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Hello world'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Wait, did this work?&lt;/p&gt;
&lt;pre class="code python3 literal-block"&gt;
&lt;span class="n"&gt;defer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensureDeferred&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_slash&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addBoth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;Deferred at 0x7f54c53d8d30&amp;gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
b'Hello world'
&lt;/pre&gt;
&lt;p&gt;Yep. But it's not a proper sentence...woops.&lt;/p&gt;
&lt;pre class="code python3 literal-block"&gt;
&lt;span class="nd"&gt;&amp;#64;klein&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;something_useful&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Hello, world!'&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;Nice. Punctuation. Force. Determination. Other nouns.&lt;/p&gt;
&lt;p&gt;Did it change anything?&lt;/p&gt;
&lt;pre class="code python3 literal-block"&gt;
&lt;span class="n"&gt;defer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ensureDeferred&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test_slash&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addBoth&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;Deferred at 0x7f54c4b9e240&amp;gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
b'Hello, world!'
&lt;/pre&gt;
&lt;p&gt;Yes.&lt;/p&gt;
&lt;p&gt;Incremental web application development. Without an &amp;quot;auto-loading&amp;quot; &amp;quot;not
production grade&amp;quot; server.&lt;/p&gt;
&lt;p&gt;We took advantage of several incidental issues. The Jupyter kernel is
Tornado based. Twisted has both a production-grade web development
framework, and the ability to run on top of the tornado loop.
The combination is powerful.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Running Modules</title><link href="https://orbifold.xyz/running-modules.html" rel="alternate"></link><published>2018-03-19T20:30:00-07:00</published><updated>2018-03-19T20:30:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2018-03-19:/running-modules.html</id><summary type="html">&lt;p&gt;(Thanks to &lt;a class="reference external" href="https://blog.ganssle.io/"&gt;Paul Ganssle&lt;/a&gt; for his suggestions and improvements.
All mistakes that remain are mine.)&lt;/p&gt;
&lt;p&gt;When exposing a Python program as a command-line application,
there are several ways to get the Python code to run.
The oldest way,
and the one people usually learn in tutorials,
is to run
&lt;code&gt;python …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;(Thanks to &lt;a class="reference external" href="https://blog.ganssle.io/"&gt;Paul Ganssle&lt;/a&gt; for his suggestions and improvements.
All mistakes that remain are mine.)&lt;/p&gt;
&lt;p&gt;When exposing a Python program as a command-line application,
there are several ways to get the Python code to run.
The oldest way,
and the one people usually learn in tutorials,
is to run
&lt;code&gt;python some_file.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If the file is intended to be usable as both a module and as a
command-line parameter,
it will often have&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
if __name__ == '__main__':
    actually_run_main()
&lt;/pre&gt;
&lt;p&gt;or similar code.&lt;/p&gt;
&lt;p&gt;This sometimes has surprising corner-case behavior,
but even worse --
&lt;code&gt;some_file.py&lt;/code&gt; is not looked for in either
&lt;code&gt;$PATH&lt;/code&gt;
or &lt;code&gt;sys.path&lt;/code&gt;,
it must be explicitly handed.
It also changes the default Python path from including the current directory,
to including the location of &lt;code&gt;some_file.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The new recommended modern way,
of course,
is to set &lt;code&gt;entry_points&lt;/code&gt; in the &lt;code&gt;setup.py&lt;/code&gt; file.
When the distribution is installed,
a console script is auto-generated and added to the same place
the Python interpreter is found.
This means that we need to think carefully about the other things
that might have the same name on our &lt;code&gt;$PATH&lt;/code&gt;
to avoid collisions.&lt;/p&gt;
&lt;p&gt;There is a third way,
which is subtle.
When Python sees the &lt;code&gt;-m &amp;lt;some name&amp;gt;&lt;/code&gt; option,
it will look for a module or a package by that name.
If it finds a module,
it will run it with &lt;code&gt;__name__&lt;/code&gt; being &lt;code&gt;&amp;quot;__main__&amp;quot;&lt;/code&gt;
in order to trigger the path that actually does something --
again leading to some,
if not all,
issues discussed earlier.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;However&lt;/em&gt; if it finds a package
it will run its &lt;code&gt;__main__.py&lt;/code&gt; module
(still setting &lt;code&gt;__name__&lt;/code&gt; to &lt;code&gt;&amp;quot;__main__&amp;quot;&lt;/code&gt;)
--
not its &lt;code&gt;__init__.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This means that at the top of &lt;cite&gt;__main__.py&lt;/cite&gt; we can invert the usual
logic:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
if __name__ != '__main__':
    raise ImportError(&amp;quot;Module intended to be main, not imported&amp;quot;,
                      __name__)

from . import main_function
main_function()
&lt;/pre&gt;
&lt;p&gt;This allows running &lt;code&gt;python -m &amp;lt;some package&amp;gt;&lt;/code&gt;,
but anyone who tried to accidentally import
&lt;code&gt;&amp;lt;some package&amp;gt;.__main__&lt;/code&gt; will get an error --
as well they should!&lt;/p&gt;
&lt;p&gt;Among other things,
this means we only care about our &lt;code&gt;sys.path&lt;/code&gt;,
not our &lt;code&gt;$PATH&lt;/code&gt;.
For example, this will work the same whether the package is installed
to the global Python
or &lt;code&gt;--user&lt;/code&gt; installed.&lt;/p&gt;
&lt;p&gt;Finally,
if an entrypoint is desired, one can easily be made to run
&lt;code&gt;__main__&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
entrypoint = toolz.compose(lambda _dummy: None,
    functools.partial(runpy.run_module,
                      &amp;quot;&amp;lt;some package&amp;gt;&amp;quot;,
                      run_name='__main__'))
&lt;/pre&gt;
&lt;p&gt;Using the builtin module &lt;a class="reference external" href="https://docs.python.org/3/library/runpy.html"&gt;runpy&lt;/a&gt;,
the builtin module &lt;a class="reference external" href="https://docs.python.org/3/library/functools.html"&gt;functools&lt;/a&gt;
and the third party module &lt;a class="reference external" href="http://toolz.readthedocs.io/en/latest/api.html"&gt;toolz&lt;/a&gt;.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Random Bites of Pi(e)</title><link href="https://orbifold.xyz/random-pie.html" rel="alternate"></link><published>2018-03-14T08:00:00-07:00</published><updated>2018-03-14T08:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2018-03-14:/random-pie.html</id><summary type="html">&lt;p&gt;In today's edition of Pi day post,
we will imagine we have a pie.
(If you lack imagination,
go out and get a pie.)
(Even if you do not lack imagination,
go out and get a pie.)&lt;/p&gt;
&lt;p&gt;As is traditional,
we got a round pie.
Since pies are important,
we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In today's edition of Pi day post,
we will imagine we have a pie.
(If you lack imagination,
go out and get a pie.)
(Even if you do not lack imagination,
go out and get a pie.)&lt;/p&gt;
&lt;p&gt;As is traditional,
we got a round pie.
Since pies are important,
we will base our unit of measure
on this pie --
the diameter of the pie will be 1.&lt;/p&gt;
&lt;p&gt;Since we had to carry it home,
we put it in a box.
We are all ecologically minded,
of course,
so we put it in a box which is square --
with its length size 1.&lt;/p&gt;
&lt;p&gt;We note something interesting --
the box's bottom's area is 1x1 --
or 1.
The radius of the pie is 1/2,
so its area
is &lt;cite&gt;pi * 0.25&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;As we are driving home,
the pie on our passenger seat,
we start wondering how we can
estimate Pi.
Luckily,
we got some sugar.
What if we sprinkled some sugar,
and took notes for each grain,
whether it was on the pie, or not?&lt;/p&gt;
&lt;p&gt;Let's use Python to simulate:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import random
import attr
&lt;/pre&gt;
&lt;p&gt;First,
we need some randomness generator.
Then,
we also want to use the &lt;a class="reference external" href="https://attrs.org"&gt;attrs&lt;/a&gt; library,
because it makes everything more fun.&lt;/p&gt;
&lt;p&gt;We make a &lt;code&gt;Point&lt;/code&gt; class.
Other than the basics,
we give it a class method --
a named constructor which will generate
a random point on the unit square --
this is where our sugar grain falls.&lt;/p&gt;
&lt;p&gt;We also give it a way to calculate distance
from another point,
using the Pythagorean theorem.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;#64;attr.s(frozen=True)
class Point:
    x = attr.ib()
    y = attr.ib()

    def distance(self, pt):
        return ((self.x - pt.x) ** 2 + (self.y - pt.y) ** 2) ** 0.5

    &amp;#64;classmethod
    def unit_square_random(cls):
        return cls(x=random.random(), y=random.random())
&lt;/pre&gt;
&lt;p&gt;The center of the pie is at &lt;code&gt;0.5&lt;/code&gt; by &lt;code&gt;0.5&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
center = Point(0.5, 0.5)
&lt;/pre&gt;
&lt;p&gt;A point is inside the pie
if it is less than &lt;code&gt;0.5&lt;/code&gt; away from the center.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def is_in_circle(pt):
    return center.distance(pt) &amp;lt; 0.5
&lt;/pre&gt;
&lt;p&gt;Now we are ready.
Even with just 100,000 grains of sugar,
we get 2-digit accuracy.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
inside = total = 0
for _ in range(10 ** 5):
    total += 1
    inside += int(is_in_circle(Point.unit_square_random()))
print((inside / total) * 4)
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
3.14052
&lt;/pre&gt;
</content><category term="misc"></category></entry><entry><title>The Python Toolbox</title><link href="https://orbifold.xyz/tooling.html" rel="alternate"></link><published>2018-02-01T22:20:00-08:00</published><updated>2018-02-01T22:20:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2018-02-01:/tooling.html</id><summary type="html">&lt;p&gt;I have written &lt;a class="reference external" href="https://moshez.wordpress.com/2016/01/27/learning-python-the-ecosystem/"&gt;before&lt;/a&gt; about Python tooling.
However,
as all software,
things have changed --
and I wanted to write a new post,
with my current understanding of best practices.&lt;/p&gt;
&lt;div class="section" id="testing"&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;As of now, &lt;code&gt;pytest&lt;/code&gt; has achieved official victory.
Unless there are overwhelming reasons to use something else,
strongly consider using …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;I have written &lt;a class="reference external" href="https://moshez.wordpress.com/2016/01/27/learning-python-the-ecosystem/"&gt;before&lt;/a&gt; about Python tooling.
However,
as all software,
things have changed --
and I wanted to write a new post,
with my current understanding of best practices.&lt;/p&gt;
&lt;div class="section" id="testing"&gt;
&lt;h2&gt;Testing&lt;/h2&gt;
&lt;p&gt;As of now, &lt;code&gt;pytest&lt;/code&gt; has achieved official victory.
Unless there are overwhelming reasons to use something else,
strongly consider using it as your test runner.
The only good reason is an existing project,
with an existing test runner --
and even there,
checking if pytest will just run your tests as is is worthwhile.&lt;/p&gt;
&lt;p&gt;Even when using Twisted,
unless you are implementing a new reactor,
tests should be using in-memory reactors --
so the usefulness of &lt;code&gt;trial&lt;/code&gt; is limited.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="static-checking"&gt;
&lt;h2&gt;Static checking&lt;/h2&gt;
&lt;p&gt;In the static checking arena,
&lt;code&gt;flake8&lt;/code&gt;
and
&lt;code&gt;pylint&lt;/code&gt;
are both still going strong.
There are less and less reasons not to use both,
especially if starting a project from scratch.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;flake8&lt;/code&gt; plugin ecosystem is rich,
and it is useful to look around and see if useful things are there.
For example, the &lt;code&gt;ebb-lint&lt;/code&gt;
plugin is extremely strict about coding conventions --
hard to introduce to existing code bases,
but wonderful when starting out a new one.&lt;/p&gt;
&lt;p&gt;In the meantime,
&lt;code&gt;pylint&lt;/code&gt; has decent static code flow analysis
which can often prevent bugs.
Note,
however,
that Python static code analysis is hard,
and pylint is not perfect.
For example,
it will often strugle with &lt;code&gt;attrs&lt;/code&gt;-based classes.&lt;/p&gt;
&lt;p&gt;Last but not least,
&lt;code&gt;mypy&lt;/code&gt; has made a showing in the field.
It supports both Python 2 an 3,
and allows annotating functions with types,
in order to find mismatches before running the code.
This is especially useful at API &amp;quot;boundaries&amp;quot;,
where the unit tests tend to cross less.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="test-metarunners"&gt;
&lt;h2&gt;Test metarunners&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;tox&lt;/code&gt; testing system is still the golden standard in Python.
It can test complicated dependency matrixes,
and allows configuring test commands flexibly.
Its documentation is somewhat lacking, sadly --
it is often the case new tricks are only apparently after reading
someone else's tox file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="output"&gt;
&lt;h2&gt;Output&lt;/h2&gt;
&lt;p&gt;Building wheels,
especially if the project has no native-code extensions,
is nowadays considered standard.
The best place to build wheels is in tox,
when configuring a test that will build a wheel,
install it,
and then test against the installed wheel.&lt;/p&gt;
&lt;p&gt;The best and most reliable way to upload wheels,
and source distributions,
to PyPI is to use &lt;code&gt;twine&lt;/code&gt;.
It used to be a good idea to test against the test PyPI server,
but nowadays it is best to set up a &lt;code&gt;devpi&lt;/code&gt; server
for local testing.&lt;/p&gt;
&lt;p&gt;When building applications,
&lt;code&gt;pex&lt;/code&gt;
is a great output format.
It allows a one-file install.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="future"&gt;
&lt;h2&gt;Future&lt;/h2&gt;
&lt;p&gt;The future is bright -- &lt;code&gt;pip&lt;/code&gt; 10 is slated to come out,
supporting the &lt;code&gt;pyproject.toml&lt;/code&gt; format --
and hopefully the next post in the series will explain how to make
packages using &lt;code&gt;flit&lt;/code&gt;,
with no &lt;code&gt;setup.py&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Jupyter for SRE</title><link href="https://orbifold.xyz/jupyter-for-sre.html" rel="alternate"></link><published>2017-12-30T19:30:00-08:00</published><updated>2017-12-30T19:30:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2017-12-30:/jupyter-for-sre.html</id><summary type="html">&lt;p&gt;Jupyter is a tool that came out of the data science community. In
science, being able to replicate experiments is of the utmost importance
-- so a tool where you can &amp;quot;show your work&amp;quot; is helpful. However, being
able to show your work -- have colleagues validate what you have done,
repeat …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Jupyter is a tool that came out of the data science community. In
science, being able to replicate experiments is of the utmost importance
-- so a tool where you can &amp;quot;show your work&amp;quot; is helpful. However, being
able to show your work -- have colleagues validate what you have done,
repeat it if needs be, and learn new techniques -- is also useful in the
world of Site Reliability Engineering and DevOps.&lt;/p&gt;
&lt;p&gt;The Jupyter console allows us to experiment (carefullly!) with APIs,
running one function at a time, and validating the results. It allows
building the needed automation from simple atoms, all the while learning
how to use them.&lt;/p&gt;
&lt;p&gt;The Jupyter Python kernel is popular in the data science community
because so many data science libraries are available for Python.
Luckily, the same is true in the SRE/DevOps community.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;github3&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The GitHub API has several client libraries in Python. My personal
favorite is &lt;tt class="docutils literal"&gt;github3&lt;/tt&gt; -- I find its interface allowing remarkably
idiomatic Python.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;expanduser&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;~/.git-token&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fname&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;    &lt;span class="n"&gt;token&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;gh&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;github3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;token&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;I have prepared a &lt;a class="reference external" href="https://github.com/settings/tokens"&gt;GitHub authentication
token&lt;/a&gt; in a file. This allows the
NoteBook to be published widely, without leaking access credentials.
Never put usernames and passwords in Jupyter notebooks!&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;repositories&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gh&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;organization&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'twisted'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iter_repos&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;repositories&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;repositories&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
([&amp;lt;Repository [twisted/txmongo]&amp;gt;,
  &amp;lt;Repository [twisted/twisted]&amp;gt;,
  &amp;lt;Repository [twisted/txaws]&amp;gt;],
 26)
&lt;/pre&gt;
&lt;p&gt;This is a list of the repositories in the Twisted GitHub organization.
It is nice to be able to validate we got a reasonable value by checking
the first three. In previous versions of the notebook, my usage of
&lt;tt class="docutils literal"&gt;github3&lt;/tt&gt; had an error -- and this was a list of all repositories I
had access to, including private ones! Being able to inspect values
interactively meant I could fix the bug easily.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;repositories&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;branch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'trunk'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
'51d23b6cb004e60ed699b3b100b4c476f5aebc4e'
&lt;/pre&gt;
&lt;p&gt;As an example of why this might be useful, we are checking the commit
hash of the &lt;tt class="docutils literal"&gt;trunk&lt;/tt&gt; branch. This can be used in validating which
version we are running somewhere, or checking if there have been new
commits.&lt;/p&gt;
&lt;p&gt;The GitHub API is big, and this is not meant to be an exhaustive guide
to it. However, this approach is powerful -- it can be used, for
example, to automatically create pull requests for a list of
repositories. This comes in handy when needing to change the build
structure, for example.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;fabric&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;api&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fabpi&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://docs.fabfile.org/en/1.14/index.html"&gt;Fabric&lt;/a&gt; library,
(here used in its &lt;tt class="docutils literal"&gt;fabric3&lt;/tt&gt; fork) is an all-purpose ad-hoc library for
operations.&lt;/p&gt;
&lt;p&gt;Again, a full tutorial is beyond the scope of this article.&lt;/p&gt;
&lt;p&gt;fabpi.local(&amp;quot;uname -a&amp;quot;, capture=True)&lt;/p&gt;
&lt;p&gt;However, the advantages of running Fabric from Jupyter notebook are big.
Because Fabric is specifically designed for &lt;em&gt;ad-hoc&lt;/em&gt; operations, there
is often no way to know exactly what someone did. Even with a
&lt;tt class="docutils literal"&gt;fabfile&lt;/tt&gt;, the logging is often lacking.&lt;/p&gt;
&lt;p&gt;Running the functions from a notebook means an official log of what was
done -- that can easily be attached to the relevant ticket, or to the
post-mortem. (Either the post-mortem that the operations were meant to
fix, or the ones they inevitably caused).&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;docker&lt;/span&gt;&lt;span class="w"&gt;
&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;docker&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DockerClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;base_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'unix://var/run/docker.sock'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The Docker client is also available as a Python library. Once again, the
possibilities are endless.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;images&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tags&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;''&lt;/span&gt;&lt;span class="p"&gt;])[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;startswith&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'debian'&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
[&amp;lt;Image: 'debian:latest'&amp;gt;,
 &amp;lt;Image: 'debian:stable-slim', 'moshez/debian:2017-10-26T10-58-56-455022'&amp;gt;]
&lt;/pre&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;boto3&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;tt class="docutils literal"&gt;boto3&lt;/tt&gt; library is an API for the Amazon Web Services -- which
includes everything from load balancers, through orchestrating
containers, to sending e-mail.&lt;/p&gt;
&lt;p&gt;The Jupyter console is a great adjunct to the AWS web console -- while
results can often be inspected in the web console, any actions done from
the notebook can be repeated, tweaked, and automated.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;ec2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;boto3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'ec2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;region_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'us-west-2'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;div class="section" id="summary"&gt;
&lt;h2&gt;Summary&lt;/h2&gt;
&lt;p&gt;For a team of SRE/DevOps engineers who are already using Python, the
Jupyter notebook allows a great way to communicate about actions taken.
It logs the inputs and the outputs, while allowing editing and
clarifying.&lt;/p&gt;
&lt;p&gt;Note that it is &lt;em&gt;not&lt;/em&gt; a useful auditing tool, and should not be used as
such. It is meant as a &lt;em&gt;communications&lt;/em&gt; tool, attaching notebooks to
tickets or e-mails in order to clarify, in a way that can be fed back
into a computer for testing and tweaking.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Write Python like an expert</title><link href="https://orbifold.xyz/expert-python.html" rel="alternate"></link><published>2017-12-17T22:00:00-08:00</published><updated>2017-12-17T22:00:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2017-12-17:/expert-python.html</id><summary type="html">&lt;p&gt;Ten tricks to level up your Python.&lt;/p&gt;
&lt;div class="section" id="trick-0-kiss"&gt;
&lt;h2&gt;Trick 0 -- KISS&lt;/h2&gt;
&lt;p&gt;Experts know about the weird dark corners of Python --
but do not use them in production code.
The first tip is remembering that while
&lt;a class="reference external" href="http://www.pythondoeswhat.com/"&gt;Python has some interesting corners&lt;/a&gt;,
they are best avoided in production code.&lt;/p&gt;
&lt;p&gt;Make your code as …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Ten tricks to level up your Python.&lt;/p&gt;
&lt;div class="section" id="trick-0-kiss"&gt;
&lt;h2&gt;Trick 0 -- KISS&lt;/h2&gt;
&lt;p&gt;Experts know about the weird dark corners of Python --
but do not use them in production code.
The first tip is remembering that while
&lt;a class="reference external" href="http://www.pythondoeswhat.com/"&gt;Python has some interesting corners&lt;/a&gt;,
they are best avoided in production code.&lt;/p&gt;
&lt;p&gt;Make your code as straightforward as possible.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="trick-1-the-power-of-lists"&gt;
&lt;h2&gt;Trick 1 -- The power of lists&lt;/h2&gt;
&lt;p&gt;The humble &lt;code&gt;list&lt;/code&gt;, or even humbler &lt;code&gt;[]&lt;/code&gt;,
pack a lot of punch --
for those who know how to use it.&lt;/p&gt;
&lt;p&gt;It serves, of course, as a useful array type.
It is also a good stack, using &lt;code&gt;append&lt;/code&gt; and &lt;code&gt;pop()&lt;/code&gt;,
with the correct (amortized) performance characteristic.
The &lt;code&gt;.sort()&lt;/code&gt; method is sophisticated enough it is one of the
few cases where Python actually broke new theoretical grounds
on a sorting algorithm --
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Timsort"&gt;timsort&lt;/a&gt; was originally invented for it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="trick-2-the-power-of-dicts"&gt;
&lt;h2&gt;Trick 2 -- The power of dicts&lt;/h2&gt;
&lt;p&gt;The humble &lt;code&gt;dict&lt;/code&gt;, or even humbler &lt;code&gt;{}&lt;/code&gt;,
also pack a lot of punch.&lt;/p&gt;
&lt;p&gt;While many use string keys,
it is important to remember any immutable type is possible as keys,
including tuples and frozensets.
This helps writing caches, memoizers or even a passable sparse array.&lt;/p&gt;
&lt;p&gt;The keyword argument constructor also gives it a lot of power for making
simple and readable APIs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="trick-3-iterators-and-generators"&gt;
&lt;h2&gt;Trick 3 -- Iterators and generators&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://treyhunner.com/2016/12/python-iterator-protocol-how-for-loops-work/"&gt;iterator protocol&lt;/a&gt; is one of the most powerful aspects of Python.
Experts understand it deeply,
and know how to use it to make code shorter,
more readable,
more composable
and more debuggable.&lt;/p&gt;
&lt;p&gt;One of the easiest ways to accomplish it is to write functions that
accept an iterator and return an iterator:
and remembering that &lt;a class="reference external" href="https://stackoverflow.com/questions/1756096/understanding-generators-in-python"&gt;generators&lt;/a&gt; are really good syntactic sugar
for writing functions which return iterators.&lt;/p&gt;
&lt;p&gt;If a code base has a lot of functions that return iterators,
the iterator algebra functions in &lt;a class="reference external" href="https://docs.python.org/3/library/itertools.html"&gt;itertools&lt;/a&gt; become
immediately higher value.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="trick-4-collections"&gt;
&lt;h2&gt;Trick 4 -- Collections&lt;/h2&gt;
&lt;p&gt;The collections module has a lot of wonderful functionality.&lt;/p&gt;
&lt;p&gt;For code that needs defaults, &lt;code&gt;defaultdict&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For code that needs counting, &lt;code&gt;Counter&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For FIFOs, &lt;code&gt;deque&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="trick-5-attrs"&gt;
&lt;h2&gt;Trick 5 -- attrs&lt;/h2&gt;
&lt;p&gt;One thing that is not wonderful about the collections module is the
&lt;code&gt;namedtuple&lt;/code&gt; class.&lt;/p&gt;
&lt;p&gt;In almost every way imaginable, the &lt;a class="reference external" href="http://www.attrs.org/en/stable/"&gt;attrs&lt;/a&gt; package is &lt;a class="reference external" href="https://glyph.twistedmatrix.com/2016/08/attrs.html"&gt;better&lt;/a&gt;.
Also, for things that wouldn't be namedtuples otherwise,
attrs is still better.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="trick-6-first-class-functions-and-types"&gt;
&lt;h2&gt;Trick 6 -- First class functions and types&lt;/h2&gt;
&lt;p&gt;Return functions. Store them in lists, or dictionaries.
Keep classes in a double-ended queue.
These are &lt;em&gt;not&lt;/em&gt; a &amp;quot;Python does what&amp;quot;.
These are ways to avoid boilerplate or needless indirections.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="trick-7-unit-tests-and-lint"&gt;
&lt;h2&gt;Trick 7 -- Unit tests and lint&lt;/h2&gt;
&lt;p&gt;Experts hate having to waste time.
Writing unit tests makes sure they have to fix any given bug only once.
Correctly configuring a linter makes sure they do not have to comment
on every pull request with a list of nitpicks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="trick-8-immutability"&gt;
&lt;h2&gt;Trick 8 -- Immutability&lt;/h2&gt;
&lt;p&gt;Immutable data structures,
such as those available from the &lt;a class="reference external" href="https://pyrsistent.readthedocs.io/en/latest/"&gt;Pyrsistent&lt;/a&gt; library,
are useful for avoiding a lot of bugs.
&amp;quot;Global mutable state is the root of all evil&amp;quot; --
and if you cannot get rid of things being global
(modules, function defaults and other things)
it is often possible to make them mutable.&lt;/p&gt;
&lt;p&gt;Immutable data structures are much easier to reason about,
and much harder to make bugs that are hard to find and trigger.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="trick-9-not-reinventing-the-wheel"&gt;
&lt;h2&gt;Trick 9 -- Not reinventing the wheel&lt;/h2&gt;
&lt;p&gt;If something is available as a &lt;a class="reference external" href="http://wheel.readthedocs.io/en/stable/"&gt;wheel&lt;/a&gt;,
don't reinvent it.
PyPI has ~125K packages, at times of writing.
It is almost certain that it has something that takes care of
some of the task you are currently working on.&lt;/p&gt;
&lt;p&gt;How to know what's worthwhile?&lt;/p&gt;
&lt;p&gt;Follow &lt;a class="reference external" href="http://planetpython.org/"&gt;Planet Python&lt;/a&gt;,
check &lt;a class="reference external" href="https://github.com/vinta/awesome-python"&gt;Awesome python&lt;/a&gt;
and, if it is within reach,
try to go to Python meetups or conferences.
(If it's not,
of even if it is,
&lt;a class="reference external" href="http://pyvideo.org/"&gt;PyVideo&lt;/a&gt; has the videos --
but talking to other Python programmers is extremely useful.)&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Interesting text encodings (and the people who love them)</title><link href="https://orbifold.xyz/interesting-encodings.html" rel="alternate"></link><published>2017-12-13T20:00:00-08:00</published><updated>2017-12-13T20:00:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2017-12-13:/interesting-encodings.html</id><summary type="html">&lt;p&gt;(Thanks to Tom Prince and Nelson Elhage for suggestions
for improvement.)&lt;/p&gt;
&lt;p&gt;Nowadays, almost all text will be encoded in UTF-8 --
for good reasons,
it is a well thought out encoding.
Some of it will be in Latin 1, AKA ISO-8859-1,
which is popular in the western world.
Less of it …&lt;/p&gt;</summary><content type="html">&lt;p&gt;(Thanks to Tom Prince and Nelson Elhage for suggestions
for improvement.)&lt;/p&gt;
&lt;p&gt;Nowadays, almost all text will be encoded in UTF-8 --
for good reasons,
it is a well thought out encoding.
Some of it will be in Latin 1, AKA ISO-8859-1,
which is popular in the western world.
Less of it will be in other members of the ISO-8859 family
(-2 or higher).
Some text from Japan will occasionally still be in Shift-JIS.
These encodings are all reasonable -- too reasonable.&lt;/p&gt;
&lt;p&gt;What about more interesting encodings?&lt;/p&gt;
&lt;div class="section" id="ebcdic"&gt;
&lt;h2&gt;EBCDIC&lt;/h2&gt;
&lt;p&gt;Encodings turn a sequence of logical code points into a sequence of bytes.
Bytes, in turn, are just sequences of ones and zeroes.
Usually, we think of the ones and zeroes as mostly symmetric --
it wouldn't matter if the encoding was to the &amp;quot;dual&amp;quot; byte,
where every bit was flipped.
SSD drives do not like long sequences of zeroes --
but neither do they like long sequences of ones.&lt;/p&gt;
&lt;p&gt;What if there was no symmetry?
What if every &amp;quot;one&amp;quot; weakened your byte?&lt;/p&gt;
&lt;p&gt;This is the history of one of the most venerable media to carry digital
information --
predating the computer by its use in automated weaving machines --
the punched card.
It was called so because to make a &amp;quot;one&amp;quot;,
you would punch a hole --
that was detected by the card reader by an electric circuit being completed.
Punching too many holes made cards weak:
likely to rip in the wear and tear the automated reading machines
inflicted upon them,
in the drive to read cards ever faster.&lt;/p&gt;
&lt;p&gt;EBCDIC (Extended Binary Coded Decimal Interchange Code) was the solution.
&amp;quot;Extended&amp;quot; because it extends the Binary Coded Decimal standard --
numbers are encoded using one punch,
which makes them easy to read with a hex editor.
Letters are encoded with two.
Nothing sorts correctly, of course,
but that was not a big priority.
Quoting from Wikipedia:&lt;/p&gt;
&lt;p&gt;&amp;quot;The distinct encoding of 's' and 'S'
(using position 2 instead of 1)
was maintained from punched cards where it was desirable not to have
hole punches too close to each other to ensure the integrity of the
physical card.&lt;/p&gt;
&lt;p&gt;Of course,
it wouldn't be IBM if there weren't a whole host of encodings,
subtly incompatible,
all called EBCDIC.
If you live in the US, you are supposed to use code page 1140
for your EBCDIC needs.&lt;/p&gt;
&lt;p&gt;Luckily,
if you ever need to connect your Python interpreter to a card-punch machine,
the Unicode encodings have got you covered:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; &amp;quot;hello&amp;quot;.encode('cp1140')
b'\x88\x85\x93\x93\x96'
&lt;/pre&gt;
&lt;p&gt;If you came to this post to learn skills immediately relevant
to your day to day job and are entirely not obsolete,
you're welcome.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="koi-8"&gt;
&lt;h2&gt;KOI-8&lt;/h2&gt;
&lt;p&gt;Suppose you're a Russian speaker.
You write your language using the Cyrrilic alphabet,
suspiciously absent from the American Standard Code for Information Interchange
(ASCII),
developed during the height of the cold war between the US of A
and the USSR.
Some computers are going to have Cyrrilic fonts installed --
and some are not.
Suppose that it is the 80s,
and the only language that runs fast enough on most computers is assembly
or C.
You want to make a character encoding that&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Will look fine if someone has the Cyrrilic installed&lt;/li&gt;
&lt;li&gt;Can be converted to ASCII that will look kinda-sorta like the Cyrrilic
with a program that is trivial to write in C.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;KOI-8 is the result of this not-quite-thought experiment.&lt;/p&gt;
&lt;p&gt;The code to convert from KOI-8 to kinda-sorta-look-a-like ASCII,
written in Python, would be:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
MASK = (1 &amp;lt;&amp;lt; 8) - 1
with open('input', 'rb') as fin, open('output', 'wb') as fout:
    while True:
        c = fin.read(1)
        if not c:
            break
        c = c &amp;amp; MASK # &amp;lt;--- this right here
        fout.write(c)
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;MASK&lt;/code&gt; constant, written in binary,
is just &lt;code&gt;0b1111111&lt;/code&gt; (seven ones).
The line with the arrow masks out the &amp;quot;high bit&amp;quot; in the input character.&lt;/p&gt;
&lt;p&gt;Sorting KOI-8 by byte value gives you a sort that is not even a little bit
right for the alphabet:
the letters are all jumbled up.
But it does mean that trivial programs in C or assembly --
or sometimes even things that would try to read words out of
old MS Word files --
could convert it to something that looks semi-readable
on a display that is only configured to display ASCII characters,
possibly as a deep hardware limitations.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="punycode"&gt;
&lt;h2&gt;Punycode&lt;/h2&gt;
&lt;p&gt;How lovely it is,
of course,
to live in 2017 --
the future.
We might not have flying cars.
We might not even be wearing silver clothing.
But by jolly,
at least our modern encodings make sense.&lt;/p&gt;
&lt;p&gt;We send e-mails in UTF-8 to each other,
containing wonderful emoji like &amp;quot;eggplant&amp;quot;
or &amp;quot;syringe&amp;quot;.&lt;/p&gt;
&lt;p&gt;Of course, e-mail is old technology --
we send our eggplants, syringes and avocadoes
via end-to-end encrypted Signal chat messages,
unreadable by any but our intended recipient.&lt;/p&gt;
&lt;p&gt;It is also easy to register our own site,
and use an off-the-shelf SaaS offering,
such as Wordpress or SquareSpace,
to power it.
And no matter what we want to put as our domain,
we can...as long as it is ASCII-compatible,
because DNS is also older than the end of the cold war,
and assumes English only.&lt;/p&gt;
&lt;p&gt;Seems like this isn't the future after all,
which the suspicious lack of flying cars and silver clothing
should really have alerted us to.&lt;/p&gt;
&lt;p&gt;In our current times,
which will be a future generation's benighted past,
we must use yet another encoding to put our avocadoes and eggplans
in the names of websites,
where they rightly belong.&lt;/p&gt;
&lt;p&gt;Enter Punycode, an encoding that is not afraid to ask the hard questions
like
&amp;quot;are you sure that the order encoded bits in the input and
the output has to be the same&amp;quot;?&lt;/p&gt;
&lt;p&gt;That is, if one string is a prefix of another,
should its encoding be a prefix of the other?
Just because UTF-8, EBCDIC, KOI-8 or Shift-JIS adhere to this rule
doesn't mean we can't think outside the box!&lt;/p&gt;
&lt;p&gt;Punycode rearranges the encoding so that all ASCII compatible characters
go to the beginning of the string,
followed by a hyphen,
followed by a complicated algorithm designed to minimize the number
of output bytes by assuming the encoded
non-ASCII characters are close together.&lt;/p&gt;
&lt;p&gt;Consider a simple declaration of love:
&amp;quot;I&amp;lt;Red heart emoji&amp;gt;U&amp;quot;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; source = b'I\xe2\x9d\xa4U'
&amp;gt;&amp;gt;&amp;gt; declaration = source.decode('utf-8')
&amp;gt;&amp;gt;&amp;gt; declaration.encode('punycode')
b'IU-ony'
&lt;/pre&gt;
&lt;p&gt;Note how, like a well-worn pickup line,
I and U were put together,
while the part that encodes the heart is at the end.&lt;/p&gt;
&lt;p&gt;Consider the slightly more selfish declaration of self-love:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
&amp;gt;&amp;gt;&amp;gt; source = b'I\xe2\x9d\xa4me'
&amp;gt;&amp;gt;&amp;gt; source.decode('utf-8').encode('punycode')
b'Ime-4r6a'
&lt;/pre&gt;
&lt;p&gt;Note that even though the selfish declaration and the true love declaration
both share a two-character prefix,
the result only shares one byte of prefix:
the heart got moved to the end --
and not the same heart.
Truly, every love is unique.&lt;/p&gt;
&lt;p&gt;Punycode's romance with DNS, too,
was frought with drama:
indeed, many browsers now will not display unicode in the address bar,
instead showing &amp;quot;xn--&amp;lt;punycode ASCII&amp;gt;&amp;quot;
(the &amp;quot;xn--&amp;quot;  in the beginning indicates this is a punycoded string)
as a security measure against phishing:
it turns out there are a lot of characters in Unicode that
look a lot like &amp;quot;a&amp;quot;,
leading to many interesting variants on &amp;quot;Paypal.com&amp;quot; and &amp;quot;Gmail.com&amp;quot;,
which look indistinguishable to most humans --
and turns out,
most users of the web are indeed of the homo sapiens species.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Exploration Driven Development</title><link href="https://orbifold.xyz/exploration-driven-development.html" rel="alternate"></link><published>2017-12-10T20:00:00-08:00</published><updated>2017-12-10T20:00:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2017-12-10:/exploration-driven-development.html</id><summary type="html">&lt;p&gt;&amp;quot;It's ok to mess up your own room.&amp;quot;&lt;/p&gt;
&lt;p&gt;Sometime there is a problem where the design is obvious --
at least to you.
Maybe it's simple.
Maybe you've solved one like that many times.
In those cases,
just go ahead --
use Test-Driven-Development, lint your code as you're writing,
and push a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&amp;quot;It's ok to mess up your own room.&amp;quot;&lt;/p&gt;
&lt;p&gt;Sometime there is a problem where the design is obvious --
at least to you.
Maybe it's simple.
Maybe you've solved one like that many times.
In those cases,
just go ahead --
use Test-Driven-Development, lint your code as you're writing,
and push a branch full of beautiful code, ready to be merged.&lt;/p&gt;
&lt;p&gt;This is the exception, rather than the rule, though.
In real life, half of the time, we have no idea what we are doing.
Is a recursive or iterative solution better?
How exactly does this SaaS work?
What does Product Management &lt;em&gt;actually&lt;/em&gt; want?
What is, exactly, the answer to life, the universe and everything?&lt;/p&gt;
&lt;p&gt;A lot of the time,
solving a problem becomes with exploratory programming.
Writing little snippets, testing them out,
writing more snippets,
throwing some away when they seem to be going down a bad path,
saving some from earlier now that we understand the structure better.
Poking and prodding at the problem,
until the problem's boundaries become clearer.&lt;/p&gt;
&lt;p&gt;This is,
after all,
why dyamic languages became popular --
Python became popular in web development and scientific computing
precisely because in both places,
&amp;quot;exploratory programming&amp;quot; is important.&lt;/p&gt;
&lt;p&gt;In those cases, every single rule about &amp;quot;proper software development&amp;quot;
goes straight out the window.
Massive functions are fine, when you don't know how to break them.
Code with one letter variables is fine, when you are likely to throw it away.
Code with bad formatting is fine, when you are likely to refactor it.
Code with no tests is fine, if it's doing the wrong thing anyway.
Code with big commented out sections is fine, if those are likely
to prove useful in an hour.&lt;/p&gt;
&lt;p&gt;In short,
every single rule of &amp;quot;proper software development&amp;quot;
goes out the window when we are exploring a problem,
testing its boundaries.
All but one -- work on a branch, and keep your work backed up.
Luckily, all modern version control systems have good branch isolation
and easy branch pushing,
so there is no problem.
No problem, except the social one --
people are embarrassed at writing &amp;quot;bad code&amp;quot;.
Please don't be.
Everyone does it.
Just &lt;em&gt;don't merge&lt;/em&gt; it into the production code --
that will legitimately annoy other people.&lt;/p&gt;
&lt;p&gt;But as long as the mess is in your own room,
don't worry about cleaning it up.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Abstraction Cascade</title><link href="https://orbifold.xyz/abstraction-cascade.html" rel="alternate"></link><published>2017-11-14T18:23:00-08:00</published><updated>2017-11-14T18:23:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2017-11-14:/abstraction-cascade.html</id><summary type="html">&lt;p&gt;(This is an adaptation of part of the &lt;a class="reference external" href="https://www.youtube.com/watch?v=liXwz9ygeIk"&gt;talk&lt;/a&gt; &lt;a class="reference external" href="https://github.com/kurtbrose"&gt;Kurt Rose&lt;/a&gt; and I
gave at &lt;a class="reference external" href="https://pybay.com/"&gt;PyBay 2017&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;An abstraction cascade is a common anti-pattern in legacy system.
It is useful to understand how to recognize it,
how it tends to come about,
how to fix it --
and most importantly,
what …&lt;/p&gt;</summary><content type="html">&lt;p&gt;(This is an adaptation of part of the &lt;a class="reference external" href="https://www.youtube.com/watch?v=liXwz9ygeIk"&gt;talk&lt;/a&gt; &lt;a class="reference external" href="https://github.com/kurtbrose"&gt;Kurt Rose&lt;/a&gt; and I
gave at &lt;a class="reference external" href="https://pybay.com/"&gt;PyBay 2017&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;An abstraction cascade is a common anti-pattern in legacy system.
It is useful to understand how to recognize it,
how it tends to come about,
how to fix it --
and most importantly,
what kind of things will &lt;em&gt;not&lt;/em&gt; fix it.
The last one is important,
in general,
for anti-patterns in legacy systems:
if the obvious fix worked,
it would have been already dealt with,
and would not be a common anti-pattern in legacy systems.&lt;/p&gt;
&lt;div class="section" id="recognition"&gt;
&lt;h2&gt;Recognition&lt;/h2&gt;
&lt;p&gt;The usual pattern for a abstraction cascade looks like
complicated,
ad-hoc,
if/else sequence to decide which path to take.
Here is example for a abstraction cascade for finding out a network address
corresponding to a name:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def get_address(name):
    if name in services:
        if services[name].ip:
            return service[name].ip, service[name].port
        elif services[name].address:
            # Added for issue #2321
            if ':' in services[name].address:
               return service[name].address.split(':')
            else:
               # Fixes issues #6985
               # TODO: Hotfix, clean-up later
               return service[name].address, DEFAULT_PORT
    return dns_lookup(name), DEFAULT_PORT
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="history"&gt;
&lt;h2&gt;History&lt;/h2&gt;
&lt;p&gt;At each step,
it seems reasonable to make a specific change.
Here is a typical way this kind of code comes about.&lt;/p&gt;
&lt;p&gt;The initial version is reasonable:
since DNS is a way to publish name to address mapping,
why not use a standard?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def get_address(name):
    return dns_lookup(name), DEFAULT_PORT
&lt;/pre&gt;
&lt;p&gt;Under load,
an outage happened.
There was no time to investigate how to configure DNS caching
or TTL better --
so the &amp;quot;popular&amp;quot; services got added to a static list,
with a &amp;quot;fast path&amp;quot; checking.
This decision also makes sense:
when an outage is ongoing,
the top priority is to relieve the symptoms.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def get_address(name):
    if name in services:
        # Fixes issues #6985
        # TODO: Hotfix, clean-up later
        return service[name].address, DEFAULT_PORT
    return dns_lookup(name), DEFAULT_PORT
&lt;/pre&gt;
&lt;p&gt;However,
now the door has opened to add another path in the function.
When the need to support multiple services on one host
happened,
it was easier to just add another path:
after all,
this was only for new services.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def get_address(name):
    if name in services:
        # Added for issue #2321
        if ':' in services[name].address:
            return service[name].address.split(':')
        else:
            # Fixes issues #6985
            # TODO: Hotfix, clean-up later
            return service[name].address, DEFAULT_PORT
    return dns_lookup(name), DEFAULT_PORT
&lt;/pre&gt;
&lt;p&gt;When the change to IPv6 occured,
splitting on &lt;code&gt;:&lt;/code&gt; was not a safe operation --
so a separate field was added.
Again,
the existing &amp;quot;new&amp;quot; services
(by now, many -- and not so new!)
did not need to be touched:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
def get_address(name):
    if name in services:
        if services[name].ip:
            return service[name].ip, service[name].port
        elif services[name].address:
            # Added for issue #2321
            if ':' in services[name].address:
               return service[name].address.split(':')
            else:
               # Fixes issues #6985
               # TODO: Hotfix, clean-up later
               return service[name].address, DEFAULT_PORT
    return dns_lookup(name), DEFAULT_PORT
&lt;/pre&gt;
&lt;p&gt;Of course,
this is typically just chapter one in the real story:
having to adapt to multiple data centers,
or multiple providers of services,
will lead to more and more of these paths --
with nothing thrown away,
because &amp;quot;some legacy service depends on it -- maybe&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="non-fixes"&gt;
&lt;h2&gt;Non-fixes&lt;/h2&gt;
&lt;div class="section" id="fancier-dispatch"&gt;
&lt;h3&gt;Fancier dispatch&lt;/h3&gt;
&lt;p&gt;Sometimes the ad-hoc if/else pattern is obscured by more abstract dispatch
logic:
for example,
something that loops through classes and finds out which one is the right
one:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class AbstractNameFinder(object):
    def matches(self, name):
        raise NotImplementedError()
    def get_address(self, name):
        raise NotImplementedError()
class DNS(AbstractNameFinder):
    def matches(self, name):
        return True
    def get_address(self, name):
        return dns_lookup(name), DEFAULT_PORT
class Local(AbstractNameFinder):
    def matches(self, name):
        return hasattr(services.get(name), 'ip')
    def get_address(self, name):
        return services[name].ip, services[name].port
finders = [Local(), DNS()]
def get_address(name):
    for finder in finders:
        if finder.match(name):
            return finder.get_address(name)
&lt;/pre&gt;
&lt;p&gt;This is actually worse --
now the problem can be spread over multiple files,
with no single place to fix it.
While the code &lt;em&gt;can&lt;/em&gt; be converted to this form,
semi-mechanically,
this does not fix the underlying issue --
and will actually make the problem continue on with force.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pareto-fix"&gt;
&lt;h3&gt;Pareto fix&lt;/h3&gt;
&lt;p&gt;The Pareto rule is that 80% of the problem is solved with 20% of the effort.
It is often the case that a big percentage
(in the stereotypical Pareto case, 80%)
of the problem is not hard to fix.&lt;/p&gt;
&lt;p&gt;For example,
most services are actually listed in some file,
and all we need to do is read this file in and look up based on that.
The incentive to fix &amp;quot;80% of the problem&amp;quot;
and leave the &amp;quot;20%&amp;quot; for later is strong.&lt;/p&gt;
&lt;p&gt;However,
usually the problem is that each of those &amp;quot;Pareto fixes&amp;quot;
again makes the problem worse:
since it is not a complete replacement,
another dispatch layer needs to be built to support the &amp;quot;legacy solution&amp;quot;.
The new dispatch layer, the new solution, and the legacy solution
all become part of the newest iteration of the legacy system,
and cause the problem to be even worse.&lt;/p&gt;
&lt;p&gt;Fixing 80% of the problem is useful for prototyping,
since we are not sure we are solving the right problem
and nothing better exists.
However, in this case,
the complete solution is necessary,
so neither of these conditions hold.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="escape-strategy"&gt;
&lt;h2&gt;Escape strategy&lt;/h2&gt;
&lt;p&gt;The reason this happens is because no single case can be &lt;em&gt;removed&lt;/em&gt;.
The way forward is not to add more cases,
but to try and remove a single case.
The first question to ask is: why was no case removed?
Often,
the reason is that there is no way to test whether removal is safe.&lt;/p&gt;
&lt;p&gt;It might take some work to build infrastructure that will properly
make removal safe.
Unit tests are often not enough.
Integration tests, as well,
are sometimes not enough.
Sometimes canary systems,
sometimes feature flag systems,
or, if worst comes to worst,
a way to test and roll-back quickly if a problem is found.&lt;/p&gt;
&lt;p&gt;Once it is possible to remove just one case
(in our example above,
maybe check what it would take to remove the case where we split
on a colon,
since this is clearly worse than just having separate attributes),
thought needs to be given to which case is best.&lt;/p&gt;
&lt;p&gt;Sometimes,
there is more than one case that is really needed:
some inherent,
deep,
trade-off.
However, it is rare to need more than two,
and almost unheard of to need more than three.
Start removing unneeded cases one by one.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;When seeing an abstraction cascade,
there is a temptation to &amp;quot;clean it up&amp;quot;:
but most obvious clean-ups end up making it worse.
However, by understanding how it came to be,
and finding a way to &lt;em&gt;remove&lt;/em&gt; cases,
it is possible to do away with it.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Gather</title><link href="https://orbifold.xyz/gather.html" rel="alternate"></link><published>2017-11-13T18:23:00-08:00</published><updated>2017-11-13T18:23:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2017-11-13:/gather.html</id><content type="html">&lt;p&gt;Gather is a plugin framework --
and it now has its own &lt;a class="reference external" href="http://gather.works/"&gt;blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Use it! If you like it,
&lt;a class="reference external" href="https://github.com/pygather/blog-ideas/issues"&gt;tell us about it&lt;/a&gt;,
and if there is a problem,
&lt;a class="reference external" href="https://github.com/pygather/gather/issues"&gt;tell us about that&lt;/a&gt;.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Brute Forcing AES</title><link href="https://orbifold.xyz/brute-forcing-aes.html" rel="alternate"></link><published>2017-09-27T22:50:00-07:00</published><updated>2017-09-27T22:50:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2017-09-27:/brute-forcing-aes.html</id><summary type="html">&lt;p&gt;Thanks to Paul Kehrer for reviewing!
Any mistakes or oversights that are left are my responsibility.&lt;/p&gt;
&lt;p&gt;AES's maximum key size is 256 bits
(there are also 128 and 192 bit versions available).
Is that enough?
Well, if there is a &lt;em&gt;cryptographic flaw&lt;/em&gt; in AES
(i.e.,
a way to recover …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Thanks to Paul Kehrer for reviewing!
Any mistakes or oversights that are left are my responsibility.&lt;/p&gt;
&lt;p&gt;AES's maximum key size is 256 bits
(there are also 128 and 192 bit versions available).
Is that enough?
Well, if there is a &lt;em&gt;cryptographic flaw&lt;/em&gt; in AES
(i.e.,
a way to recover some bits of the key by some manipulation
that takes less than 2**256 operations),
then it depends on how big the flaw is.
All algorithms come with the probablistic &amp;quot;flaw&amp;quot; that,
on average,
only 50% of the keys need to be tested --
since the right key is just as easily in the first half
as the second half.
This means, on average, just 2**255 operations are needed to
check &amp;quot;all&amp;quot; keys.&lt;/p&gt;
&lt;p&gt;If there is an &lt;em&gt;implementation flaw&lt;/em&gt; in your AES
implementation,
then it depends on the flaw --
most implementation flaws are &amp;quot;game over&amp;quot;.
For example, if the radio leakage from the CPU is enough to detect key bits,
the entire key can be recovered --
but that would be true
(with only minor additional hardship)
if the key was 4K bit long.
Another example is a related subkey attack,
where many messages are encrypted with keys that have a certain relationship
to each other
(e.g., sharing a prefix).
This implementation flaw (in a different encryption algorithm)
defeated the WEP WiFi standard.&lt;/p&gt;
&lt;p&gt;What if there is none?
What if actually recovering a key requires checking all possibilities?
Can someone do it,
if they have a &amp;quot;really big&amp;quot; computer?
Or a $10B data-center?&lt;/p&gt;
&lt;p&gt;How much is 256-bit security really worth?&lt;/p&gt;
&lt;p&gt;Let's see!&lt;/p&gt;
&lt;p&gt;We'll be doing a lot of unit conversions,
so we bring in the &lt;code&gt;pint&lt;/code&gt; library,
and create a new unit registry.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import pint
REGISTRY = pint.UnitRegistry()
&lt;/pre&gt;
&lt;p&gt;Assume we have a &lt;em&gt;really&lt;/em&gt; fast computer.
How fast?
As fast as theoretically possible,
or so.
The time it takes a photon to cross the nucleus of the hydrogen atom
(a single proton)
is called a &amp;quot;jiffy&amp;quot;.
(If someone tells you they'll be back in a jiffy,
they're probably lying --
unless they're really fast,
and going a very short distance!)&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
REGISTRY.define('jiffy = 5.4*10**-44 seconds')
&lt;/pre&gt;
&lt;p&gt;Some secrets are temporary.
Your birthday surprise party is no longer a secret after your friends yell
&amp;quot;surprise!&amp;quot;.
Some secrets are long-lived.
The British kept the secret of the broken Enigma until none were in use --
long after WWII was done.&lt;/p&gt;
&lt;p&gt;Even the Long Now Foundation,
though,
does not have concrete plans post-dating the death of our sun.
No worries,
unless the Twisted gets &lt;a class="reference internal" href="#more-efficient"&gt;more efficient&lt;/a&gt;,
the cursed orb has got a few years on it.&lt;/p&gt;
&lt;pre class="code literal-block" id="more-efficient"&gt;
sun_life = 10**10 * REGISTRY.years
&lt;/pre&gt;
&lt;p&gt;With our super-fast computer,
how many ticks do we get until the light of the sun shines no longer...&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
ticks = sun_life.to('jiffy').magnitude
&lt;/pre&gt;
&lt;p&gt;...and how many do we need to brute-force AES?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
brute_force_aes = 2**256
&lt;/pre&gt;
&lt;p&gt;Luckily,
brute-force parallelises really well:
just have each computer check a different part of the key-space.
We have fast computer technology,
and quite a while,
so how many do we need?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
parallel = brute_force_aes / ticks
&lt;/pre&gt;
&lt;p&gt;No worries!
Let's just take over the US,
and use its entire Federal budget to finance our computers.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
US_budget = 4 * 10**12
&lt;/pre&gt;
&lt;p&gt;Assume our technology is cheap --
maintaining each computer,
for the entire lifetime of the sun,
costs a mere $1.&lt;/p&gt;
&lt;p&gt;Do we have enough money?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
parallel/US_budget
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;
4953.566155198452
&lt;/pre&gt;
&lt;p&gt;Oh,
we are only off by a factor of about 5000.
We just need the budget of 5000 more countries,
about as wealthy as the US,
in order to fund our brute-force project.&lt;/p&gt;
&lt;p&gt;Again,
to be clear,
none of this is a &lt;em&gt;cryptographic analysis&lt;/em&gt; of AES --
but AES is the target of much analysis,
and thus far,
no theoretical flaw has been found that gives more than a bit or two.
Assuming AES is secure,
and assuming the implementation has no flaws,
brute-forcing AES is impossible --
even with alien technology,
plenty of time
and access to quite a bit of the world's wealth.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Announcing NColony 17.9.0</title><link href="https://orbifold.xyz/announcing-ncolony-17-9.html" rel="alternate"></link><published>2017-09-19T15:00:00-07:00</published><updated>2017-09-19T15:00:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2017-09-19:/announcing-ncolony-17-9.html</id><content type="html">&lt;p&gt;I have released NColony 17.9.0,
available in a &lt;a class="reference external" href="https://pypi.python.org/pypi/ncolony/17.9.0"&gt;PyPI&lt;/a&gt; near you.&lt;/p&gt;
&lt;p&gt;New this version:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="http://calver.org/"&gt;CalVer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Python 3 support!&lt;/li&gt;
&lt;li&gt;You can ask to, explicitly, inherit environment variables from the monitoring process.&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://ncolony.org"&gt;Website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to Mark Williams for reviewing many pull requests.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>SSH to EC2</title><link href="https://orbifold.xyz/ec2-ssh.html" rel="alternate"></link><published>2017-08-30T21:30:00-07:00</published><updated>2017-08-30T21:30:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2017-08-30:/ec2-ssh.html</id><summary type="html">&lt;p&gt;(Thanks to Donald Stufft for reviewing this post,
and to Glyph Lefkowitz for inspiring much of it.)&lt;/p&gt;
&lt;p&gt;(JP Calderone wrote a &lt;a class="reference external" href="http://as.ynchrono.us/2017/09/ssh-to-ec2-refrain.html"&gt;Twisted version&lt;/a&gt; of this approach.)&lt;/p&gt;
&lt;p&gt;It is often the case that after creating an EC2 instance in AWS,
the next step is SSHing.
This might be because the machine …&lt;/p&gt;</summary><content type="html">&lt;p&gt;(Thanks to Donald Stufft for reviewing this post,
and to Glyph Lefkowitz for inspiring much of it.)&lt;/p&gt;
&lt;p&gt;(JP Calderone wrote a &lt;a class="reference external" href="http://as.ynchrono.us/2017/09/ssh-to-ec2-refrain.html"&gt;Twisted version&lt;/a&gt; of this approach.)&lt;/p&gt;
&lt;p&gt;It is often the case that after creating an EC2 instance in AWS,
the next step is SSHing.
This might be because the machine is a development machine,
or it might be tilling the ground for a different remote control:
for example, setting up a &lt;a class="reference internal" href="#salt"&gt;salt&lt;/a&gt; minion.&lt;/p&gt;
&lt;p&gt;In those cases,
many either press &lt;code&gt;y&lt;/code&gt;
when seeing SSH prompt them about an unknown host key,
or even turn off host key verification altogether.
This is convenient,
quick,
and very insecure.
A man in the middle can use this to steal credentials --
maybe not permanently,
but enough to log in into any other machine with the same SSH key.&lt;/p&gt;
&lt;p&gt;The correct thing to do is to prepare the SSH configuration
by retrieving the host key via the AWS API.
Unfortunately, doing it is not trivial.&lt;/p&gt;
&lt;p&gt;Fortunately,
it is a good example of how to use the AWS API from Python.&lt;/p&gt;
&lt;pre class="code literal-block" id="salt"&gt;
import sys
import boto3

client = boto3.client('ec2', region_name='us-west-2')
resource = boto3.resource('ec2', region_name='us-west-2')

output = client.get_console_output(InstanceId=sys.argv[1])
result = output['Output']

rsa = [line for line in result.splitlines()
            if line.startswith('ssh-rsa')][0]

instance = resource.Instance(sys.argv[1])
known_hosts = '{},{} {}\n'.format(instance.public_dns_name,
                                  instance.public_ip_address,
                                  rsa)

with open(os.path.expanduser('~/.ssh/known_hosts'), 'a') as fp:
    fp.write(known_hosts)
&lt;/pre&gt;
&lt;p&gt;Let's go through this script section by section.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import sys
import boto3
&lt;/pre&gt;
&lt;p&gt;We import the &lt;code&gt;sys&lt;/code&gt; module and
the first-party AWS module &lt;code&gt;boto3&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
client = boto3.client('ec2', region_name='us-west-2')
resource = boto3.resource('ec2', region_name='us-west-2')
&lt;/pre&gt;
&lt;p&gt;It is often confusing what functionality is in &lt;code&gt;client&lt;/code&gt;
and what is in &lt;code&gt;resource&lt;/code&gt;.
The only rule I learned in a year of using the AWS API
is to look in both places, and create both a client and a resource.
In general, &lt;code&gt;client&lt;/code&gt; maps directly to AWS low-level REST API,
while &lt;code&gt;resource&lt;/code&gt; gives higher level abstractions.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
output = client.get_console_output(InstanceId=sys.argv[1])
result = output['Output']
&lt;/pre&gt;
&lt;p&gt;This is the meat of the script --
we use the API to get the console output.
These are the boot up messages from all services.
When the SSH server starts up,
it prints its key.
All that is left now is to find it.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
rsa = [line for line in result.splitlines()
            if line.startswith('ssh-rsa')][0]
&lt;/pre&gt;
&lt;p&gt;This is a little hacky,
but there is no nice way to do it.
There are other possible heuristics.
The nice thing is that if the heuristic fails,
this will result in connection failure --
not an insecure connection!&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
instance = resource.Instance(sys.argv[1])
known_hosts = '{},{} {}\n'.format(instance.public_dns_name,
                                  instance.public_ip_address,
                                  rsa)
&lt;/pre&gt;
&lt;p&gt;We grab the IP and name through the resource,
and format them in the right way for SSH to understand.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
with open(os.path.expanduser('~/.ssh/known_hosts'), 'a') as fp:
    fp.write(known_hosts)
&lt;/pre&gt;
&lt;p&gt;I chose to update &lt;code&gt;known_hosts&lt;/code&gt; like this because originally this script
was in a throw-away Docker image.
In other cases, it might be wise to have a separate known hosts file
for EC2 instances,
or have an atomic update methodology.&lt;/p&gt;
&lt;p&gt;After running this code,
it is possible to SSH without having to verify the host key.
It is best to set the SSH options to fail if the host key is not there,
for extra safety.&lt;/p&gt;
&lt;p&gt;An alternative approach is to use the AWS API to set the SSH secret key.
However, this is, in general, even less trivial to do securely.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Python as a DSL</title><link href="https://orbifold.xyz/python-dsl.html" rel="alternate"></link><published>2017-08-07T21:30:00-07:00</published><updated>2017-08-07T21:30:00-07:00</updated><author><name>Moshe Zadka and Mark Williams</name></author><id>tag:orbifold.xyz,2017-08-07:/python-dsl.html</id><summary type="html">&lt;p&gt;This is a joint post by &lt;a class="reference external" href="https://enotuniq.org/"&gt;Mark Williams&lt;/a&gt; and &lt;a class="reference external" href="https://orbifold.xyz/"&gt;Moshe Zadka&lt;/a&gt;.
You are probably reading it on one of our blogs --
if so,
feel free to look at the other blog.
We decided it would be fun to write a post together
and see how it turns out.
We definitely …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is a joint post by &lt;a class="reference external" href="https://enotuniq.org/"&gt;Mark Williams&lt;/a&gt; and &lt;a class="reference external" href="https://orbifold.xyz/"&gt;Moshe Zadka&lt;/a&gt;.
You are probably reading it on one of our blogs --
if so,
feel free to look at the other blog.
We decided it would be fun to write a post together
and see how it turns out.
We definitely had fun writing it,
and we hope you have fun reading it.&lt;/p&gt;
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;A Domain Specific Language is a natural solution to many problems.
However, creating a new language from whole cloth is
both surprisingly hard and,
more importantly,
surprisingly hard to get right.&lt;/p&gt;
&lt;p&gt;One needs to come up with a syntax that is easy to learn,
easy to get right,
hard to get wrong,
and has the ability to give meaningful errors when incorrect input is given.
One needs to carefully document the language,
supplying at least a comprehensive reference, a tutorial,
and a best practices guide
all with examples.&lt;/p&gt;
&lt;p&gt;On top of this, one needs to write a toolchain for the language
that is as high quality as the one users are used to from
other languages.&lt;/p&gt;
&lt;p&gt;All of this raises a tempting question: can we use an existing language?
In this manner, many languages have been used, or abused,
as domain specific languages --
Lisp variants (such as Scheme) were among the first to be drafted,
but were quickly followed by languages like TCL, Lua, and Ruby.&lt;/p&gt;
&lt;p&gt;Python, being popular in quite a few niches,
has also been used as a choice for things related to those niches --
the configuration format for &lt;a class="reference external" href="http://jupyter-notebook.readthedocs.io/en/latest/config.html"&gt;Jupyter&lt;/a&gt;,
the website structure specification in &lt;a class="reference external" href="https://trypyramid.com/"&gt;Pyramid&lt;/a&gt;
the build directives for &lt;a class="reference external" href="http://scons.org/"&gt;SCons&lt;/a&gt;,
and the target specification for &lt;a class="reference external" href="http://www.pantsbuild.org/build_files.html"&gt;Pants&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In this post,
we will show examples of Python as a Domain Specific Language
(or DSL)
and explain how to do it well --
and how to avoid doing it badly.&lt;/p&gt;
&lt;p&gt;As programmers we use a variety of languages to solve problems.
Usually these are &amp;quot;general purpose&amp;quot; languages, or languages whose
design allows them to solve many kinds of problems equally well.
Python certainly fits this description.  People use it to solve
problems in astronomy and biology, to answer questions about data sets
large and small, and to build games, websites, and DNS servers.&lt;/p&gt;
&lt;p&gt;Python programmers know how much value there is in generality.  But
sometimes that generality makes solving a problem tedious or otherwise
difficult. Sometimes, a problem or class of problems requires so much
set up, or has so many twists and turns, that its obvious solution in
a general purpose language becomes complicated and hard to understand.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Domain specific languages&lt;/em&gt; are languages that are tailored to solve
specific problems.  They contain special constructions, syntax, or
other affordances that organize patterns common to the problems they
solve.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Introduction.html#Introduction"&gt;Lisp&lt;/a&gt;, or Elisp, is a Domain Specific Language focused on text
editing.  Emacs users can teach Emacs to do novel things by extending
the editor with Elisp.&lt;/p&gt;
&lt;p&gt;Here's an example of an Elisp function that swaps &lt;tt class="docutils literal"&gt;'&lt;/tt&gt; with &lt;tt class="docutils literal"&gt;&amp;quot;&lt;/tt&gt; and
vice-versa when the cursor is inside a Python string:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
(defun python-swap-quotes ()
  &amp;quot;Swap single and double quotes.&amp;quot;
  (interactive)
  (save-excursion
    (let ((state (syntax-ppss)))
      (when (eq 'string (syntax-ppss-context state))
        (let* ((left (nth 8 state))
               (right (1- (scan-sexps left 1)))
               (newquote (if (= ?' (char-after left))
                             ?\&amp;quot; ?')))
          (dolist (loc (list left right))
            (goto-char loc)
            (delete-char 1)
            (insert-char newquote 1)))))))
&lt;/pre&gt;
&lt;p&gt;This is clearly Lisp code, and parts of it, such as defining a
function with &lt;code&gt;defun&lt;/code&gt; or variables with &lt;code&gt;let&lt;/code&gt;, is not
specific to text editing or even Emacs.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(interactive)&lt;/code&gt;, however, is a special extension to Elisp that
makes the function that encloses it something a user can assign to a
keyboard short cut or select from a menu inside Emacs.  Similarly,
&lt;code&gt;(save-excursion ...)&lt;/code&gt; ensures that file the user is editing and
the location of the cursor is restored fter the code inside is run.
This allows the function to jump around within a file or even multiple
files without disturbing a user's place.&lt;/p&gt;
&lt;p&gt;Lots of Elisp code makes use of special extensions, but Python
programmers don't complain about their absence, because they're of no
use outside Emacs.  That specialization makes Elisp a DSL.&lt;/p&gt;
&lt;p&gt;The language of &lt;a class="reference external" href="https://docs.docker.com/engine/reference/builder/#understand-how-arg-and-from-interact"&gt;Dockerfiles&lt;/a&gt; is also a domain specific language.
Here's a &lt;a class="reference external" href="https://github.com/docker-library/hello-world/blob/7d0ee592e4ed60e2da9d59331e16ecdcadc1ed87/amd64/hello-world/Dockerfile"&gt;simple hello world Dockerfile&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
FROM scratch
COPY hello /
ENTRYPOINT [&amp;quot;/hello&amp;quot;]
&lt;/pre&gt;
&lt;p&gt;The word that begins each line instructs Docker to perform some action
on the arguments that follow, such as copying the file &lt;cite&gt;hello&lt;/cite&gt; from
the current directory into the image's root directory.  Some of these
commands have meaning specifically to Docker, such as the &lt;code&gt;FROM&lt;/code&gt;
command to underlay the image being built with a base image.&lt;/p&gt;
&lt;p&gt;Note that unlike Elisp, Dockerfiles are not Turing complete, but both
are DSLs.  Domain specificity is distinct from mathematical concepts
like decidability.  It's a term we use to describe how specialized a
language is to its problem domain, not a theoretical Computer Science
term.&lt;/p&gt;
&lt;p&gt;Code written in a domain specific language should be clearer and
easier to understand because the language focuses on the domain, while
the programmer focuses on the specific problem.&lt;/p&gt;
&lt;p&gt;The Elisp code won't win any awards for elegance or robustness, but it
benefits from the brevity of &lt;code&gt;(interactive)&lt;/code&gt; and
&lt;code&gt;(save-excursion ..)&lt;/code&gt;.  Most of the function consists of the
querying and computation necessary to find and rewrite Python string
literals.  Similarly, the Dockerfile doesn't waste the reader's
attention on irrelevant details, like &lt;em&gt;how&lt;/em&gt; a base image is found and
associated with the current image.  These DSLs keep their programs
focused on their problem domains, making them easier to understand and
extend.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="naive-usage-of-python-as-a-dsl"&gt;
&lt;h2&gt;Naive Usage of Python as a DSL&lt;/h2&gt;
&lt;p&gt;Programmers describe things that hide complexity behind a dubiously
simple facade as &lt;em&gt;magic&lt;/em&gt;.  For some reason,
when the idea of using Python as a DSL first comes up,
many projects choose the strategy we will call
&amp;quot;magical execution context&amp;quot;.
It is more common in projects written in C/C++ which embed Python,
but happens quite a bit in pure-Python projects.&lt;/p&gt;
&lt;p&gt;The prototypical code that creates a magical execution context
might look something like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
namespace = dict(DomainFunction1=my_domain_function1,
                 DomainFunction2=my_domain_function2)
with open('Domainspecificfile') as fp:
    source = fp.read()
exec(source, globals=namespace)
do_something_with(namespace['special_name'])
&lt;/pre&gt;
&lt;p&gt;Real-life DSLs usually have more names in their magical execution contexts
(often ranging in the tens or sometimes hundreds),
and DSL runtimes often have more complicated logic around finding
the files they parse.
However, this platonic example is useful to keep in mind when
reading through the concrete examples.&lt;/p&gt;
&lt;p&gt;While various other projects were automatable with Python,
SCons might be the oldest surviving project where
Python is used as a configuration language.
It also happens to be implemented &lt;em&gt;in&lt;/em&gt; Python --
but aside from making the choice of Python as a DSL easier to implement,
it has no bearing on our discussion today.&lt;/p&gt;
&lt;p&gt;An &lt;code&gt;SCons&lt;/code&gt; file might look like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
src_files = Split(&amp;quot;&amp;quot;&amp;quot;main.c
                     file1.c
                     file2.c&amp;quot;&amp;quot;&amp;quot;)
Program('program', src_files)
&lt;/pre&gt;
&lt;p&gt;Code can also be imported from other files:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
SConscript(['drivers/SConscript',
            'parser/SConscript',
            'utilities/SConscript'])
&lt;/pre&gt;
&lt;p&gt;Note that it is not possible,
via this method,
to reuse any logic other than build settings across the files --
a function defined in one of them is not available elsewhere else.&lt;/p&gt;
&lt;p&gt;At 12 years old, Django is another
venerable Python project, and like the similarly venerable &lt;a class="reference external" href="http://weblog.rubyonrails.org/2005/12/13/rails-1-0-party-like-its-one-oh-oh/"&gt;Ruby on
Rails&lt;/a&gt;, it's no stranger to magic.  Once upon a time, Django's
database interaction APIs were magical enough that they constituted a
kind of domain-specific language with a magical execution context.&lt;/p&gt;
&lt;p&gt;Like modern Django, you would define your models by subclassing a
special class, but unlike modern Django, they were more than just
plain old Python classes.&lt;/p&gt;
&lt;p&gt;A Django application in a module named &lt;cite&gt;best_sellers.py&lt;/cite&gt; might have
had a model that looked like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from django.core import meta

class Book(meta.Model):
      name = meta.CharField(maxlength=70)
      author = meta.CharField(maxlength=70)
      sold = meta.IntegerField()
      release_date = meta.DateTimeField(default=meta.LazyDate())

      def get_best_selling_authors(self):
          cursor = db.cursor()
          cursor.execute(&amp;quot;&amp;quot;&amp;quot;
          SELECT author FROM books WHERE release_date &amp;gt; '%s'
          GROUP BY author ORDER BY sold DESC
          &amp;quot;&amp;quot;&amp;quot; % (db.quote(datetime.datetime.now() - datetime.timedelta(weeks=1)),))
          return [row[0] for row in cursor.fetchall()]

      def __repr__(self):
          return self.full_name
&lt;/pre&gt;
&lt;p&gt;A user would then use it by like so:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from django.models.best_sellers import books
print books.get_best_selling_authors()
&lt;/pre&gt;
&lt;p&gt;Django transplated the &lt;code&gt;Book&lt;/code&gt; model into its own magic
&lt;code&gt;models&lt;/code&gt; module and renamed it &lt;code&gt;books&lt;/code&gt;.  Note the subtle
transformation in the midst of more obvious magic: the &lt;code&gt;Book&lt;/code&gt;
model was lowercased and automatically pluralized.&lt;/p&gt;
&lt;p&gt;Two magic globals were injected into the model's instance methods:
&lt;code&gt;db&lt;/code&gt;, the current database connection, and &lt;code&gt;datetime&lt;/code&gt;, the
Python standard library module.  That's why our example module doesn't
have to import them.&lt;/p&gt;
&lt;p&gt;The intent was to reduce boilerplate by exploiting Python's
dynamicism.  The result, however, diverged from Python's expected
behaviors and also invented new, idiosyncratic boilerplate; in
particular, &lt;a class="reference external" href="https://github.com/django/django/blob/674c0b353ceaace921eb3d1b5b0293b35a41ad2e/django/core/meta/__init__.py#L372-L388"&gt;the injection of special globals&lt;/a&gt; prevented methods from
accessing variables defined in their source modules, so &lt;a class="reference external" href="https://github.com/django/django/blob/674c0b353ceaace921eb3d1b5b0293b35a41ad2e/django/models/auth.py#L151-L154"&gt;methods had
to directly import any module they used&lt;/a&gt;, forcing programmers to
repeat themselves.&lt;/p&gt;
&lt;p&gt;Django's developers came to see these features as &lt;a class="reference external" href="https://code.djangoproject.com/wiki/RemovingTheMagic"&gt;&amp;quot;warts&amp;quot;&lt;/a&gt; and
removed them before the 0.95 release.  It's safe to say that the
&amp;quot;magic-removal&amp;quot; process succeeded in improving Django's usability.&lt;/p&gt;
&lt;p&gt;Python has well-documented built-ins.
People who read Python code are, usually, familiar with those.
Any symbol which is not a built-in or a reserved word is imported.&lt;/p&gt;
&lt;p&gt;Any DSL will have its own, extra built-ins.
Ideally, those are well documented --
but even when they are, this is a source of documentation separate from
the host language.
This code can never be used by something outside the DSL.
A good example for such potential usage is for unit testing the code.
Once a DSL catches on,
it often inspires creation of vast amounts of code.
The example of Elisp is particularly telling.&lt;/p&gt;
&lt;p&gt;Another problem with such code is that it's often not obvious
what the code &lt;em&gt;itself&lt;/em&gt; is allowed to import or call.
Is it safe to do long-running operations?
If logging to a file, is logging properly set-up?
Will the code double log messages, or does it cache the first time it is used?
As an example,
there are a number of questions about how to share code between
&lt;code&gt;SCons&lt;/code&gt; on StackOverflow,
with explanations about the trade-offs between using an
&lt;code&gt;SConscript&lt;/code&gt; file or using Python modules and &lt;code&gt;import&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Last, but not least, other Python code often implicitly assumes
that functions and classes are defined by modules.
This means that either it is ill-advised to write such in the DSL --
perhaps defining classes might lead to a memory leak because
the contents are used in &lt;code&gt;exec&lt;/code&gt; multiple times --
or, worse, that random functionality will break.
For example, do tracebacks work correctly?
Does pickle?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="a-new-hope"&gt;
&lt;h2&gt;A New Hope&lt;/h2&gt;
&lt;p&gt;As seen from the examples of SCons and old, magical Django,
naively using Python as a DSL is problematic.
It gives up a lot of the benefits of using a pre-existing language,
and results in something that is in the Python uncanny valley --
just close enough to Python that the distinctions result
in a sense of horror, not cuteness.&lt;/p&gt;
&lt;p&gt;One way to avoid the uncanny valley
is to step further away
and avoid confusion --
implement a little language using PyParsing
that is nothing like Python.
But valleys have two sides.
We can solve the problem by just using pure, unadulterated Python.
It turns out that removing an import statement
at the top of the file does &lt;em&gt;not&lt;/em&gt; reduce
much overhead when specializing to a domain.&lt;/p&gt;
&lt;p&gt;We explore, by example,
good ways to use Python as DSL.
We start by showing how even a well written module,
taking advantage of some of the power of Python,
can create a de-facto DSL.
Taking it to the next level,
frameworks (which call user code)
can also be used to build DSLs in Python.
Most powerfully, especially combined with libraries and frameworks,
Python plugin systems can be used to avoid even the need
for a user-controlled entry point,
allowing DSLs which can be invoked from an arbitrary program.&lt;/p&gt;
&lt;p&gt;Python is a flexible language and
subtle use of its features can result
in a flexible DSL that still looks like Python.&lt;/p&gt;
&lt;p&gt;We explore four examples of such DSLs -- NumPy, Stan, Django ORM, and Pyramid.&lt;/p&gt;
&lt;div class="section" id="numpy"&gt;
&lt;h3&gt;NumPy&lt;/h3&gt;
&lt;p&gt;NumPy has the advantage of having been there since the dawn of Python,
being preceded by the Numeric library, on which it was based.
Using that long lineage, it has managed to exert some influence on adding
some things to Python core's syntax -- the Ellipsis type and the &lt;code&gt;&amp;#64;&lt;/code&gt;
operator.&lt;/p&gt;
&lt;p&gt;Taking advantage of both those,
as well as combinations of things that already exist in Python,
NumPy is basically a DSL for performing multi-dimensional calculations.&lt;/p&gt;
&lt;p&gt;As an example,&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
x[4,...,5,:]
&lt;/pre&gt;
&lt;p&gt;lowers the dimension of x by 2,
killing the first and next-to-last dimension. How does it work?
We can explore what happens using this proof-of-concept:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
class ItemGetterer(object):
    def __getitem__(self, idx):
        return idx

x = ItemGetterer()
print(x[4,...,5,:])
&lt;/pre&gt;
&lt;p&gt;This prints &lt;code&gt;(4, Ellipsis, 5, slice(None, None, None))&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In NumPy, the &lt;code&gt;__getitem__&lt;/code&gt; method expects tuples,
and will parse them for numbers, the &lt;code&gt;Ellipsis&lt;/code&gt; object
and slice objects -- and then apply them to the number.&lt;/p&gt;
&lt;p&gt;In addition, overriding the methods corresponding to the
arithmetic operators, known as &lt;em&gt;operator overloading&lt;/em&gt;,
allows users of NumPy to write code
that looks like the corresponding math expression.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="stan"&gt;
&lt;h3&gt;Stan&lt;/h3&gt;
&lt;p&gt;Stan is a way to produce XML documents
using pure Python syntax.
This is often useful in web frameworks,
which need to produce HTML.&lt;/p&gt;
&lt;p&gt;For illustration, here is an example stan-based program&amp;quot;&amp;quot;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from nevow import flat, tags, stan

video = stan.Tag('video')

aDocument = tags.html[
                tags.head[
                    tags.title[&amp;quot;Title&amp;quot;]
                ],
                tags.body[
                    tags.h1[&amp;quot;Heading&amp;quot; ],
                    tags.p(class_=&amp;quot;life&amp;quot;)[&amp;quot;A paragraph about life.&amp;quot;],
                    video[&amp;quot;Your video here!&amp;quot;],
                ]
            ]
with open('output.html', 'w') as fp:
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;tags&lt;/code&gt; module has a few popular tags.
Those are instances of the &lt;code&gt;stan.Tag&lt;/code&gt; class.
If a new tag is needed, for example the &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; tag above,
one can be added locally.&lt;/p&gt;
&lt;p&gt;This is completely valid Python,
without any magical execution contexts,
in a regular importable module --
which allows easy generation of HTML.&lt;/p&gt;
&lt;p&gt;As an example of the advantages of making this a regular Python
execution context, we can see the benefits of dynamically generating
HTML:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from nevow import flat, tags
bullets = [tags.li[&amp;quot;bullet {}&amp;quot;.format(i)] for i in range(10)]
aDocument = tags.html[
                tags.body[
                    tags.ul[bullets]
                ]
            ]
with open('output.html', 'w') as fp:
    fp.write(flat.flatten(aDocument))
&lt;/pre&gt;
&lt;p&gt;In more realistic scenarios,
this would be based on a database call,
or a call to some microservice.
Because stan is just pure Python code,
it is easy to integrate into whatever framework expects it --
it can be returned from a function,
or set as an object attribute.&lt;/p&gt;
&lt;p&gt;The line between
&amp;quot;taking advantage Python syntax and magic method overriding&amp;quot;
and &amp;quot;abusing Python syntax&amp;quot; is sometimes subtle
and always at least partially subjective.
However, Python does allow surprising flexibility
when it comes using pieces of the syntax for new purposes.&lt;/p&gt;
&lt;p&gt;This gives great powers to mere library authors,
without any need esoterica
such as pushing and pulling variables into dictionaries
before or after execing code.
The &lt;code&gt;with&lt;/code&gt; keyword, which we have not covered here,
also often comes in handy for building DSLs in Python
which do not need magic to work.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="django-orm"&gt;
&lt;h3&gt;Django ORM&lt;/h3&gt;
&lt;p&gt;Operator overloading is one way Python allows programmers to imbue
existing syntax with new, domain-specific semantics.  When those
semantics describe data with a repeated structure, Python's class
system provides a natural model, and &lt;a class="reference external" href="http://eli.thegreenplace.net/2011/08/14/python-metaclasses-by-example"&gt;*metaclasses*&lt;/a&gt; allow you to
extend that model to suite your purpose.  This makes them a power tool
for implementing Python DSLs.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Object-relational mapping&lt;/em&gt; (ORM) libraries often use metaclasses to
ease defining and querying database tables.  Django's &lt;code&gt;Model&lt;/code&gt;
class is the canonical example.  Note that the API we're about to
describe is part of modern, post-magic-removal Django!&lt;/p&gt;
&lt;p&gt;Consider the models defined in &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.11/intro/tutorial02/#creating-models"&gt;Django's tutorial&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from django.db import models


class Question(models.Model):
    question_text = models.CharField(max_length=200)
    pub_date = models.DateTimeField('date published')


class Choice(models.Model):
    question = models.ForeignKey(Question, on_delete=models.CASCADE)
    choice_text = models.CharField(max_length=200)
    votes = models.IntegerField(default=0)
&lt;/pre&gt;
&lt;p&gt;Each class encapsulates knowledge about and actions on a database
table.  The class attributes map to columns and inter-table
relationships which power &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.11/topics/db/queries/"&gt;data manipulation&lt;/a&gt; and from which Django
derives &lt;a class="reference external" href="https://docs.djangoproject.com/en/1.11/intro/tutorial02/#activating-models"&gt;migrations&lt;/a&gt;.  Django's models turn classes in a
domain-specific language for database definitions and logic.&lt;/p&gt;
&lt;p&gt;Here's what the generated DML might look like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
--
-- Create model Choice
--
CREATE TABLE &amp;quot;polls_choice&amp;quot; (
    &amp;quot;id&amp;quot; serial NOT NULL PRIMARY KEY,
    &amp;quot;choice_text&amp;quot; varchar(200) NOT NULL,
    &amp;quot;votes&amp;quot; integer NOT NULL
);
--
-- Create model Question
--
CREATE TABLE &amp;quot;polls_question&amp;quot; (
    &amp;quot;id&amp;quot; serial NOT NULL PRIMARY KEY,
    &amp;quot;question_text&amp;quot; varchar(200) NOT NULL,
    &amp;quot;pub_date&amp;quot; timestamp with time zone NOT NULL
);
&lt;/pre&gt;
&lt;p&gt;&lt;a class="reference external" href="https://github.com/django/django/blob/a51c4de1945be2225f20fad794cfb52d8f1f9236/django/db/models/base.py#L71"&gt;A metaclass&lt;/a&gt; plays a critical role in this DSL by instrumenting
&lt;code&gt;Model&lt;/code&gt; subclasses.  It's this metaclass that &lt;a class="reference external" href="https://github.com/django/django/blob/a51c4de1945be2225f20fad794cfb52d8f1f9236/django/db/models/base.py#L352-L360"&gt;adds the objects
class attribute&lt;/a&gt;, a &lt;code&gt;Manager&lt;/code&gt; instance that mediates ORM
queries, and the class-specific &lt;cite&gt;DoesNotExist&lt;/cite&gt; and
&lt;cite&gt;MultipleObjectsReturned&lt;/cite&gt; &lt;a class="reference external" href="https://github.com/django/django/blob/a51c4de1945be2225f20fad794cfb52d8f1f9236/django/db/models/base.py#L116-L133"&gt;exceptions&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Because metaclasses control class creation, they're an obvious way to
inject these kinds of class-level attributes.  For the same reason,
but less obviouly, they also provide a place to run initialization
hooks that should run only once in a program's lifetime.  Classes are
generally defined at module level.  Thus, classes are created when
modules are created.  Because of Python's module caching, this means
that metaclasses are usually run early and rarely.  Django's DSL makes
use of this assumption to &lt;a class="reference external" href="https://github.com/django/django/blob/a51c4de1945be2225f20fad794cfb52d8f1f9236/django/db/models/base.py#L315"&gt;register models with their applications&lt;/a&gt;
upon creation.&lt;/p&gt;
&lt;p&gt;Running code this soon can lead to strange issues, which make it
tricky to use metaclasses correctly.  They also rely on subclassing,
which is &lt;a class="reference external" href="http://pyvideo.org/pycon-us-2013/the-end-of-object-inheritance-the-beginning-of.html"&gt;considered harmful&lt;/a&gt;.  These things and their use in ORMs,
which are &lt;a class="reference external" href="http://seldo.com/weblog/2011/06/15/orm_is_an_antipattern"&gt;also considered harmful&lt;/a&gt;, might seem to limit their
usefulness.  However, a base class whose purpose is to inject a
metaclass avoids many of the problems associated with subclassing, as
little to no functionality will be inherited.  Django weighs the
benefits of familiar syntax over the costs of subclassing, resulting
in a data definition DSL that's ergonomic for Python programmers.&lt;/p&gt;
&lt;p&gt;Despite their complexity and shortcomings, metaclasses provide a
succinct way to describe and manipulate all kinds of data, from &lt;a class="reference external" href="http://scapy.readthedocs.io/en/stable/advanced_usage.html?highlight=metaclasses"&gt;wire
protocols&lt;/a&gt; to &lt;a class="reference external" href="http://pythonhosted.org/dexml/"&gt;XML documents&lt;/a&gt;.  They can be just the trick for
data-focused DSLs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pyramid-1"&gt;
&lt;h3&gt;Pyramid&lt;/h3&gt;
&lt;p&gt;Pyramid allows defining web application logic,
as opposed to the routing details,
anywhere.
It will match up the function to the route based on the
route name,
as defined in the configuration router.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# Removed imports

## The function definition can go anywhere
&amp;#64;view_config(route_name='home')
def my_home(context, request):
    return 'OK'

## This goes in whatever file we pass to our WSGI host
config = Configurator()
config.add_route('home', '/')
config.scan('.')
app = config.make_wsgi_app()
&lt;/pre&gt;
&lt;p&gt;The builder pattern, as seen here, allows gradually creating an application.
The methods on &lt;code&gt;Configurator&lt;/code&gt;,
as well as the decorators such as &lt;code&gt;view_config&lt;/code&gt;,
are effectively a DSL that helps build web applications.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="plugins"&gt;
&lt;h2&gt;Plugins&lt;/h2&gt;
&lt;p&gt;When code lives in real Python modules,
and uses real Python APIs,
it is sometimes useful for it to be executed automatically
based on context.
After all, one thing that DSL systems like SCons
give us is automatically executing the &lt;code&gt;SConscript&lt;/code&gt;
when we run &lt;code&gt;scons&lt;/code&gt; at the command line.&lt;/p&gt;
&lt;p&gt;One tool that can be used for this is a plugin system.
While a comprehensive review of &lt;a class="reference external" href="http://sedimental.org/plugin_systems.html"&gt;plugin systems&lt;/a&gt;
is beyond our scope here,
we will give a few examples of using such systems
for specific domains.&lt;/p&gt;
&lt;p&gt;One of the oldest plugin systems is &lt;a class="reference external" href="https://twistedmatrix.com/documents/current/core/howto/plugin.html"&gt;twisted.plugin&lt;/a&gt;.
While it can be used as a generic plugin system,
the main usage of it --
and a good case study of using it as a plugin system for DSLs --
is to extend the &lt;code&gt;twist&lt;/code&gt; command line.
These are also known as &lt;code&gt;tap&lt;/code&gt; plugins,
for historical reasons.&lt;/p&gt;
&lt;p&gt;Here is a minimal example of a Twisted tap plugin:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# Removed imports
&amp;#64;implementer(IServiceMaker, IPlugin)
class SimpleServiceMaker(object):
    tapname = &amp;quot;simple-dsl&amp;quot;
    description = &amp;quot;The Simplest DSLest Plugin&amp;quot;

    class options(usage.Options):
        optParameters = [[&amp;quot;port&amp;quot;, &amp;quot;p&amp;quot;, 1235, &amp;quot;Port number.&amp;quot;]]

    def makeService(self, options):
        return internet.TCPServer(int(options[&amp;quot;port&amp;quot;]),
                                  Factory.forProtocol(Echo))

serviceMaker = SimpleServiceMaker()
&lt;/pre&gt;
&lt;p&gt;In order to be a &lt;a class="reference external" href="https://twistedmatrix.com/documents/current/core/howto/tap.html"&gt;valid plugin&lt;/a&gt;,
this file must be placed under &lt;code&gt;twisted.plugins&lt;/code&gt;.
The &lt;code&gt;usage.Options&lt;/code&gt; class defines a DSL,
of sorts,
for describing command-line options.
We used only a small part of it here,
but it is both powerful and flexible.&lt;/p&gt;
&lt;p&gt;Note that this is completely valid Python code --
in fact, it will be imported as a module.
This allows us to import it as well,
and to test it using unit tests.&lt;/p&gt;
&lt;p&gt;In fact, because this is regular Python code,
usually &lt;code&gt;serviceMakers&lt;/code&gt; are created using a helper class --
&lt;code&gt;twisted.application.service.ServiceMaker&lt;/code&gt;.
The definition above, while correct,
is not idiomatic.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;gather&lt;/code&gt; library does not have a DSL.
It does, however,
function well as an agnostic plugin discovery mechanism.
Because of that,
it can be built into other systems --
that do provide a Pythonic DSL --
to serve as the autodiscovery mechanism.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# In  a central module:
ITS_A_DSLISH_FUNCTION = gather.Collector()

## Define the DSL as
## -- functions that get two parameters
##    -- conf holds some general configuration
##    -- send_result is used to register the result
def run_the_function_named(name, conf, send_result):
    res = ITS_A_DSLISH_FUNCTION.collect()
    return res[name](conf, result)

# In a module registering a DSL function
&amp;#64;ITS_A_DSLISH_FUNCTION.register(name='my_dslish_name')
def some_func(conf, send_result):
    with conf.temp_stuff() as some_thing:
         send_result(some_thing.get_value())
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Python is a good language to use for DSLs.
So good, in fact,
that &lt;a class="reference external" href="http://www.attrs.org/en/stable/"&gt;attrs&lt;/a&gt;, a DSL for defining classes,
has achieved enormous popularity.
Operator overloading, decorators,
the &lt;code&gt;with&lt;/code&gt; operator and generators, among other things,
combine to allow novel usage of the syntax in specific problem domains.
The existence of a big body of documentation
of the language and its best practices,
along with a thriving community of practicioners,
is also an asset.&lt;/p&gt;
&lt;p&gt;In order to take advantage of all of those,
it is important to use Python as Python --
avoid magical execution contexts
and novel input search algorithms in favor
of the powerful code organization model Python already has --
modules.&lt;/p&gt;
&lt;p&gt;Most people who want to use Python as a DSL
are also Python programmers.
Consider allowing your program's users
to use the same tools that have made you successful.&lt;/p&gt;
&lt;p&gt;As &lt;a class="reference external" href="https://twistedmatrix.com/users/glyph/rant/extendit.html"&gt;Glyph&lt;/a&gt; said in a related discussion,
&amp;quot;do you want to confuse, surprise,
and annoy people who may be familiar with Python from elsewhere?&amp;quot;
Assuming the answer is &amp;quot;no&amp;quot;,
consider using real modules as your DSL mechanism.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Image Editing with Jupyter</title><link href="https://orbifold.xyz/image-editing-jupyter.html" rel="alternate"></link><published>2017-07-25T22:20:00-07:00</published><updated>2017-07-25T22:20:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2017-07-25:/image-editing-jupyter.html</id><summary type="html">&lt;p&gt;With the news about MS Paint going away from the default MS install,
it might be timely to look at other ways to edit images.
The most common edit I need to do is to crop images --
and this is what we will use as an example.&lt;/p&gt;
&lt;p&gt;My favorite image …&lt;/p&gt;</summary><content type="html">&lt;p&gt;With the news about MS Paint going away from the default MS install,
it might be timely to look at other ways to edit images.
The most common edit I need to do is to crop images --
and this is what we will use as an example.&lt;/p&gt;
&lt;p&gt;My favorite image editing tool is Jupyter.
Jupyter needs some encouragement to be an image editor --
and to easily open images.
As is often the case, I have a non-pedagogical,
but useful, preamble.
The preamble turns Jupyter into an image editor.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from matplotlib.pyplot import imshow
import numpy
import PIL
import os

%matplotlib inline

def inline(some_image):
    imshow(numpy.asarray(some_image))

def open(file_name):
    return PIL.Image.open(os.path.expanduser(file_name))
&lt;/pre&gt;
&lt;p&gt;With the boring part done, it is time to edit some images!
In the Shopkick birthday party, I had my caricature drawn.
I love it -- but it has a whole baggage talking about the birthday
party which is irrelevant for uploading to Facebook.&lt;/p&gt;
&lt;p&gt;I have downloaded the image from the blog.
I use &lt;code&gt;Pillow&lt;/code&gt; (the &lt;a class="reference external" href="https://python-pillow.org/"&gt;packaging fork&lt;/a&gt; of PIL)
to open the image.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
a=open(&amp;quot;~/Downloads/weeeee.jpg&amp;quot;)
&lt;/pre&gt;
&lt;p&gt;Then I want to visually inspect the image inline:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
inline(a)
&lt;/pre&gt;
&lt;img alt="" src="output_2_0.png" /&gt;
&lt;p&gt;I use the crop method, and directly inline it:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
inline(a.crop((0,0,1500,1600)))
&lt;/pre&gt;
&lt;img alt="" src="output_3_0.png" /&gt;
&lt;p&gt;If this was longer, and more realistic,
this would be playing with the numbers back and forth --
and maybe resize, or combine it with other images.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;Pillow&lt;/code&gt; library is great,
and this way we can inspect the results as we are modifying the image,
allowing iterative image editing.
For people like me, without a strong steady artist's hand
to perfectly select the right circle, this solution works just great!&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Anatomy of a Multi-Stage Docker Build</title><link href="https://orbifold.xyz/multistage-docker.html" rel="alternate"></link><published>2017-07-19T21:30:00-07:00</published><updated>2017-07-19T21:30:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2017-07-19:/multistage-docker.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.docker.com/"&gt;Docker&lt;/a&gt;, in recent versions,
has introduced &lt;cite&gt;multi-stage build&lt;/cite&gt;.
This allows separating the build environment from the runtime envrionment
much more easily than &lt;a class="reference external" href="https://orbifold.xyz/python-docker.html"&gt;before&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to demonstrate this,
we will write a minimal &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; app and run it with &lt;a class="reference external" href="https://twistedmatrix.com/trac/"&gt;Twisted&lt;/a&gt;
using its &lt;a class="reference external" href="http://twistedmatrix.com/documents/current/web/howto/web-in-60/wsgi.html"&gt;WSGI&lt;/a&gt; support.&lt;/p&gt;
&lt;p&gt;The Flask application itself is the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.docker.com/"&gt;Docker&lt;/a&gt;, in recent versions,
has introduced &lt;cite&gt;multi-stage build&lt;/cite&gt;.
This allows separating the build environment from the runtime envrionment
much more easily than &lt;a class="reference external" href="https://orbifold.xyz/python-docker.html"&gt;before&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In order to demonstrate this,
we will write a minimal &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; app and run it with &lt;a class="reference external" href="https://twistedmatrix.com/trac/"&gt;Twisted&lt;/a&gt;
using its &lt;a class="reference external" href="http://twistedmatrix.com/documents/current/web/howto/web-in-60/wsgi.html"&gt;WSGI&lt;/a&gt; support.&lt;/p&gt;
&lt;p&gt;The Flask application itself is the smallest demo app,
straight from any number of Flask tutorials:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# src/msbdemo/wsgi.py
from flask import Flask
app = Flask(&amp;quot;msbdemo&amp;quot;)
&amp;#64;app.route(&amp;quot;/&amp;quot;)
def hello():
    return &amp;quot;If you are seeing this, the multi-stage build succeeded&amp;quot;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;setup.py&lt;/code&gt; file,
similarly,
is the minimal one from any number of &lt;a class="reference external" href="https://packaging.python.org/tutorials/distributing-packages/#setup-py"&gt;Python packaging&lt;/a&gt; tutorials:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import setuptools
setuptools.setup(
    name='msbdemo',
    version='0.0.1',
    url='https://github.com/moshez/msbdemo',
    author='Moshe Zadka',
    author_email='zadka.moshe&amp;#64;gmail.com',
    packages=setuptools.find_packages(),
    install_requires=['flask'],
)
&lt;/pre&gt;
&lt;p&gt;The interesting stuff is in the &lt;code&gt;Dockefile&lt;/code&gt;.
It is interesting enough that we will go through it line by line:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
FROM python:2.7.13
&lt;/pre&gt;
&lt;p&gt;We start from a &amp;quot;fat&amp;quot; Python docker image --
one with the Python headers installed,
and the ability to compile extensions.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
RUN virtualenv /buildenv
&lt;/pre&gt;
&lt;p&gt;We create a custom virtual environment for the build process.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
RUN /buildenv/bin/pip install pex wheel
&lt;/pre&gt;
&lt;p&gt;We install the build tools --
in this case, &lt;code&gt;wheel&lt;/code&gt;, which will let us build &lt;a class="reference external" href="https://wheel.readthedocs.io/en/latest/"&gt;wheels&lt;/a&gt;,
and &lt;code&gt;pex&lt;/code&gt;, which will let us build single file executables.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
RUN mkdir /wheels
&lt;/pre&gt;
&lt;p&gt;We create a custom directory to put all of our wheels.
Note that we will &lt;em&gt;not&lt;/em&gt; install those wheels in this docker image.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
COPY src /src
&lt;/pre&gt;
&lt;p&gt;We copy our minimal Flask-based application's source code
into the docker image.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
RUN /buildenv/bin/pip wheel --no-binary :all: \
                            twisted /src \
                            --wheel-dir /wheels
&lt;/pre&gt;
&lt;p&gt;We build the wheels.
We take care to manually build wheels ourselves,
since &lt;code&gt;pex&lt;/code&gt;, right now, &lt;a class="reference external" href="https://github.com/pantsbuild/pex/issues/281"&gt;cannot handle&lt;/a&gt; &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0513/"&gt;manylinux&lt;/a&gt; binary wheels.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
RUN /buildenv/bin/pex --find-links /wheels --no-index \
                      twisted msbdemo -o /mnt/src/twist.pex -m twisted
&lt;/pre&gt;
&lt;p&gt;We build the &lt;code&gt;twisted&lt;/code&gt; and &lt;code&gt;msbdemo&lt;/code&gt; wheels,
togther with any recursive dependencies,
into a &lt;a class="reference external" href="https://pex.readthedocs.io/en/stable/"&gt;Pex&lt;/a&gt; file -- a single file executable.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
FROM python:2.7.13-slim
&lt;/pre&gt;
&lt;p&gt;This is where the magic happens.
A second &lt;code&gt;FROM&lt;/code&gt; line starts a new docker image build.
The previous images are available --
but only inside this &lt;code&gt;Dockerfile&lt;/code&gt; --
for copying files from.
Luckily, we have a file ready to copy:
the output of the Pex build process.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
COPY --from=0 /mnt/src/twist.pex /root
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;--from=0&lt;/code&gt; indicates copying from a previously built image,
rather than the so-called &amp;quot;build context&amp;quot;.
In theory, any number of builds can take place in one &lt;code&gt;Dockefile&lt;/code&gt;.
While only the last one will actually result in a permanent image,
the others are all available as targets for &lt;code&gt;--from&lt;/code&gt; copying.
In practice, two stages are usually enough.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
ENTRYPOINT [&amp;quot;/root/twist.pex&amp;quot;, &amp;quot;web&amp;quot;, &amp;quot;--wsgi&amp;quot;, &amp;quot;msbdemo.wsgi.app&amp;quot;, \
            &amp;quot;--port&amp;quot;, &amp;quot;tcp:80&amp;quot;]
&lt;/pre&gt;
&lt;p&gt;Finally, we use Twisted as our WSGI container.
Since we bound the Pex file to the &lt;code&gt;-m twisted&lt;/code&gt; package execution,
all we need to is run the &lt;code&gt;web&lt;/code&gt; plugin,
ask it to run a &lt;code&gt;wsgi&lt;/code&gt; container,
and give it the logical (module) path to our WSGI app.&lt;/p&gt;
&lt;p&gt;Using Docker multi-stage builds has allowed us to create a Docker container
for production with:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;A smaller footprint (using the &amp;quot;slim&amp;quot; image as base)&lt;/li&gt;
&lt;li&gt;Few layers (only adding two layers to the base slim image)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The biggest benefit is that it let us do so with one Dockerfile,
with no extra machinery.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Bash is Unmaintainable Python</title><link href="https://orbifold.xyz/bash-unmaintainable-python.html" rel="alternate"></link><published>2017-07-17T22:20:00-07:00</published><updated>2017-07-17T22:20:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2017-07-17:/bash-unmaintainable-python.html</id><summary type="html">&lt;p&gt;(Thanks to Aahz, Roy Williams, Yarko Tymciurak,
and Naomi Ceder for feedback.
Any mistakes that remain are mine alone.)&lt;/p&gt;
&lt;p&gt;In the post about building Docker applications,
I had the following Python script:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import datetime, subprocess
tag = datetime.datetime.utcnow().isoformat()
tag = tag.replace(':', '-').replace('.', '-')
for ext in ['', '-slim']:
    image = &amp;quot;moshez …&lt;/pre&gt;</summary><content type="html">&lt;p&gt;(Thanks to Aahz, Roy Williams, Yarko Tymciurak,
and Naomi Ceder for feedback.
Any mistakes that remain are mine alone.)&lt;/p&gt;
&lt;p&gt;In the post about building Docker applications,
I had the following Python script:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import datetime, subprocess
tag = datetime.datetime.utcnow().isoformat()
tag = tag.replace(':', '-').replace('.', '-')
for ext in ['', '-slim']:
    image = &amp;quot;moshez/python36{}:{}&amp;quot;.format(ext, tag)
    orig = &amp;quot;python:3.6{}&amp;quot;.format(ext)
    subprocess.check_call([&amp;quot;docker&amp;quot;, &amp;quot;pull&amp;quot;, orig])
    subprocess.check_call([&amp;quot;docker&amp;quot;, &amp;quot;tag&amp;quot;, orig, image])
    subprocess.check_call([&amp;quot;docker&amp;quot;, &amp;quot;push&amp;quot;, image])
&lt;/pre&gt;
&lt;p&gt;I showed this script to two audiences,
in two versions of the talk.
One, a Python beginner audience, mostly new to Docker.
Another, a Docker-centric audience,
with varying levels of familiarity with Python.
I gave excuses for why this script is in Python,
rather than the obvious choice of shell scripting for automating
command-line utilities.&lt;/p&gt;
&lt;p&gt;None of the excuses were the true reason.&lt;/p&gt;
&lt;p&gt;Note that in a talk, things are simplified.
Typical scripts in the real world would not be 10 lines or so.
They start out 10 lines, of course,
but then have to account for edge cases,
extra use cases,
random bugs in the services that need to be worked around,
and so on.
I am more used to writing scripts for production
than writing scripts for talks.&lt;/p&gt;
&lt;p&gt;The true reason the script is in Python
is that I have started doing all my &amp;quot;shell&amp;quot; scripting
in Python recently,
and I am never going back.
Unix shell scripting is pretty much writing in unmaintainable Python.
Before making the case for that,
I am going to take a step in the other direction.
The script above took care to only use the standard library.
If it could take advantage of third party libraries,
I would have written it this way:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import datetime, subprocess
import seashore
xctr = seashore.Executor(seashore.Shell())
tag = datetime.datetime.utcnow().isoformat()
tag = tag.replace(':', '-').replace('.', '-')
for ext in ['', '-slim']:
    image = &amp;quot;moshez/python36{}:{}&amp;quot;.format(ext, tag)
    orig = &amp;quot;python:3.6{}&amp;quot;.format(ext)
    xctr.docker.pull(orig)
    xctr.docker.tag(orig, image)
    xctr.docker.push(image)
&lt;/pre&gt;
&lt;p&gt;But what if I went the other way?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import datetime, subprocess
tag = datetime.datetime.utcnow().isoformat()
tag = tag.replace(':', '-').replace('.', '-')
for ext in ['', '-slim']:
    image = &amp;quot;moshez/python36{}:{}&amp;quot;.format(ext, tag)
    orig = &amp;quot;python:3.6{}&amp;quot;.format(ext)
    subprocess.check_call(&amp;quot;docker pull &amp;quot; + orig, shell=True)
    subprocess.check_call(&amp;quot;docker tag &amp;quot; + orig + &amp;quot; &amp;quot; + image, shell=True)
    subprocess.check_call(&amp;quot;docker push &amp;quot; + image, shell=True)
&lt;/pre&gt;
&lt;p&gt;Note that using &lt;code&gt;shell=True&lt;/code&gt; is discouraged,
and is generally a bad idea.
We will revisit why later.
If I were using Python 3.6, I could even have the last three lines be:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
subprocess.check_call(f&amp;quot;docker pull {orig}&amp;quot;, shell=True)
subprocess.check_call(f&amp;quot;docker tag {orig} {image}&amp;quot;, shell=True)
subprocess.check_call(f&amp;quot;docker push {image}&amp;quot;, shell=True)
&lt;/pre&gt;
&lt;p&gt;or I could even combine them:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
subprocess.check_call(f&amp;quot;docker pull {orig} &amp;amp;&amp;amp; &amp;quot;
                      f&amp;quot;docker tag {orig} {image} &amp;amp;&amp;amp; &amp;quot;
                      f&amp;quot;docker push {image}&amp;quot;, shell=True)
&lt;/pre&gt;
&lt;p&gt;What about calculating the tag?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
tag = subprocess.check_output(&amp;quot;date --utc --rfc-3339=ns | &amp;quot;
                              &amp;quot;sed -e 's/ /T/' -e 's/:/-/g' &amp;quot;
                                  &amp;quot;-e 's/\./-/g' -e 's/\+.*//'&amp;quot;,
                              shell=True)
&lt;/pre&gt;
&lt;p&gt;Putting it all together, we would have&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import subprocess
tag = subprocess.check_output(&amp;quot;date --utc --rfc-3339=ns | &amp;quot;
                              &amp;quot;sed -e 's/ /T/' -e 's/:/-/g' &amp;quot;
                                  &amp;quot;-e 's/\./-/g' -e 's/\+.*//'&amp;quot;,
                              shell=True)
for ext in ['', '-slim']:
    image = f&amp;quot;moshez/python36{ext}:{tag}&amp;quot;
    orig = f&amp;quot;python:3.6{ext}&amp;quot;
    subprocess.check_call(f&amp;quot;docker pull {orig} &amp;amp;&amp;amp; &amp;quot;
                          f&amp;quot;docker tag {orig} {image} &amp;amp;&amp;amp; &amp;quot;
                          f&amp;quot;docker push {image}&amp;quot;, shell=True)
&lt;/pre&gt;
&lt;p&gt;None of the changes we made were strictly &lt;em&gt;improvements&lt;/em&gt;.
They mostly made the code harder to read and more fragile.
But now that we have done them, it is straightforward to convert it
to a shell script:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
#!/bin/sh
set -e
tag = $(date --utc --rfc-3339=ns |
        sed -e 's/ /T/' -e 's/:/-/g' \
        -e 's/\./-/g' -e 's/\+.*//')
for ext in '' '-slim'
do
    image = &amp;quot;moshez/python36$ext:$tag&amp;quot;
    orig = &amp;quot;python:3.6$ext
    docker pull $orig
    docker tag $orig $image
    docker push $image
done
&lt;/pre&gt;
&lt;p&gt;Making our script worse and worse makes a Python script
into a shell script.
Not just a shell script --
this is arguably idiomatic shell.
It uses &lt;code&gt;-e&lt;/code&gt;, long options for legibility,
and so on.
Note that the shell does not even have a way to express
a notion like &lt;code&gt;shell=False&lt;/code&gt;.
In a script without arguments, like this one,
this merely means changes are dangerous.
In a script with arguments,
it means that input handling safely is difficult
(and unlikely to happen).
Indeed, this is why &lt;code&gt;shell=False&lt;/code&gt; is the default,
and recommended,
approach in Python.&lt;/p&gt;
&lt;p&gt;In this case, one that does little but automate
unix commands, the primary use-case of shell scripts.
It stands to reason that the reverse process --
making a shell script into Python,
would have the reverse effect:
making for more maintainable,
less fragile code.&lt;/p&gt;
&lt;p&gt;As an exercise of &amp;quot;going the other way&amp;quot;,
we will start with a simplified version of &lt;a class="reference external" href="https://github.com/twisted/twisted/blob/30453ea185e0191d9498ce3e4442c2e0b2f075aa/admin/pr_as_branch"&gt;shell script&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
set -e

if [ $# != 3 ]; then
    echo &amp;quot;Invalid arguments: $*&amp;quot;;
    exit 1;
fi;

PR_NUMBER=&amp;quot;$1&amp;quot;; shift;
TICKET_NUMBER=&amp;quot;$1&amp;quot;; shift;
BRANCH_NAME=&amp;quot;$1&amp;quot;; shift;


repo=&amp;quot;git&amp;#64;github.com:twisted/twisted.git&amp;quot;;
wc=&amp;quot;$(dirname &amp;quot;$(dirname &amp;quot;$0&amp;quot;)&amp;quot;)/.git&amp;quot;;

if [ ! -d &amp;quot;${wc}&amp;quot; ]; then
  wc=&amp;quot;$(mktemp -d -t twisted.XXXX)&amp;quot;;

  git clone --depth 1 --progress &amp;quot;${repo}&amp;quot; &amp;quot;${wc}&amp;quot;;

  cloned=true;
else
  cloned=false;
fi;

cd &amp;quot;${wc}&amp;quot;;

git fetch origin &amp;quot;refs/pull/${PR_NUMBER}/head&amp;quot;;
git push origin &amp;quot;FETCH_HEAD:refs/heads/${TICKET_NUMBER}-${BRANCH_NAME}&amp;quot;;

if ${cloned}; then
  rm -fr &amp;quot;${wc}&amp;quot;;
fi;
&lt;/pre&gt;
&lt;p&gt;How would it look like, with Python and &lt;code&gt;seashore&lt;/code&gt;?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import os
import shutil
import sys

import seashore

if len(sys.argv) != 4:
    sys.exit(&amp;quot;Invalid arguments: &amp;quot; + ' '.join(sys.argv))

PR_NUMBER, TICKET_NUMBER, BRANCH_NAME = sys.argv[1:]

xctr = seashore.Executor(seashore.Shell())
repo=&amp;quot;git&amp;#64;github.com:twisted/twisted.git&amp;quot;;
wc=os.path.dirname(os.path.dirname(sys.argv[0])) + '/.git'
if not os.path.isdir(wc):
    wc = tempfile.mkdtemp(prefix='twisted')
    xctr.git.clone(repo, wc, depth=1, progress=None)
    cloned = True
else:
    cloned = False

xctr = xctr.chdir(wc)
xctr.git.fetch(origin, f&amp;quot;refs/pull/{PR_NUMBER}/head&amp;quot;)
xctr.git.push(origin,
              f&amp;quot;FETCH_HEAD:refs/heads/{TICKET_NUMBER}-{BRANCH_NAME}&amp;quot;)
if cloned:
    shutil.rmtree(wc)
&lt;/pre&gt;
&lt;p&gt;The code is no longer,
more explicit,
and -- had we wanted to --
easier to now refactor into unit-testable functions.&lt;/p&gt;
&lt;p&gt;If this is, indeed, the general case,
we can skip that stage entirely:
write the script in Python to begin with.
When it inevitably increases in scope,
it will already be in a language that supports
modules and unit tests.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Imports at a Distance</title><link href="https://orbifold.xyz/imports-distance.html" rel="alternate"></link><published>2017-06-25T22:20:00-07:00</published><updated>2017-06-25T22:20:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2017-06-25:/imports-distance.html</id><summary type="html">&lt;p&gt;(Thanks to Mark Williams for feedback and research)&lt;/p&gt;
&lt;p&gt;Imagine the following code:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
## mymodule.py
import toplevel.nextlevel.lowmodule

def _func():
    toplevel.nextlevel.lowmodule.dosomething(1)

def main():
    _func()
&lt;/pre&gt;
&lt;p&gt;Assuming the &lt;code&gt;toplevel.nextlevel.module&lt;/code&gt;
does define a function &lt;code&gt;dosomething&lt;/code&gt;,
this code seems to work just fine.&lt;/p&gt;
&lt;p&gt;However, imagine that later we …&lt;/p&gt;</summary><content type="html">&lt;p&gt;(Thanks to Mark Williams for feedback and research)&lt;/p&gt;
&lt;p&gt;Imagine the following code:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
## mymodule.py
import toplevel.nextlevel.lowmodule

def _func():
    toplevel.nextlevel.lowmodule.dosomething(1)

def main():
    _func()
&lt;/pre&gt;
&lt;p&gt;Assuming the &lt;code&gt;toplevel.nextlevel.module&lt;/code&gt;
does define a function &lt;code&gt;dosomething&lt;/code&gt;,
this code seems to work just fine.&lt;/p&gt;
&lt;p&gt;However, imagine that later we decide to move &lt;code&gt;_func&lt;/code&gt;
to a different module:
:
.. code:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
# utilmodule.py
import toplevel

def _func():
    toplevel.nextlevel.lowmodule.dosomething(1)
&lt;/pre&gt;
&lt;p&gt;This code will probably &lt;em&gt;still work&lt;/em&gt;,
as long as at some point, before calling &lt;code&gt;_func&lt;/code&gt;,
we import &lt;code&gt;mymodule&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This introduces a subtle action-at-a-distance:
the code will only stop working when we remove the import
from &lt;code&gt;mymodule&lt;/code&gt; -- or any other modules
which import &lt;code&gt;lowmodule&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Even unit tests will not necessarily catch the problem,
depending on the order of imports of the unit tests.
Static analyzers, like &lt;code&gt;pylint&lt;/code&gt; and &lt;code&gt;pyflakes&lt;/code&gt;,
also cannot catch it.&lt;/p&gt;
&lt;p&gt;The only safe thing to do is to eschew this import style completely,
and always do &lt;code&gt;from toplevel.nextlevel import lowmodule&lt;/code&gt;.&lt;/p&gt;
&lt;div class="section" id="addendum"&gt;
&lt;h2&gt;Addendum&lt;/h2&gt;
&lt;p&gt;Why is this happening?&lt;/p&gt;
&lt;p&gt;Python package imports are a little subtle.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import toplevel
&lt;/pre&gt;
&lt;p&gt;Does three things:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;(Once only) Creates a &lt;code&gt;toplevel&lt;/code&gt; entry in &lt;code&gt;sys.modules&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(Once only) Executes &lt;code&gt;toplevel/__init__.py&lt;/code&gt; inside the namespace of &lt;code&gt;toplevel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Creates a variable called &lt;code&gt;toplevel&lt;/code&gt; and assigns it the module.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The things marked &amp;quot;once only&amp;quot; will only happen the first time
&lt;code&gt;toplevel&lt;/code&gt; is imported.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import toplevel.nextlevel
&lt;/pre&gt;
&lt;p&gt;Does the same three things (&lt;em&gt;with :code:`toplevel`&lt;/em&gt;) as well as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;(Once only) Creates a &lt;code&gt;toplevel.nextlevel&lt;/code&gt; entry in &lt;code&gt;sys.modules&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(Once only) Executes:code:&lt;cite&gt;toplevel/nextlevel/__init__.py&lt;/cite&gt; inside the namespace of &lt;code&gt;toplevel.nextlevel&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;(Once only) Creates a variable &lt;code&gt;nextlevel&lt;/code&gt; in the namespace
of &lt;code&gt;toplevel&lt;/code&gt;, and binds the &lt;code&gt;toplevel.nextlevel&lt;/code&gt; module
to it.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The third one is the most interesting one --
note that the first time &lt;code&gt;toplevel.nextlevel&lt;/code&gt; is imported,
a &lt;code&gt;nextlevel&lt;/code&gt; variable is created in the namespace of &lt;code&gt;toplevel&lt;/code&gt;,
so that every subsequent place that imports &lt;code&gt;toplevel&lt;/code&gt; can
access &lt;code&gt;nextlevel&lt;/code&gt; for &amp;quot;free&amp;quot;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>X Why Zip</title><link href="https://orbifold.xyz/x-why-zip.html" rel="alternate"></link><published>2017-06-24T22:20:00-07:00</published><updated>2017-06-24T22:20:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2017-06-24:/x-why-zip.html</id><summary type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0441/"&gt;PEP 441&lt;/a&gt; resulted in the creation of the &lt;a class="reference external" href="https://docs.python.org/3/library/zipapp.html"&gt;zipapp&lt;/a&gt; module.
The PEP says
&amp;quot;Python has had the ability to execute directories or ZIP-format archives as scripts since version 2.6 [...]
This feature is not as popular as it should be mainly because it was not promoted as part of Python …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0441/"&gt;PEP 441&lt;/a&gt; resulted in the creation of the &lt;a class="reference external" href="https://docs.python.org/3/library/zipapp.html"&gt;zipapp&lt;/a&gt; module.
The PEP says
&amp;quot;Python has had the ability to execute directories or ZIP-format archives as scripts since version 2.6 [...]
This feature is not as popular as it should be mainly because it was not promoted as part of Python 2.6.&amp;quot;
So far, so true --
the first time I saw the feature used in production,
in Facebook,
I was so shocked I had to take a &lt;a class="reference external" href="https://www.facebook.com/FBSweetStop/"&gt;Sweet Stop&lt;/a&gt; break.&lt;/p&gt;
&lt;p&gt;However, &lt;a class="reference external" href="https://github.com/pantsbuild/pex/blob/acce05621f1fed977974e6502439b91cfede7d49/src/python/twitter/common/python/pexbuilder.py"&gt;more than a year&lt;/a&gt; before the PEP was created,
and even longer than the PEP was implemented,
&lt;a class="reference external" href="https://pex.readthedocs.io/en/stable/whatispex.html"&gt;the PEX format&lt;/a&gt;
was contributed to the Python community by Twitter.
It was, indeed, not well promoted.
Indeed the &lt;a class="reference external" href="https://www.youtube.com/watch?v=NmpnGhRwsu0"&gt;lightning talk&lt;/a&gt; by Brian Wickman
(creator of PEX)
wouldn't be given for two more years.&lt;/p&gt;
&lt;p&gt;However, at this point in time,
PEX is a superior solution to zipapp in every single way:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It supports both Python 2 and Python 3.&lt;/li&gt;
&lt;li&gt;It supports C extensions and non-zip-safe archives.&lt;/li&gt;
&lt;li&gt;It has been used in production, &lt;a class="reference external" href="https://pex.readthedocs.io/en/stable/#pex"&gt;by many people&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The only advantage zipapp has? It is in the standard library.
This used to be a big advantage.
However, &lt;a class="reference external" href="https://glyph.twistedmatrix.com/2016/08/python-packaging.html"&gt;Python packaging is good now&lt;/a&gt; and the biggest difference is that a module in the standard library
can change in backwards-compatible ways extremely slowly,
and in ways that evolve bad interfaces even slower.
A module on PyPI can get regular updates, regular releases and, most importantly,
if it is bad -- it can be supplanted by a new module, and see users &lt;a class="reference external" href="https://github.com/hynek/characteristic/blob/a1e7b39fbf77fd87ed16b58cf265108bc6edc5f3/README.rst"&gt;naturally move to the new solution&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;ZipApp is a non-solution for a non-problem.
The solution for the problem of this feature not being well known is to &lt;em&gt;talk about it more&lt;/em&gt;.
I, and &lt;a class="reference external" href="https://www.youtube.com/watch?v=nwsCUfodq7I"&gt;other people&lt;/a&gt;,  have given &lt;a class="reference external" href="https://www.youtube.com/watch?v=f5nNzI8riNg"&gt;multiple&lt;/a&gt; &lt;a class="reference external" href="https://github.com/moshez/boredbot/blob/master/luggage/buildpex.py"&gt;talks&lt;/a&gt; that involved the awesomeness of PEX
(in SF Python, SF SRE, PyBay)
and have written &lt;a class="reference external" href="https://orbifold.xyz/python-docker.html"&gt;multiple posts&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/moshez/sayhello"&gt;proofs of concept&lt;/a&gt; on my GitHub.&lt;/p&gt;
&lt;p&gt;I have used PEX in production in three different companies,
teaching my &lt;a class="reference external" href="http://sedimental.org/the_packaging_gradient.html#depending_on_pre_installed_python"&gt;colleagues&lt;/a&gt; about it as a side-effect.&lt;/p&gt;
&lt;p&gt;I wish more people would be giving talks,
and writing posts.
Using the standard library to reimplement a popular tool,
that can iterate faster,
not being bound to the Python release cycle,
does not help anyone.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>Nitpicks are for Robots</title><link href="https://orbifold.xyz/nitpicks-are-for-robots.html" rel="alternate"></link><published>2017-06-09T22:20:00-07:00</published><updated>2017-06-09T22:20:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2017-06-09:/nitpicks-are-for-robots.html</id><summary type="html">&lt;p&gt;Many projects and organizations have a coding standard.
For Python, much of the time, the standard is a variant of &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt;.
During code reviews, often the reviewer will point out where the
code disagrees with the standard, and ask for it to be fixed.
Sometimes, if the reviewer is …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Many projects and organizations have a coding standard.
For Python, much of the time, the standard is a variant of &lt;a class="reference external" href="https://www.python.org/dev/peps/pep-0008/"&gt;PEP 8&lt;/a&gt;.
During code reviews, often the reviewer will point out where the
code disagrees with the standard, and ask for it to be fixed.
Sometimes, if the reviewer is self-aware enough,
they will precede those comments with &lt;code&gt;nit&lt;/code&gt;
or &lt;code&gt;nitpick&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As Raymond Hettinger points out in &lt;a class="reference external" href="https://www.youtube.com/watch?v=wf-BqAjZb8M"&gt;Beyond PEP8&lt;/a&gt;,
this gives a reviewer &amp;quot;something to do&amp;quot;
without needing a lot of understanding,
and will sometimes be used by people who feel overwhelmed at
their job.
Often these people need to be helped
(mentored, tutored or sometimes just encouraged)
but those code reviews mask their difficulties with
an illusion of productivity.&lt;/p&gt;
&lt;p&gt;Moreover, this often feels to the original coder as a put-down attempt
(&amp;quot;I know the standard better than you&amp;quot;)
or simply as an attempt to slow them down and derail them.
It does not matter that this is rarely the real intention
(although, in sufficiently toxic teams, it can be)
it is hard to see a comment on every other line saying
&amp;quot;there is a missing space after '3'&amp;quot;
or &amp;quot;funcName should be func_name&amp;quot;
without feeling that enough is enough, and &lt;em&gt;clearly&lt;/em&gt; the reviewer
is just trying to make themselves feel important.&lt;/p&gt;
&lt;p&gt;The proper solution for that is to &lt;em&gt;automate&lt;/em&gt; the nitpicks.
There are many possible tools to use there:
&lt;a class="reference external" href="http://flake8.pycqa.org/en/latest/"&gt;flake8&lt;/a&gt; (or a custom &lt;a class="reference external" href="http://flake8.pycqa.org/en/latest/user/using-plugins.html"&gt;flake8 plugin&lt;/a&gt;),
&lt;a class="reference external" href="https://www.pylint.org/"&gt;pylint&lt;/a&gt; (or a custom &lt;a class="reference external" href="https://pylint.readthedocs.io/en/latest/reference_guide/plugins.html"&gt;pylint plugin&lt;/a&gt;)
or even, if  your needs are unique enough,
write a &lt;a class="reference external" href="https://github.com/twisted/twistedchecker"&gt;custom tool&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Ideally, there is already CI in place for the tool,
using &lt;a class="reference external" href="https://tox.readthedocs.io/en/latest/config.html"&gt;Tox&lt;/a&gt; and &lt;a class="reference external" href="https://travis-ci.org/"&gt;some&lt;/a&gt; &lt;a class="reference external" href="https://circleci.com/"&gt;CI&lt;/a&gt; &lt;a class="reference external" href="https://docs.gitlab.com/ce/ci/quick_start/README.html#shared-runners"&gt;runner&lt;/a&gt; that integrates with your
development life cycle
(otherwise, how would the unit tests run?)
and extending Tox with a new environment for running
whatever automatic nitpicker (or nitpickers)
should be straightforward.&lt;/p&gt;
&lt;p&gt;When adding a new nitpicking rule,
some sort of grandfathering strategy needs to be added.
My favorite one, unfortunately, takes some time
to implement:
have Tox run the linting tool, itself,
in &amp;quot;ignore process exit code&amp;quot; mode.
Capture the output,
and compare it to a list of exceptions
kept in a special &amp;quot;list of exceptions&amp;quot; file.
Now -- and this is the important thing --
any deviation is an error.
In particular, anything that &lt;em&gt;fixes&lt;/em&gt;
a nitpick should also remove it from the
list of exceptions.&lt;/p&gt;
&lt;p&gt;Of course, this means that it is possible to &lt;em&gt;add&lt;/em&gt;
to the list of exceptions.
But now it is clearly visible in the code diff.
The code review will naturally ask &amp;quot;why&amp;quot;,
since clearly conventions have been intentionally violated.
In a rare case, there might be a reason that is good.
But the important thing: now the question is not arbitrary,
asked by a human with possibly impure motivations --
and so, will be answered in honesty and with good intentions assumed.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>My Little Subclass: Inheritance is Magic</title><link href="https://orbifold.xyz/my-little-subclass.html" rel="alternate"></link><published>2017-04-29T22:20:00-07:00</published><updated>2017-04-29T22:20:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2017-04-29:/my-little-subclass.html</id><summary type="html">&lt;p&gt;&lt;em&gt;Learning about Python Method Resolution Order with Twilight Sparkle and her friends.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(Thanks to Ashwini Oruganti for her helpful suggestions.)&lt;/p&gt;
&lt;p&gt;The show &amp;quot;My Little Pony: Friendship is Magic&amp;quot; is the latest
reimagination of the &amp;quot;My Little Pony&amp;quot; brand as a TV show. The show takes
place, mostly, in Ponyville and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;em&gt;Learning about Python Method Resolution Order with Twilight Sparkle and her friends.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;(Thanks to Ashwini Oruganti for her helpful suggestions.)&lt;/p&gt;
&lt;p&gt;The show &amp;quot;My Little Pony: Friendship is Magic&amp;quot; is the latest
reimagination of the &amp;quot;My Little Pony&amp;quot; brand as a TV show. The show takes
place, mostly, in Ponyville and features the struggles of the so-called
&amp;quot;Mane Six&amp;quot; characters. Ponyville was founded by Earth ponies, but is
populated by Unicorns and Pegasus ponies as well.&lt;/p&gt;
&lt;p&gt;At the end of season 4, Twilight Sparkle becomes an &amp;quot;Alicorn&amp;quot; princess.
Alicorns have both horns, like unicorns, and wings, like the pegasus
ponies. In the My Little Pony show, horns are used to do magic -- most
commonly, telekinetically moving objects.&lt;/p&gt;
&lt;p&gt;When reaching puberty, ponies discover their &amp;quot;special talent&amp;quot; via a
cutie mark -- a magical tattoo on their flank.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
from __future__ import print_function
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;
# Base class for all ponies.
class Pony(object):
    def __init__(self, name, cutie_mark_ability):
        self.name = name
        self.cutie_mark_ability = cutie_mark_ability

    def move(self):
        return &amp;quot;Galloping&amp;quot;

    def carry(self):
        return &amp;quot;Carrying on my back&amp;quot;

    def special_abilities(self):
        return [self.cutie_mark_ability]
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;
# Earth ponies. Just regular ponies.
class Earth(Pony):
    pass
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;
# Apple Pie is an Earth pony. Let's define her!
Apple_Pie = Earth(&amp;quot;Apple Pie&amp;quot;, &amp;quot;farming apples&amp;quot;)
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;
# This is a little helper function to help ponies
# introduce themselves.
def introduce(pony):
    print(&amp;quot;Hi, I'm&amp;quot;, pony.name, &amp;quot;,&amp;quot;, type(pony).__name__, &amp;quot;pony&amp;quot;)
    print(&amp;quot;Moving:&amp;quot;, pony.move())
    print(&amp;quot;Carrying:&amp;quot;, pony.carry())
    print(&amp;quot;Abilities:&amp;quot;)
    for ability in pony.special_abilities():
        print(&amp;quot;\t&amp;quot;, ability)
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;
introduce(Apple_Pie)
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
Hi, I'm Apple Pie , Earth pony
Moving: Galloping
Carrying: Carrying on my back
Abilities:
     farming apples
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;
# Pegasus ponies have wings and can fly.
class Pegasus(Pony):

    def move(self):
        return &amp;quot;Flying&amp;quot;

    def special_abilities(self):
        return super(Pegasus, self).special_abilities() + [&amp;quot;flying&amp;quot;]
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;
# Rainbow Dash is a pegasus. Let's define her!
Rainbow_Dash = Pegasus(&amp;quot;Rainbow Dash&amp;quot;, &amp;quot;rainbow boom&amp;quot;)

introduce(Rainbow_Dash)
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
Hi, I'm Rainbow Dash , Pegasus pony
Moving: Flying
Carrying: Carrying on my back
Abilities:
     rainbow boom
     flying
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;
# Unicorn ponies have wings and can fly.
class Unicorn(Pony):

    def carry(self):
        return &amp;quot;Lifting with horn&amp;quot;

    def special_abilities(self):
        return super(Unicorn, self).special_abilities() + [&amp;quot;magic&amp;quot;]
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;
Rarity = Unicorn(&amp;quot;Rarity&amp;quot;, &amp;quot;finding gems&amp;quot;)

introduce(Rarity)
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
Hi, I'm Rarity , Unicorn pony
Moving: Galloping
Carrying: Lifting with horn
Abilities:
     finding gems
     magic
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;
# Alicorn princesses have wings and horns
class Alicorn(Pegasus, Unicorn):

    def special_abilities(self):
        return super(Alicorn, self).special_abilities() + [&amp;quot;ruling&amp;quot;]

# Twilight Sparkle is an alicorn princess.
Twilight_Sparkle = Alicorn(&amp;quot;Twilight Sparkle&amp;quot;, &amp;quot;learning magic&amp;quot;)

introduce(Twilight_Sparkle)
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
Hi, I'm Twilight Sparkle , Alicorn pony
Moving: Flying
Carrying: Lifting with horn
Abilities:
     learning magic
     magic
     flying
     ruling
&lt;/pre&gt;
&lt;p&gt;Pun fully intended -- this is magic! To understand why, let us think of
how the inheritance hierarchy of the &lt;tt class="docutils literal"&gt;Alicorn&lt;/tt&gt; class looks like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;
    Pony
    /   \
   /     \
Unicorn Pegasus
   \     /
    \   /
    Alicorn
&lt;/pre&gt;
&lt;p&gt;The Unicorn class has a &lt;tt class="docutils literal"&gt;move&lt;/tt&gt; method it inherits from &lt;tt class="docutils literal"&gt;Pony&lt;/tt&gt;. But
magically, the &lt;tt class="docutils literal"&gt;Alicorn&lt;/tt&gt; class knows it should get the more
specialized one from &lt;tt class="docutils literal"&gt;Pegasus&lt;/tt&gt;. Could it be that when inheriting,
Python looks right to left? But then the &lt;tt class="docutils literal"&gt;carry&lt;/tt&gt; method would not work
correctly. Lastly, what about &lt;tt class="docutils literal"&gt;special_abilities&lt;/tt&gt;? How did it track
all classes correctly?&lt;/p&gt;
&lt;p&gt;The answer is the MRO -- message resolution order.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
Alicorn.mro()
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
[__main__.Alicorn, __main__.Pegasus, __main__.Unicorn, __main__.Pony, object]
&lt;/pre&gt;
&lt;p&gt;Let us first explain the last question. The meaning of
&lt;tt class="docutils literal"&gt;super(klass, &lt;span class="pre"&gt;instance).method()&lt;/span&gt;&lt;/tt&gt; is &amp;quot;find the next time the method
appears in the instance's class, after &lt;tt class="docutils literal"&gt;klass&lt;/tt&gt; does&amp;quot;. Because it looks
at the MRO of the instance's class, it knows to jump from &lt;tt class="docutils literal"&gt;Alicorn&lt;/tt&gt; to
&lt;tt class="docutils literal"&gt;Pegasus&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;Unicorn&lt;/tt&gt; and finally to &lt;tt class="docutils literal"&gt;Pony&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;The MRO also helps to explain the first question, but the answer is more
complex. Let us focus on the &lt;tt class="docutils literal"&gt;carry&lt;/tt&gt; method.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
Pegasus.carry == Pony.carry
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
True
&lt;/pre&gt;
&lt;p&gt;This is the first clue -- the methods compare equal. Which brings us to
our next point: let's list all candidate methods.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
candidates = set()
for klass in Alicorn.mro()[1:]:
    try:
        candidates.add(klass.carry)
    except AttributeError:
        pass
candidates
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
{&amp;lt;unbound method Unicorn.carry&amp;gt;, &amp;lt;unbound method Pegasus.carry&amp;gt;}
&lt;/pre&gt;
&lt;p&gt;(We do not see &lt;tt class="docutils literal"&gt;Pony.carry&lt;/tt&gt; in the set because the &lt;tt class="docutils literal"&gt;Pegasus.carry&lt;/tt&gt; appears first,
&lt;tt class="docutils literal"&gt;Pony.carry&lt;/tt&gt; compares equal, and &lt;tt class="docutils literal"&gt;candidates&lt;/tt&gt; is a set.)&lt;/p&gt;
&lt;p&gt;We only care about the &lt;em&gt;last&lt;/em&gt; time a method appears in the MRO: if you
think of it as &amp;quot;distance&amp;quot;, we are looking for the closest method. Since
in Python, it is easier to find the first time an element appears in a
list, we will calculate the reversed MRO:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
ordered_candidates = [getattr(klass, 'carry', None) for klass in Alicorn.mro()[1:]]
reverse_ordered_candidates = ordered_candidates[::-1]
reverse_ordered_candidates
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
[None,
 &amp;lt;unbound method Pony.carry&amp;gt;,
 &amp;lt;unbound method Unicorn.carry&amp;gt;,
 &amp;lt;unbound method Pegasus.carry&amp;gt;]
&lt;/pre&gt;
&lt;p&gt;Now we find the candidate with the highest reverse-distance (lowest
distance) using Python's &lt;tt class="docutils literal"&gt;max&lt;/tt&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
max(candidates, key=reverse_ordered_candidates.index)
&lt;/pre&gt;
&lt;pre class="literal-block"&gt;
&amp;lt;unbound method Unicorn.carry&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The same logic would explain the &lt;tt class="docutils literal"&gt;move&lt;/tt&gt; method, and the details of the
&lt;tt class="docutils literal"&gt;special_abilities&lt;/tt&gt; method.&lt;/p&gt;
&lt;p&gt;The Python Method Resolution Order (MRO) is subtle,
and it is easy to misunderstand.
Hopefully, the examples here,
and the sample code,
give a way to think about the MRO and understand why,
exactly,
it is the way it is.&lt;/p&gt;
</content><category term="misc"></category></entry><entry><title>PYTHONPATH Considered Harmful</title><link href="https://orbifold.xyz/pythonpath.html" rel="alternate"></link><published>2017-04-11T22:20:00-07:00</published><updated>2017-04-11T22:20:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2017-04-11:/pythonpath.html</id><summary type="html">&lt;p&gt;(Thanks to Tim D. Smith and Augie Fackler for reviewing a draft.
Any mistakes that remain are mine.)&lt;/p&gt;
&lt;p&gt;The environment variable &lt;code&gt;PYTHONPATH&lt;/code&gt; seems harmless enough.
The official documentation refers to its function as
&amp;quot;Augment the default search path for module files.&amp;quot;
However, in practice, setting this variable in a shell …&lt;/p&gt;</summary><content type="html">&lt;p&gt;(Thanks to Tim D. Smith and Augie Fackler for reviewing a draft.
Any mistakes that remain are mine.)&lt;/p&gt;
&lt;p&gt;The environment variable &lt;code&gt;PYTHONPATH&lt;/code&gt; seems harmless enough.
The official documentation refers to its function as
&amp;quot;Augment the default search path for module files.&amp;quot;
However, in practice, setting this variable in a shell can lead
to many confusing things.&lt;/p&gt;
&lt;p&gt;For one, most directories are poorly suited to be on the Python search path.
Consider, for example, the root directory of a typical Python project:
it contains &lt;code&gt;setup.py&lt;/code&gt; --
and so, if it were added to the current search path, &lt;code&gt;import setup&lt;/code&gt;
would become possible.
(This is one reason to have &lt;code&gt;src/&lt;/code&gt; directories.)
Often, directories added unwisely to the Python search path cause
files to be imported from paths they do not expect to,
and surprisingly conflict.&lt;/p&gt;
&lt;p&gt;In addition, it now means that commands such as &lt;code&gt;pip freeze&lt;/code&gt;
do not describe reality correctly:
just because &lt;code&gt;foo==1.2.4&lt;/code&gt; appears in the output,
does not mean that &lt;code&gt;import foo&lt;/code&gt; will import version &lt;code&gt;1.2.4&lt;/code&gt; --
and only careful checking of the &lt;code&gt;__file__&lt;/code&gt; attribute will notice
it.&lt;/p&gt;
&lt;p&gt;Specifically, any bug reporting template that asks the output of
&lt;code&gt;pip freeze&lt;/code&gt; to be attached is rendered nearly useless.&lt;/p&gt;
&lt;p&gt;Worse, active commands in &lt;code&gt;pip&lt;/code&gt; would seem to have no effect:
&lt;code&gt;pip install --upgrade&lt;/code&gt; or &lt;code&gt;pip uninstall&lt;/code&gt; would have no effect
on the valiant &lt;code&gt;foo&lt;/code&gt; package, safely ensconced in a directory
on &lt;code&gt;PYTHONPATH&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Finally, &lt;code&gt;PYTHONPATH&lt;/code&gt; changes paths for both Python 2 and 3.
This means code intended for one interpreter will end up in the other.&lt;/p&gt;
&lt;p&gt;Manipulating &lt;code&gt;PYTHONPATH&lt;/code&gt; should be reserved for specialized launchers
which need to start a Python program despite a complicated system configuration.
In those cases, &lt;code&gt;PYTHONPATH&lt;/code&gt; should be set inside the launcher,
so as not to effect any code outside it.&lt;/p&gt;
&lt;p&gt;As always, when needing specialized launchers in order to run code,
consider that
&amp;quot;&lt;a class="reference external" href="https://twistedmatrix.com/users/glyph/rant/extendit.html"&gt;starting up should not be the most complicated thing that your program does&lt;/a&gt;&amp;quot;.
It is quite possible that other, existing tools, are already good enough.
Maybe &lt;code&gt;virtualenv&lt;/code&gt;, &lt;code&gt;pip install -e&lt;/code&gt; or &lt;a class="reference external" href="https://pex.readthedocs.io/en/stable/"&gt;Pex&lt;/a&gt;.
can solve the problem?&lt;/p&gt;
&lt;div class="section" id="postscript"&gt;
&lt;h2&gt;Postscript&lt;/h2&gt;
&lt;p&gt;In order to write this post,
I tested the effect of setting &lt;code&gt;PYTHONPATH&lt;/code&gt; to various values.
One of those was left over after my testing,
leading to fifteen minutes of wasted debugging effort.
Harmful indeed!&lt;/p&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Shipping Python Applications in Docker</title><link href="https://orbifold.xyz/python-docker.html" rel="alternate"></link><published>2017-03-17T22:20:00-07:00</published><updated>2017-03-17T22:20:00-07:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2017-03-17:/python-docker.html</id><summary type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;When looking in open source examples, or tutorials, one will often see
Dockerfiles that look like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
FROM python:3.6
COPY setup.py /mypackage
COPY src /mypackage/src
COPY requirements.txt /
RUN pip install -r /requirements.txt
RUN pip install /mypackage
ENTRYPOINT [&amp;quot;/usr/bin/mypackage-console-script&amp;quot;, &amp;quot;some&amp;quot;, &amp;quot;arguments&amp;quot;]
&lt;/pre&gt;
&lt;p&gt;This …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;When looking in open source examples, or tutorials, one will often see
Dockerfiles that look like this:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
FROM python:3.6
COPY setup.py /mypackage
COPY src /mypackage/src
COPY requirements.txt /
RUN pip install -r /requirements.txt
RUN pip install /mypackage
ENTRYPOINT [&amp;quot;/usr/bin/mypackage-console-script&amp;quot;, &amp;quot;some&amp;quot;, &amp;quot;arguments&amp;quot;]
&lt;/pre&gt;
&lt;p&gt;This typical naive example has multiple problems,
which this article will show how to fix.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It uses a container with a &lt;a class="reference external" href="https://glyph.twistedmatrix.com/2015/03/docker-deploy-double-dutch.html"&gt;functioning build environment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;It has the potential for &amp;quot;loose&amp;quot; and/or incomplete requirements.txt,
so that changes in PyPI (or potential compromise of it)
change what is installed in the container.&lt;/li&gt;
&lt;li&gt;It is based on &lt;code&gt;python:3.6&lt;/code&gt;, a label which can point to different
images at different times (for example, when Python 3.6 has a patch release).&lt;/li&gt;
&lt;li&gt;It does not use virtual environments, leading to potential bad interactions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In general, when thinking about the Docker container image as the
&amp;quot;build&amp;quot; output of our source tree,
it is good to aim for a reproducible build: building the same source
tree should produce equivalent results.
(Literally bit-wise identical results are a good thing to aim for,
but there are many potential sources for spurious bitwise changes such
as dates embedded in zip files.)
One important reason is for bug fixes:
for example, a bug fix leads to change a single line of Python code.
That is usually a safe change, that is reasonably easy to understand and
to test for regressions.
However, if it also can update Python from 3.6.1 to 3.6.1,
or update Twisted from 17.1 to 17.2,
regressions are more likely and the change has to be tested more carefully.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="managing-base-images"&gt;
&lt;h2&gt;Managing Base Images&lt;/h2&gt;
&lt;p&gt;Docker images are built in layers.
In a &lt;code&gt;Dockerfile&lt;/code&gt;,
the &lt;code&gt;FROM&lt;/code&gt; line imports the layers from the source image.
Every other line adds exactly one layer.&lt;/p&gt;
&lt;p&gt;Container registries store images.
Internally, they deduplicate identical layers.
Images are indexed by user (or organization),
repository name and tag.
These are not immutable:
it is possible to upload a new image,
and point an old user/repository/tag at it.&lt;/p&gt;
&lt;p&gt;In theory, it is possible to achieve immutability by &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Content-addressable_storage"&gt;content-addressing&lt;/a&gt;.
However, registries usually garbage collect layers with no pointers.
The only safe thing to do is to own images on one's own user or organization.
Note that to &amp;quot;own&amp;quot; the images, all we need to do is to push them under
our own name.
The push will be fast -- since the actual content is already on the Docker
registry side, it will be short-circuit the actual upload.&lt;/p&gt;
&lt;p&gt;Especially when working using a typical home internet connection,
or an internet cafe connection,
download speeds are usually reasonable but upload speeds are slow.
This upload does not depend on fast upload speed, since it only
uploads small hashes.
However, it will make sure the images keep forever, and we have a stable
pointer to them.&lt;/p&gt;
&lt;p&gt;The following code shows an example of fork-tagging in this way
into a user account.
We use time, precise to the microsecond, to name the images.
This means that running this script is all but guaranteed to result
in unique image labels, and they even sort correctly.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
import datetime, subprocess
tag = datetime.datetime.utcnow().isoformat()
tag = tag.replace(':', '-').replace('.', '-')
for ext in ['', '-slim']:
    image = &amp;quot;moshez/python36{}:{}&amp;quot;.format(ext, tag)
    orig = &amp;quot;python:3.6{}&amp;quot;.format(ext)
    subprocess.check_call([&amp;quot;docker&amp;quot;, &amp;quot;pull&amp;quot;, orig])
    subprocess.check_call([&amp;quot;docker&amp;quot;, &amp;quot;tag&amp;quot;, orig, image])
    subprocess.check_call([&amp;quot;docker&amp;quot;, &amp;quot;push&amp;quot;, image])
&lt;/pre&gt;
&lt;p&gt;(This assumes the Docker client is already pre-authenticated,
via running &lt;code&gt;docker login&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;It produces images that look like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
moshez/python36-slim:2017-03-10T02-18-12-843046
   b5b6550a858c
   198.6 MB
moshez/python36:2017-03-10T02-18-12-843046
   a1782fa44ef7
   687.2 MB
&lt;/pre&gt;
&lt;p&gt;The script is safe to run -- it will not clobber existing labels.
It will require a source change to use the new images --
usually by changing a &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-third-party-dependencies"&gt;
&lt;h2&gt;Python Third Party Dependencies&lt;/h2&gt;
&lt;p&gt;When installing dependencies, it is good to ensure that those cannot change.
Modern &lt;code&gt;pip&lt;/code&gt; gives great tools to do that, but those are rarely used.
The following describes how to allow reproducible builds
while still allowing for easy upgrades.&lt;/p&gt;
&lt;p&gt;&amp;quot;Loose&amp;quot; requirements specify programmer intent.
They indicate what dependencies the programmer cares about:
e.g., wanting a minimum version of a library.
They are handwritten by the developer.
Note that often that &amp;quot;hand-writing&amp;quot; can be little more than
the single line of the &amp;quot;main&amp;quot; package
(the one that contains the code which is written in-house).
It will usually be a bit more than that:
for example, &lt;code&gt;pex&lt;/code&gt; and &lt;code&gt;docker-py&lt;/code&gt; to support
the build process.&lt;/p&gt;
&lt;p&gt;Strict dependencies indicate the entire dependency chain:
complete, with specific versions and hashes.
Note that both must be checked in.
Re-generating the strict dependencies is a source-tree change
operation, no different from changing the project's own Python code,
because it changes the build output.&lt;/p&gt;
&lt;p&gt;The workflow for regenerating the strict dependencies might look like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ git checkout -b updating-third-party
$ docker build -t temp-image -f harden.docker .
$ docker run --rm -it temp-image &amp;gt; requirements.strict.txt
$ git commit -a -m 'Update 3rd party'
$ git push
$ # Follow code workflow
&lt;/pre&gt;
&lt;p&gt;There is no way, currently, to statically analyze dependencies.
Docker allows to install the packages in an ephemeral environment,
analyze the dependencies and check the hashes,
and then output the results.
The output can be checked in, while the actual installation is removed:
this is what the &lt;code&gt;--rm&lt;/code&gt; flag above means.&lt;/p&gt;
&lt;p&gt;For the workflow above to work, we need a &lt;code&gt;Dockerfile&lt;/code&gt; and
a script.
The &lt;code&gt;Dockerfile&lt;/code&gt; is short,
since most of the logic is in the script.
We use the reproducible base images,
(i.e., the images we &lt;em&gt;fork-tagged&lt;/em&gt;),
copy the inputs,
and let the entry point run the script.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# harden.docker
FROM moshez/python36:2017-03-09T04-50-49-169150
COPY harden-requirements requirements.loose.txt /
ENTRYPOINT [&amp;quot;/harden-requirements&amp;quot;]
&lt;/pre&gt;
&lt;p&gt;The script itself is divided into two parts.
The first part installs the loose requirements in a virtual environment,
and then runs &lt;code&gt;pip freeze&lt;/code&gt;.
This gives us the &amp;quot;frozen&amp;quot; requirements --
with specific versions, but without hashes.
We use &lt;code&gt;--all&lt;/code&gt; to force freezing of packages pip thinks we should not.
One of those packages is &lt;code&gt;setuptools&lt;/code&gt;,
which &lt;code&gt;pex&lt;/code&gt; needs specific versions of.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# harden-requirements
import subprocess, sys
subprocess.check_output([sys.executable, &amp;quot;-m&amp;quot;, &amp;quot;venv&amp;quot;,
                         &amp;quot;/envs/loose&amp;quot;])
subprocess.check_output([&amp;quot;/envs/loose/bin/pip&amp;quot;, &amp;quot;install&amp;quot;, &amp;quot;-r&amp;quot;,
                         &amp;quot;/requirements.loose.txt&amp;quot;])
frozen = subprocess.check_output([&amp;quot;/envs/loose/bin/pip&amp;quot;,
                                  &amp;quot;freeze&amp;quot;, &amp;quot;--all&amp;quot;])
with open(&amp;quot;/requirements.frozen.txt&amp;quot;, 'wb') as fp:
    fp.write(frozen)
&lt;/pre&gt;
&lt;p&gt;The second part takes the frozen requirements,
and uses &lt;code&gt;pip-compile&lt;/code&gt; (part of the &lt;code&gt;pip-tools&lt;/code&gt; package)
to generate the hashes.
The &lt;code&gt;--allow-unsafe&lt;/code&gt; is the scarier looking,
but semantically equivalent,
version of pip's &lt;code&gt;--all&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
subprocess.check_output([&amp;quot;/envs/loose/bin/pip&amp;quot;, &amp;quot;install&amp;quot;,
                         &amp;quot;pip-tools&amp;quot;])
output = subprocess.check_output([&amp;quot;/envs/loose/bin/pip-compile&amp;quot;,
                                  &amp;quot;--allow-unsafe&amp;quot;,
                                  &amp;quot;--generate-hashes&amp;quot;,
                                  &amp;quot;requirements.frozen.txt&amp;quot;])
for line in output.decode('utf-8').splitlines():
    print(line)
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="docker-in-docker"&gt;
&lt;h2&gt;Docker-in-Docker&lt;/h2&gt;
&lt;p&gt;(Thanks to Glyph Lefkowitz for explaining that well.)&lt;/p&gt;
&lt;p&gt;Too many examples in the wild use the same container to build and deploy.
Those end up shipping a container full of build tools,
such as make and gcc,
to production.
That has many downsides -- size, performance, security and isolation.&lt;/p&gt;
&lt;p&gt;In order to properly separate those two tasks,
we will need to learn how to run containers from inside containers.
Running a container as a &lt;em&gt;daughter&lt;/em&gt; of a container is a bad idea.
Instead, we take advantage of the client/server architecture of Docker.&lt;/p&gt;
&lt;p&gt;Contrary to some misconception, &lt;code&gt;docker run&lt;/code&gt; does not run a container.
It connects to the Docker daemon, which runs the container.
The client knows how to connect to the daemon based on environment variables.
If the environment is vanilla, the client has a default:
it connects to the UNIX domain socket at &lt;code&gt;/var/run/docker.sock&lt;/code&gt;.
The daemon always listens locally on that socket.&lt;/p&gt;
&lt;p&gt;Thus, we can run a container from inside a container that has access
to the UNIX domain socket.
Such a socket is simply a file, in keeping with UNIX's &amp;quot;everything is a file&amp;quot;
philosophy.
Therefore, we can pass it in to the container by using host volume mounting.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ docker run -v /var/run/docker.sock:/var/run/docker.sock ...
&lt;/pre&gt;
&lt;p&gt;A Docker client running inside such a container will connect to the outside
daemon, and can cause it to run other containers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="python-output-formats"&gt;
&lt;h2&gt;Python Output Formats&lt;/h2&gt;
&lt;div class="section" id="wheel"&gt;
&lt;h3&gt;Wheel&lt;/h3&gt;
&lt;p&gt;Wheels are specially structured zip files.
They are designed so a simple unzip is all that is needed to install them.
The &lt;code&gt;pip&lt;/code&gt; program will build, and cache, wheels for any package
it installs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="pex"&gt;
&lt;h3&gt;Pex&lt;/h3&gt;
&lt;p&gt;Pex is an executable Python program.
It does not embed the interpreter, or the standard library.
It does, however, embed all third-party packages:
running the Pex file on a vanilla Python installation works,
as long as the Python versions are compatible.&lt;/p&gt;
&lt;p&gt;Pex works because running &lt;code&gt;python somefile.zip&lt;/code&gt; works by
adding &lt;code&gt;somefile.zip&lt;/code&gt; to &lt;code&gt;sys.path&lt;/code&gt;,
and then running &lt;code&gt;__main__.py&lt;/code&gt; from the archive as its main file.
The Zip format is end-based:
adding an arbitrary prefixes to the content does
not change the semantics of a zip file.
Pex adds the prefix &lt;code&gt;#!/usr/bin/env python&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="building-a-simple-service-container-image"&gt;
&lt;h2&gt;Building a Simple Service Container Image&lt;/h2&gt;
&lt;p&gt;The following will use &lt;code&gt;remotemath&lt;/code&gt; package,
which does slow remote arithmetic operations (mutliplication and negation).
It does not have much utility for production,
but is useful for pedagogical purposes, such as this one.&lt;/p&gt;
&lt;p&gt;In general, build systems can get complicated.
For our examples, however, a simple Python script
is all the build infrastructure we need.&lt;/p&gt;
&lt;p&gt;Much like in the requirements hardening example,
we will follow the pattern of creating a docker container image
and running it immediately.
Note that the first two lines do not depend on the so-called &amp;quot;context&amp;quot; --
the files that are being copied into the docker container from the outside.
Because of this, the docker build process will know to cache them,
leading to fast rebuilds.&lt;/p&gt;
&lt;p&gt;However, building like this allows us to ignore how to mount files
into the docker container --
and allows us to ignore the sometimes subtle semantics of such mounting.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# build.docker
FROM moshez/python36:2017-03-09T04-50-49-169150
RUN python3 -m venv /buildenv &amp;amp;&amp;amp; mkdir /wheelhouse
COPY requirements.strict.txt build-script remotemath.docker /
ENTRYPOINT [&amp;quot;/buildenv/bin/python&amp;quot;, &amp;quot;/build-script&amp;quot;]
&lt;/pre&gt;
&lt;p&gt;This Docker file depends on two things we have not mentioned:
a build script and the &lt;code&gt;remotemath.docker&lt;/code&gt; file.
The build script itself has one subtlety -- because it calls out to pip,
it cannot import the docker module until it has been installed.
Indeed, since it starts out in a vanilla virtual environment,
it does not have access to any non-built-in packages.
We do need to make sure the &lt;code&gt;docker-py&lt;/code&gt; PyPI package makes it into the
requirements file.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# build-script
import subprocess

def run(cmd, *args):
    args = [os.path.join('/buildenv/bin', cmd)] + list(args[1:])
    return subprocess.check_call(args)

os.makedirs('/mnt/output')
shutil.copy('/remotemath.docker',
            '/mnt/output/remotemath.docker')
run('pip', 'install', '--require-hashes',
                      '-r', 'requirements.strict.txt')
run('pip', 'wheel', '--require-hashes',
                    '-r', 'requirements.strict.txt',
                    '--wheel-dir', '/wheelhouse/')
run('pex', '-o', '/mnt/output/twist.pex',
           '-m', 'twisted',
           '--repo', '/wheelhouse', '--no-index',
           'remotemath')

import docker
client = docker.from_env()
client.images.build(
    path='/mnt/output/',
    dockerfile='/mnt/output/remotemath.docker',
    tag='/moshez/remotemath:{}'.format(sys.argv[1]),
    rm=True,
)
## TODO: Push here
&lt;/pre&gt;
&lt;p&gt;Docker has no way to &amp;quot;build and run&amp;quot; in one step.
We build an image, tagged as &lt;code&gt;temp-image&lt;/code&gt;,
like we did for hardening.
When running the build on a shared machine are likely,
this needs to be a uuid,
and have some garbage collection mechanism.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
$ docker build -t temp-image -f build.docker .
$ docker run --rm -it \
         -v /var/run/docker.sock:/var/run/docker.sock \
         temp-image $(git rev-parse HEAD)
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; for the production service is also short:
here, we take advantage of two nice properties of the
&lt;code&gt;python -m twisted&lt;/code&gt; command
(wrapped into pex as &lt;code&gt;twist.pex&lt;/code&gt;):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;It accepts a port on the command-line.
Since arguments to Docker run are appended to the command-line,
this can be run as &lt;code&gt;docker run moshez/remotemath:TAG --port=tcp:8080&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;It reaps adopted children, and thus can be used as PID 1.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;
FROM moshez/python36-slim:2017-03-09T04-50-49-169150
COPY twist.pex /
ENTRYPOINT [&amp;quot;/twist.pex&amp;quot;, &amp;quot;remotemath&amp;quot;]
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="building-a-container-image-with-custom-code"&gt;
&lt;h2&gt;Building a Container Image With Custom Code&lt;/h2&gt;
&lt;p&gt;So far we have packaged a ready-made application.
That was non-trivial in itself,
but now let us write an application.&lt;/p&gt;
&lt;div class="section" id="pyramid-app"&gt;
&lt;h3&gt;Pyramid App&lt;/h3&gt;
&lt;p&gt;We are using the &lt;a class="reference external" href="https://trypyramid.com/"&gt;Pyramid&lt;/a&gt; framework to write an application.
It will have one page,
which will use the remote math service to calculate &lt;code&gt;3*4&lt;/code&gt;.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# setup.py
import setuptools
setuptools.setup(name='fancycalculator',
    packages=setuptools.find_packages(where='src'),
    package_dir={&amp;quot;&amp;quot;: &amp;quot;src&amp;quot;}, install_requires=['pyramid'])
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;
# src/fancycalculator/app.py
import os, requests, pyramid.config, pyramid.response
def multiply(request):
    res = requests.post(os.environ['REMOTE_MATH']+'/multiply', json=[3, 4])
    num, = res.json()
    return pyramid.response.Response('Result:{}'.format(num))
cfg = pyramid.config.Configurator()
cfg.add_route('multiply', '/');
cfg.add_view(multiply, route_name='multiply')
app = cfg.make_wsgi_app()
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="changes"&gt;
&lt;h3&gt;Changes&lt;/h3&gt;
&lt;p&gt;In many cases, one logical source code repository will be responsible for
more than one Docker image.
Obviously, in the case of a monorepo, this will happen.
But even when using a repo per logical unit, often two services share
so much code that it makes sense to separate them into two images.&lt;/p&gt;
&lt;p&gt;For example, the admin panel of a web application and the application itself.
It might make sense to build them as two repositories because they will not
share all the code and running them on separate containers allows separating
permissions effectively.
However, they will share enough code between them that is not general interest
that building them out of the same repository is probably a good idea.&lt;/p&gt;
&lt;p&gt;This is what we will do in this example.
We will change our build files, above, to also build the &amp;quot;fancy calculator&amp;quot;
Docker image.&lt;/p&gt;
&lt;p&gt;Two files need append-only changes: &lt;code&gt;build.docker&lt;/code&gt; needs to add
the new source files and &lt;code&gt;build-script&lt;/code&gt; needs to actually build
the new container.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# build.docker
RUN mkdir /fancycalculator
COPY setup.py /fancycalculator/
COPY src /fancycalculator/src/
COPY fancycalculator.docker /
&lt;/pre&gt;
&lt;pre class="code literal-block"&gt;
# build-script
run('pip', 'wheel', '/fancycalculator',
    '--wheel-dir', '/wheelhouse')
run('pex', '-o', '/mnt/output/fc-twist.pex',
    '-m', 'twisted',
    '--repo', '/wheelhouse', '--no-index',
    'twisted', 'fancycalculator')
client.images.build(path='/mnt/output/',
    dockerfile='/mnt/output/fancycalculator.docker',
    tag='/moshez/fancycalculator:{}'.format(sys.argv[1]),
    rm=True,
)
&lt;/pre&gt;
&lt;p&gt;Again, in more realistic scenario where a build system is already being
used, it might be that a new build configuration file needs to be added --
and if all the source code is already in a subdirectory, that directory
can be added as a whole in the build &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;We need to add a &lt;code&gt;Dockerfile&lt;/code&gt; --
the one for production &lt;code&gt;fancycalculator&lt;/code&gt;.
Again, using the Twisted WSGI container at the root allows us to avoid
some complexity.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;
# fancycalculator.docker
FROM moshez/python36-slim:2017-03-09T04-50-49-169150
COPY fc-twist.pex /twist.pex
ENTRYPOINT [&amp;quot;/twist.pex&amp;quot;, &amp;quot;web&amp;quot;, &amp;quot;--wsgi&amp;quot;, \
            &amp;quot;fancycalculator.app.app&amp;quot;]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="running-containers"&gt;
&lt;h2&gt;Running Containers&lt;/h2&gt;
&lt;div class="section" id="orchestration-framework"&gt;
&lt;h3&gt;Orchestration Framework&lt;/h3&gt;
&lt;p&gt;There are several popular orchestration framework:
Kubernetes (sometimes shortened to k8s),
Docker Swarm,
Mesosphere and Nomad.
Of those, Swarm is probably the easiest to get up and running.&lt;/p&gt;
&lt;p&gt;In any case, it is best to make sure specific containers are written
in an OF-agnostic manner.
The easiest way to achieve that is to have containers expect to connect
to a DNS name for other services.
All Orchestation Frameworks support some DNS integration in order to do
service discovery.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="configuration-and-secrets"&gt;
&lt;h3&gt;Configuration and Secrets&lt;/h3&gt;
&lt;p&gt;Secrets can be bootstrapped from the secret system the Orchestration Framework
uses.
When not using an Orchestration Framework, it is possible to mount secret
files directly into containers with &lt;code&gt;-v&lt;/code&gt;.
The reason &amp;quot;bootstrapped&amp;quot; is used is because often it is easier to have
the secret at that level be a &lt;code&gt;PyNaCl&lt;/code&gt; private key,
and to add application-level secrets by encrypting them with a
&lt;code&gt;PyNaCl&lt;/code&gt; corresponding public key
(that can be checked into the repository)
and putting them directly in the image.
This adds developer velocity by allowing develops to add secrets directly
without giving them any special privileges.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="storage"&gt;
&lt;h3&gt;Storage&lt;/h3&gt;
&lt;p&gt;In general, much of Docker is used for &amp;quot;stateless&amp;quot; services.
When needing to keep state, there are several options.
One is to avoid an Orchestration Framework for the stateful services:
deploy with docker, but mount the area where long-term data is kept
from the host.
Backup, redundancy and fail-over solutions still need to be implemented,
but this is no worse than without containers, and containers at least
give an option of atomic upgrades.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="misc"></category></entry><entry><title>Pelican -- an Experiment</title><link href="https://orbifold.xyz/experiment.html" rel="alternate"></link><published>2017-03-07T22:20:00-08:00</published><updated>2017-03-07T22:20:00-08:00</updated><author><name>Moshe Zadka</name></author><id>tag:orbifold.xyz,2017-03-07:/experiment.html</id><summary type="html">&lt;p class="first last"&gt;An experimental blog&lt;/p&gt;
</summary><content type="html">&lt;p&gt;This blog is an experiment -- static blog,
hosted on my own domain.
An &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Orbifold"&gt;Orbifold&lt;/a&gt; is, roughly speaking,
something that locally looks like Euclidean
space divided by a finite linear group.&lt;/p&gt;
&lt;p&gt;This is Moshe'z space,
to talk on how things look like --
locally and globally.&lt;/p&gt;
</content><category term="misc"></category></entry></feed>